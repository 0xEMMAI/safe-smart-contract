{"id":"1b643869c3f0ce48c8ad3f1bb66af76d","_format":"hh-sol-build-info-1","solcVersion":"0.7.6","solcLongVersion":"0.7.6+commit.7338295f","input":{"language":"Solidity","sources":{"contracts/accessors/SimulateTxAccessor.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Executor, Enum} from \"../base/Executor.sol\";\n\n/**\n * @title Simulate Transaction Accessor.\n * @notice Can be used with StorageAccessible to simulate Safe transactions.\n * @author Richard Meissner - @rmeissner\n */\ncontract SimulateTxAccessor is Executor {\n    address private immutable ACCESSOR_SINGLETON;\n\n    constructor() {\n        ACCESSOR_SINGLETON = address(this);\n    }\n\n    /**\n     * @notice Modifier to make a function callable via delegatecall only.\n     * If the function is called via a regular call, it will revert.\n     */\n    modifier onlyDelegateCall() {\n        require(address(this) != ACCESSOR_SINGLETON, \"SimulateTxAccessor should only be called via delegatecall\");\n        _;\n    }\n\n    /**\n     * @notice Simulates a Safe transaction and returns the used gas, success boolean and the return data.\n     * @dev Executes the specified operation {Call, DelegateCall} and returns operation-specific data.\n     *      Has to be called via delegatecall.\n     *      This returns the data equal to `abi.encode(uint256(estimate), bool(success), bytes(returnData))`.\n     *      Specifically, the returndata will be:\n     *      `estimate:uint256 || success:bool || returnData.length:uint256 || returnData:bytes`.\n     * @param to Destination address .\n     * @param value Native token value.\n     * @param data Data payload.\n     * @param operation Operation type {Call, DelegateCall}.\n     * @return estimate Gas used.\n     * @return success Success boolean value.\n     * @return returnData Return data.\n     */\n    function simulate(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external onlyDelegateCall returns (uint256 estimate, bool success, bytes memory returnData) {\n        uint256 startGas = gasleft();\n        success = execute(to, value, data, operation, gasleft());\n        estimate = startGas - gasleft();\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load free memory location\n            let ptr := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(ptr, returndatasize())\n            // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n            // Point the return data to the correct memory location\n            returnData := ptr\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n}\n"},"contracts/base/Executor.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport {Enum} from \"../libraries/Enum.sol\";\n\n/**\n * @title Executor - A contract that can execute transactions\n * @author Richard Meissner - @rmeissner\n */\nabstract contract Executor {\n    /**\n     * @notice Executes either a delegatecall or a call with provided parameters.\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\n     *      - if the contract at `to` address has code or not\n     *      It is the responsibility of the caller to perform such checks.\n     * @param to Destination address.\n     * @param value Ether value.\n     * @param data Data payload.\n     * @param operation Operation type.\n     * @return success boolean flag indicating if the call succeeded.\n     */\n    function execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == Enum.Operation.DelegateCall) {\n            /* solhint-disable no-inline-assembly */\n            /// @solidity memory-safe-assembly\n            assembly {\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n            }\n            /* solhint-enable no-inline-assembly */\n        } else {\n            /* solhint-disable no-inline-assembly */\n            /// @solidity memory-safe-assembly\n            assembly {\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n            }\n            /* solhint-enable no-inline-assembly */\n        }\n    }\n}\n"},"contracts/base/FallbackManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\nimport {IFallbackManager} from \"../interfaces/IFallbackManager.sol\";\n\n/**\n * @title Fallback Manager - A contract managing fallback calls made to this contract\n * @author Richard Meissner - @rmeissner\n */\nabstract contract FallbackManager is SelfAuthorized, IFallbackManager {\n    // keccak256(\"fallback_manager.handler.address\")\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n    /**\n     *  @notice Internal function to set the fallback handler.\n     *  @param handler contract to handle fallback calls.\n     */\n    function internalSetFallbackHandler(address handler) internal {\n        /*\n            If a fallback handler is set to self, then the following attack vector is opened:\n            Imagine we have a function like this:\n            function withdraw() internal authorized {\n                withdrawalAddress.call.value(address(this).balance)(\"\");\n            }\n\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\n        */\n        if (handler == address(this)) revertWithError(\"GS400\");\n\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n\n    // @inheritdoc IFallbackManager\n    function setFallbackHandler(address handler) public override authorized {\n        internalSetFallbackHandler(handler);\n        emit ChangedFallbackHandler(handler);\n    }\n\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\n    //      and having the original caller address may enable additional verification scenarios.\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\n    fallback() external {\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            // When compiled with the optimizer, the compiler relies on a certain assumptions on how the\n            // memory is used, therefore we need to guarantee memory safety (keeping the free memory point 0x40 slot intact,\n            // not going beyond the scratch space, etc)\n            // Solidity docs: https://docs.soliditylang.org/en/latest/assembly.html#memory-safety\n\n            let handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\n\n            if iszero(handler) {\n                return(0, 0)\n            }\n\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize())\n\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            mstore(add(ptr, calldatasize()), shl(96, caller()))\n\n            // Add 20 bytes for the address appended add the end\n            let success := call(gas(), handler, 0, ptr, add(calldatasize(), 20), 0, 0)\n\n            returndatacopy(ptr, 0, returndatasize())\n            if iszero(success) {\n                revert(ptr, returndatasize())\n            }\n            return(ptr, returndatasize())\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n}\n"},"contracts/base/GuardManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n/* solhint-disable one-contract-per-file */\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"../libraries/Enum.sol\";\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\nimport {IGuardManager} from \"../interfaces/IGuardManager.sol\";\n\n/// @title Guard Interface\ninterface Guard is IERC165 {\n    /// @notice Checks the transaction details.\n    /// @dev The function needs to implement transaction validation logic.\n    /// @param to The address to which the transaction is intended.\n    /// @param value The value of the transaction in Wei.\n    /// @param data The transaction data.\n    /// @param operation The type of operation of the transaction.\n    /// @param safeTxGas Gas used for the transaction.\n    /// @param baseGas The base gas for the transaction.\n    /// @param gasPrice The price of gas in Wei for the transaction.\n    /// @param gasToken The token used to pay for gas.\n    /// @param refundReceiver The address which should receive the refund.\n    /// @param signatures The signatures of the transaction.\n    /// @param msgSender The address of the message sender.\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    /// @notice Checks the module transaction details.\n    /// @dev The function needs to implement module transaction validation logic.\n    /// @param to The address to which the transaction is intended.\n    /// @param value The value of the transaction in Wei.\n    /// @param data The transaction data.\n    /// @param operation The type of operation of the transaction.\n    /// @param module The module involved in the transaction.\n    /// @return moduleTxHash The hash of the module transaction.\n    function checkModuleTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        address module\n    ) external returns (bytes32 moduleTxHash);\n\n    /// @notice Checks after execution of transaction.\n    /// @dev The function needs to implement a check after the execution of the transaction.\n    /// @param hash The hash of the transaction.\n    /// @param success The status of the transaction execution.\n    function checkAfterExecution(bytes32 hash, bool success) external;\n}\n\nabstract contract BaseGuard is Guard {\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\n    }\n}\n\n/**\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\n    // keccak256(\"guard_manager.guard.address\")\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n    // @inheritdoc IGuardManager\n    function setGuard(address guard) external override authorized {\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\"GS300\");\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            sstore(GUARD_STORAGE_SLOT, guard)\n        }\n        /* solhint-enable no-inline-assembly */\n        emit ChangedGuard(guard);\n    }\n\n    /**\n     * @dev Internal method to retrieve the current guard\n     *      We do not have a public method because we're short on bytecode size limit,\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\n     *      with the slot `GUARD_STORAGE_SLOT`\n     * @return guard The address of the guard\n     */\n    function getGuard() internal view returns (address guard) {\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            guard := sload(GUARD_STORAGE_SLOT)\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n}\n"},"contracts/base/ModuleManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport {Enum} from \"../libraries/Enum.sol\";\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\nimport {Executor} from \"./Executor.sol\";\nimport {GuardManager, Guard} from \"./GuardManager.sol\";\nimport {IModuleManager} from \"../interfaces/IModuleManager.sol\";\n\n/**\n * @title Module Manager - A contract managing Safe modules\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\n           ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \n           so only trusted and audited modules should be added to a Safe. A malicious module can\n           completely takeover a Safe.\n * @author Stefan George - @Georgi87\n * @author Richard Meissner - @rmeissner\n */\nabstract contract ModuleManager is SelfAuthorized, Executor, GuardManager, IModuleManager {\n    address internal constant SENTINEL_MODULES = address(0x1);\n\n    mapping(address => address) internal modules;\n\n    /**\n     * @notice Setup function sets the initial storage of the contract.\n     *         Optionally executes a delegate call to another contract to setup the modules.\n     * @param to Optional destination address of call to execute.\n     * @param data Optional data of call to execute.\n     */\n    function setupModules(address to, bytes memory data) internal {\n        if (modules[SENTINEL_MODULES] != address(0)) revertWithError(\"GS100\");\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n        if (to != address(0)) {\n            if (!isContract(to)) revertWithError(\"GS002\");\n            // Setup has to complete successfully or transaction fails.\n            if (!execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max)) revertWithError(\"GS000\");\n        }\n    }\n\n    /**\n     * @notice Runs pre-execution checks for module transactions if a guard is enabled.\n     * @param to Target address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return guard Guard to be used for checking.\n     * @return guardHash Hash returned from the guard tx check.\n     */\n    function preModuleExecution(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) internal returns (address guard, bytes32 guardHash) {\n        guard = getGuard();\n\n        // Only whitelisted modules are allowed.\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"GS104\");\n\n        if (guard != address(0)) {\n            guardHash = Guard(guard).checkModuleTransaction(to, value, data, operation, msg.sender);\n        }\n    }\n\n    /**\n     * @notice Runs post-execution checks for module transactions if a guard is enabled.\n     * @param guardHash Hash returned from the guard during pre execution check.\n     * @param success Boolean flag indicating if the call succeeded.\n     * @param guard Guard to be used for checking.\n     * @dev Emits event based on module transaction success.\n     */\n    function postModuleExecution(address guard, bytes32 guardHash, bool success) internal {\n        if (guard != address(0)) {\n            Guard(guard).checkAfterExecution(guardHash, success);\n        }\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\n        else emit ExecutionFromModuleFailure(msg.sender);\n    }\n\n    // @inheritdoc IModuleManager\n    function enableModule(address module) public override authorized {\n        // Module address cannot be null or sentinel.\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\"GS101\");\n        // Module cannot be added twice.\n        if (modules[module] != address(0)) revertWithError(\"GS102\");\n        modules[module] = modules[SENTINEL_MODULES];\n        modules[SENTINEL_MODULES] = module;\n        emit EnabledModule(module);\n    }\n\n    // @inheritdoc IModuleManager\n    function disableModule(address prevModule, address module) public override authorized {\n        // Validate module address and check that it corresponds to module index.\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\"GS101\");\n        if (modules[prevModule] != module) revertWithError(\"GS103\");\n        modules[prevModule] = modules[module];\n        modules[module] = address(0);\n        emit DisabledModule(module);\n    }\n\n    // @inheritdoc IModuleManager\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public virtual override returns (bool success) {\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\n        success = execute(to, value, data, operation, type(uint256).max);\n        postModuleExecution(guard, guardHash, success);\n    }\n\n    // @inheritdoc IModuleManager\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public override returns (bool success, bytes memory returnData) {\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\n        success = execute(to, value, data, operation, type(uint256).max);\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load free memory location\n            returnData := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(returnData, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(returnData, returndatasize())\n            // Store the data\n            returndatacopy(add(returnData, 0x20), 0, returndatasize())\n        }\n        /* solhint-enable no-inline-assembly */\n        postModuleExecution(guard, guardHash, success);\n    }\n\n    // @inheritdoc IModuleManager\n    function isModuleEnabled(address module) public view override returns (bool) {\n        return SENTINEL_MODULES != module && modules[module] != address(0);\n    }\n\n    // @inheritdoc IModuleManager\n    function getModulesPaginated(address start, uint256 pageSize) external view override returns (address[] memory array, address next) {\n        if (start != SENTINEL_MODULES && !isModuleEnabled(start)) revertWithError(\"GS105\");\n        if (pageSize == 0) revertWithError(\"GS106\");\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 moduleCount = 0;\n        next = modules[start];\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\n            array[moduleCount] = next;\n            next = modules[next];\n            moduleCount++;\n        }\n\n        /**\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \n          \n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \n          included to the current page, nor will it be included in the next one if you pass it as a start.\n        */\n        if (next != SENTINEL_MODULES) {\n            next = array[moduleCount - 1];\n        }\n        // Set correct size of returned array\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(array, moduleCount)\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n\n    /**\n     * @notice Returns true if `account` is a contract.\n     * @dev This function will return false if invoked during the constructor of a contract,\n     *      as the code is not actually created until after the constructor finishes.\n     * @param account The address being queried\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        /* solhint-enable no-inline-assembly */\n        return size > 0;\n    }\n}\n"},"contracts/base/OwnerManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\nimport {IOwnerManager} from \"../interfaces/IOwnerManager.sol\";\n\n/**\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\n *      is more efficient than using a dynamic array.\n * @author Stefan George - @Georgi87\n * @author Richard Meissner - @rmeissner\n */\nabstract contract OwnerManager is SelfAuthorized, IOwnerManager {\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /**\n     * @notice Sets the initial storage of the contract.\n     * @param _owners List of Safe owners.\n     * @param _threshold Number of required confirmations for a Safe transaction.\n     */\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        if (threshold > 0) revertWithError(\"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        if (_threshold > _owners.length) revertWithError(\"GS201\");\n        // There has to be at least one Safe owner.\n        if (_threshold == 0) revertWithError(\"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this) || currentOwner == owner)\n                revertWithError(\"GS203\");\n            // No duplicate owners allowed.\n            if (owners[owner] != address(0)) revertWithError(\"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    // @inheritdoc IOwnerManager\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public override authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this)) revertWithError(\"GS203\");\n        // No duplicate owners allowed.\n        if (owners[owner] != address(0)) revertWithError(\"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    // @inheritdoc IOwnerManager\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public override authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        if (ownerCount - 1 < _threshold) revertWithError(\"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        if (owner == address(0) || owner == SENTINEL_OWNERS) revertWithError(\"GS203\");\n        if (owners[prevOwner] != owner) revertWithError(\"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    // @inheritdoc IOwnerManager\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public override authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        if (newOwner == address(0) || newOwner == SENTINEL_OWNERS || newOwner == address(this)) revertWithError(\"GS203\");\n        // No duplicate owners allowed.\n        if (owners[newOwner] != address(0)) revertWithError(\"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        if (oldOwner == address(0) || oldOwner == SENTINEL_OWNERS) revertWithError(\"GS203\");\n        if (owners[prevOwner] != oldOwner) revertWithError(\"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    // @inheritdoc IOwnerManager\n    function changeThreshold(uint256 _threshold) public override authorized {\n        // Validate that threshold is smaller than number of owners.\n        if (_threshold > ownerCount) revertWithError(\"GS201\");\n        // There has to be at least one Safe owner.\n        if (_threshold == 0) revertWithError(\"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    // @inheritdoc IOwnerManager\n    function getThreshold() public view override returns (uint256) {\n        return threshold;\n    }\n\n    // @inheritdoc IOwnerManager\n    function isOwner(address owner) public view override returns (bool) {\n        return !(owner == SENTINEL_OWNERS || owners[owner] == address(0));\n    }\n\n    // @inheritdoc IOwnerManager\n    function getOwners() public view override returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"},"contracts/common/NativeCurrencyPaymentFallback.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract NativeCurrencyPaymentFallback {\n    event SafeReceived(address indexed sender, uint256 value);\n\n    /**\n     * @notice Receive function accepts native currency transactions.\n     * @dev Emits an event with sender and received value.\n     */\n    receive() external payable {\n        emit SafeReceived(msg.sender, msg.value);\n    }\n}\n"},"contracts/common/SecuredTokenTransfer.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SecuredTokenTransfer - Secure token transfer.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract SecuredTokenTransfer {\n    /**\n     * @notice Transfers a token and returns a boolean if it was a success\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\n     *      It doesn't check if the `token` address is a contract or not.\n     * @param token Token that should be transferred\n     * @param receiver Receiver to whom the token should be transferred\n     * @param amount The amount of tokens that should be transferred\n     * @return transferred Returns true if the transfer was successful\n     */\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We write the return value to scratch space.\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            switch returndatasize()\n            case 0 {\n                transferred := success\n            }\n            case 0x20 {\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\n            }\n            default {\n                transferred := 0\n            }\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n}\n"},"contracts/common/SelfAuthorized.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {ErrorMessage} from \"../libraries/ErrorMessage.sol\";\n\n/**\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract SelfAuthorized is ErrorMessage {\n    function requireSelfCall() private view {\n        if (msg.sender != address(this)) revertWithError(\"GS031\");\n    }\n\n    modifier authorized() {\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"},"contracts/common/SignatureDecoder.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SignatureDecoder - Decodes signatures encoded as bytes\n * @author Richard Meissner - @rmeissner\n */\nabstract contract SignatureDecoder {\n    /**\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\n     *      Compact means uint8 is not padded to 32 bytes.\n     * @param pos Which signature to read.\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\n     * @param signatures Concatenated {r, s, v} signatures.\n     * @return v Recovery ID or Safe signature type.\n     * @return r Output value r of the signature.\n     * @return s Output value s of the signature.\n     */\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            let signaturePos := mul(0x41, pos)\n            r := mload(add(signatures, add(signaturePos, 0x20)))\n            s := mload(add(signatures, add(signaturePos, 0x40)))\n            v := byte(0, mload(add(signatures, add(signaturePos, 0x60))))\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n}\n"},"contracts/common/Singleton.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\n * @author Richard Meissner - @rmeissner\n */\nabstract contract Singleton {\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\n    // It should also always be ensured the address is stored alone (uses a full word)\n    address private singleton;\n}\n"},"contracts/common/StorageAccessible.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n *         It removes a method from the original contract not needed for the Safe Smart Account contracts.\n * @author Gnosis Developers\n */\nabstract contract StorageAccessible {\n    /**\n     * @notice Reads `length` bytes of storage in the currents contract\n     * @param offset - the offset in the current contract's storage in words to start reading from\n     * @param length - the number of words (32 bytes) of data to read\n     * @return the bytes that were read.\n     */\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\n        bytes memory result = new bytes(length * 32);\n        for (uint256 index = 0; index < length; index++) {\n            /* solhint-disable no-inline-assembly */\n            /// @solidity memory-safe-assembly\n            assembly {\n                let word := sload(add(offset, index))\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\n            }\n            /* solhint-enable no-inline-assembly */\n        }\n        return result;\n    }\n\n    /**\n     * @dev Performs a delegatecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static).\n     *\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n     * Specifically, the `returndata` after a call to this method will be:\n     * `success:bool || response.length:uint256 || response:bytes`.\n     *\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\n            // Load free memory location\n            let ptr := mload(0x40)\n            mstore(ptr, success)\n            mstore(add(ptr, 0x20), returndatasize())\n            returndatacopy(add(ptr, 0x40), 0, returndatasize())\n            revert(ptr, add(returndatasize(), 0x40))\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n}\n"},"contracts/examples/guards/DebugTransactionGuard.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"../../libraries/Enum.sol\";\nimport {BaseGuard} from \"../../base/GuardManager.sol\";\nimport {ISafe} from \"../../interfaces/ISafe.sol\";\n\n/**\n * @title Debug Transaction Guard - Emits transaction events with extended information.\n * @dev This guard is only meant as a development tool and example\n * @author Richard Meissner - @rmeissner\n */\ncontract DebugTransactionGuard is BaseGuard {\n    // solhint-disable-next-line payable-fallback\n    fallback() external {\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\n        // E.g. The expected check method might change and then the Safe would be locked.\n    }\n\n    event TransactionDetails(\n        address indexed safe,\n        bytes32 indexed txHash,\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        bool usesRefund,\n        uint256 nonce,\n        bytes signatures,\n        address executor\n    );\n\n    event ModuleTransasctionDetails(\n        bytes32 indexed txHash,\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation,\n        address module\n    );\n\n    event GasUsage(address indexed safe, bytes32 indexed txHash, uint256 indexed nonce, bool success);\n\n    mapping(bytes32 => uint256) public txNonces;\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed.\n     * @param to Destination address of Safe transaction.\n     * @param value Ether value of Safe transaction.\n     * @param data Data payload of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     * @param safeTxGas Gas that should be used for the Safe transaction.\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)\n     * @param gasPrice Gas price that should be used for the payment calculation.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n     * @param signatures Signature data that should be verified. Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     * @param executor Account executing the transaction.\n     */\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        // solhint-disable-next-line no-unused-vars\n        address payable refundReceiver,\n        bytes memory signatures,\n        address executor\n    ) external override {\n        uint256 nonce;\n        bytes32 txHash;\n        {\n            ISafe safe = ISafe(payable(msg.sender));\n            nonce = safe.nonce() - 1;\n            txHash = safe.getTransactionHash(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, nonce);\n        }\n        emit TransactionDetails(msg.sender, txHash, to, value, data, operation, safeTxGas, gasPrice > 0, nonce, signatures, executor);\n        txNonces[txHash] = nonce;\n    }\n\n    /**\n     * @notice Called by the Safe contract after a transaction is executed.\n     * @param txHash Hash of the executed transaction.\n     * @param success True if the transaction was successful.\n     */\n    function checkAfterExecution(bytes32 txHash, bool success) external override {\n        uint256 nonce = txNonces[txHash];\n        require(nonce != 0, \"Could not get nonce\");\n        txNonces[txHash] = 0;\n        emit GasUsage(msg.sender, txHash, nonce, success);\n    }\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed via a module.\n     * @param to Destination address of Safe transaction.\n     * @param value Ether value of Safe transaction.\n     * @param data Data payload of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     * @param module Account executing the transaction.\n     * @return moduleTxHash Hash of the module transaction.\n     */\n    function checkModuleTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        address module\n    ) external override returns (bytes32 moduleTxHash) {\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\n\n        emit ModuleTransasctionDetails(moduleTxHash, to, value, data, operation, module);\n    }\n}\n"},"contracts/examples/guards/DelegateCallTransactionGuard.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"../../libraries/Enum.sol\";\nimport {BaseGuard} from \"../../base/GuardManager.sol\";\n\n/**\n * @title DelegateCallTransactionGuard - Limits delegate calls to a specific target.\n * @author Richard Meissner - @rmeissner\n */\ncontract DelegateCallTransactionGuard is BaseGuard {\n    address public immutable ALLOWED_TARGET;\n\n    constructor(address target) {\n        ALLOWED_TARGET = target;\n    }\n\n    // solhint-disable-next-line payable-fallback\n    fallback() external {\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\n        // E.g. The expected check method might change and then the Safe would be locked.\n    }\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed.\n     * @dev  Reverts if the transaction is a delegate call to contract other than the allowed one.\n     * @param to Destination address of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     */\n    function checkTransaction(\n        address to,\n        uint256,\n        bytes memory,\n        Enum.Operation operation,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        // solhint-disable-next-line no-unused-vars\n        address payable,\n        bytes memory,\n        address\n    ) external view override {\n        require(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET, \"This call is restricted\");\n    }\n\n    function checkAfterExecution(bytes32, bool) external view override {}\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed via a module.\n     * @param to Destination address of Safe transaction.\n     * @param value Ether value of Safe transaction.\n     * @param data Data payload of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     * @param module Module executing the transaction.\n     */\n    function checkModuleTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        address module\n    ) external view override returns (bytes32 moduleTxHash) {\n        require(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET, \"This call is restricted\");\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\n    }\n}\n"},"contracts/examples/guards/OnlyOwnersGuard.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n/* solhint-disable one-contract-per-file */\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"../../libraries/Enum.sol\";\nimport {BaseGuard} from \"../../base/GuardManager.sol\";\nimport {ISafe} from \"../../interfaces/ISafe.sol\";\n\n/**\n * @title OnlyOwnersGuard - Only allows owners to execute transactions.\n * @author Richard Meissner - @rmeissner\n */\ncontract OnlyOwnersGuard is BaseGuard {\n    constructor() {}\n\n    // solhint-disable-next-line payable-fallback\n    fallback() external {\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\n        // E.g. The expected check method might change and then the Safe would be locked.\n    }\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed.\n     * @dev Reverts if the transaction is not executed by an owner.\n     * @param msgSender Executor of the transaction.\n     */\n    function checkTransaction(\n        address,\n        uint256,\n        bytes memory,\n        Enum.Operation,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        // solhint-disable-next-line no-unused-vars\n        address payable,\n        bytes memory,\n        address msgSender\n    ) external view override {\n        require(ISafe(msg.sender).isOwner(msgSender), \"msg sender is not allowed to exec\");\n    }\n\n    function checkAfterExecution(bytes32, bool) external view override {}\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed via a module.\n     * @param to Destination address of Safe transaction.\n     * @param value Ether value of Safe transaction.\n     * @param data Data payload of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     * @param module Module executing the transaction.\n     */\n    function checkModuleTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        address module\n    ) external override returns (bytes32) {}\n}\n"},"contracts/examples/guards/ReentrancyTransactionGuard.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"../../libraries/Enum.sol\";\nimport {BaseGuard} from \"../../base/GuardManager.sol\";\n\n/**\n * @title ReentrancyTransactionGuard - Prevents reentrancy into the transaction execution function.\n * @author Richard Meissner - @rmeissner\n */\ncontract ReentrancyTransactionGuard is BaseGuard {\n    bytes32 internal constant GUARD_STORAGE_SLOT = keccak256(\"reentrancy_guard.guard.struct\");\n\n    struct GuardValue {\n        bool active;\n    }\n\n    // solhint-disable-next-line payable-fallback\n    fallback() external {\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\n        // E.g. The expected check method might change and then the Safe would be locked.\n    }\n\n    /**\n     * @notice Returns the guard value for the current context.\n     * @dev The guard value is stored in a slot that is unique to the contract instance and the function in which it is called.\n     * @return guard The guard value.\n     */\n    function getGuard() internal pure returns (GuardValue storage guard) {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            guard.slot := slot\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed.\n     * @dev Reverts if reentrancy is detected.\n     */\n    function checkTransaction(\n        address,\n        uint256,\n        bytes memory,\n        Enum.Operation,\n        uint256,\n        uint256,\n        uint256,\n        address,\n        // solhint-disable-next-line no-unused-vars\n        address payable,\n        bytes memory,\n        address\n    ) external override {\n        GuardValue storage guard = getGuard();\n        require(!guard.active, \"Reentrancy detected\");\n        guard.active = true;\n    }\n\n    /**\n     * @notice Called by the Safe contract after a transaction is executed.\n     * @dev Resets the guard value.\n     */\n    function checkAfterExecution(bytes32, bool) external override {\n        getGuard().active = false;\n    }\n\n    /**\n     * @notice Called by the Safe contract before a transaction is executed via a module.\n     * @param to Destination address of Safe transaction.\n     * @param value Ether value of Safe transaction.\n     * @param data Data payload of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     * @param module Account executing the transaction.\n     */\n    function checkModuleTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        address module\n    ) external override returns (bytes32 moduleTxHash) {\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\n\n        GuardValue storage guard = getGuard();\n        require(!guard.active, \"Reentrancy detected\");\n        guard.active = true;\n    }\n}\n"},"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport {SafeStorage} from \"../../libraries/SafeStorage.sol\";\n\n/**\n * @title Migration - Migrates a Safe contract from 1.3.0 to 1.2.0\n * @author Richard Meissner - @rmeissner\n */\ncontract Migration is SafeStorage {\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749;\n\n    address public immutable MIGRATION_SINGLETON;\n    address public immutable SAFE_120_SINGLETON;\n\n    constructor(address targetSingleton) {\n        // Singleton address cannot be zero address.\n        require(targetSingleton != address(0), \"Invalid singleton address provided\");\n        SAFE_120_SINGLETON = targetSingleton;\n        MIGRATION_SINGLETON = address(this);\n    }\n\n    event ChangedMasterCopy(address singleton);\n\n    /**\n     * @notice Migrates the Safe to the Singleton contract at `migrationSingleton`.\n     * @dev This can only be called via a delegatecall.\n     */\n    function migrate() public {\n        require(address(this) != MIGRATION_SINGLETON, \"Migration should only be called via delegatecall\");\n\n        singleton = SAFE_120_SINGLETON;\n        _deprecatedDomainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, this));\n        emit ChangedMasterCopy(singleton);\n    }\n}\n"},"contracts/external/SafeMath.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SafeMath\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\n */\nlibrary SafeMath {\n    /**\n     * @notice Multiplies two numbers, reverts on overflow.\n     * @param a First number\n     * @param b Second number\n     * @return Product of a and b\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     * @param a First number\n     * @param b Second number\n     * @return Difference of a and b\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @notice Adds two numbers, reverts on overflow.\n     * @param a First number\n     * @param b Second number\n     * @return Sum of a and b\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @notice Returns the largest of two numbers.\n     * @param a First number\n     * @param b Second number\n     * @return Largest of a and b\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n}\n"},"contracts/handler/CompatibilityFallbackHandler.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {TokenCallbackHandler} from \"./TokenCallbackHandler.sol\";\nimport {ISignatureValidator} from \"../interfaces/ISignatureValidator.sol\";\nimport {ISafe} from \"../interfaces/ISafe.sol\";\nimport {HandlerContext} from \"./HandlerContext.sol\";\n\n/**\n * @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe Smart Account contracts.\n * @author Richard Meissner - @rmeissner\n */\ncontract CompatibilityFallbackHandler is TokenCallbackHandler, ISignatureValidator, HandlerContext {\n    // keccak256(\"SafeMessage(bytes message)\");\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n    bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\"simulate(address,bytes)\"));\n\n    address internal constant SENTINEL_MODULES = address(0x1);\n\n    /**\n     * @dev Returns the hash of a message to be signed by owners.\n     * @param message Raw message bytes.\n     * @return Message hash.\n     */\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\n        return getMessageHashForSafe(ISafe(payable(msg.sender)), message);\n    }\n\n    /**\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\n     * @param safe Safe to which the message is targeted.\n     * @param message Message that should be encoded.\n     * @return Encoded message.\n     */\n    function encodeMessageDataForSafe(ISafe safe, bytes memory message) public view returns (bytes memory) {\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), safe.domainSeparator(), safeMessageHash);\n    }\n\n    /**\n     * @dev Returns hash of a message that can be signed by owners.\n     * @param safe Safe to which the message is targeted.\n     * @param message Message that should be hashed.\n     * @return Message hash.\n     */\n    function getMessageHashForSafe(ISafe safe, bytes memory message) public view returns (bytes32) {\n        return keccak256(encodeMessageDataForSafe(safe, message));\n    }\n\n    /**\n     * @notice Implementation of updated EIP-1271 signature validation method.\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\n     * @param _signature Signature byte array associated with _dataHash\n     * @return Updated EIP1271 magic value if signature is valid, otherwise 0x0\n     */\n    function isValidSignature(bytes32 _dataHash, bytes calldata _signature) public view override returns (bytes4) {\n        // Caller should be a Safe\n        ISafe safe = ISafe(payable(msg.sender));\n        bytes memory messageData = encodeMessageDataForSafe(safe, abi.encode(_dataHash));\n        bytes32 messageHash = keccak256(messageData);\n        if (_signature.length == 0) {\n            require(safe.signedMessages(messageHash) != 0, \"Hash not approved\");\n        } else {\n            safe.checkSignatures(messageHash, _signature);\n        }\n        return EIP1271_MAGIC_VALUE;\n    }\n\n    /**\n     * @dev Returns array of first 10 modules.\n     * @return Array of modules.\n     */\n    function getModules() external view returns (address[] memory) {\n        // Caller should be a Safe\n        ISafe safe = ISafe(payable(msg.sender));\n        (address[] memory array, ) = safe.getModulesPaginated(SENTINEL_MODULES, 10);\n        return array;\n    }\n\n    /**\n     * @dev Performs a delegatecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\n     * @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulate(address targetContract, bytes calldata calldataPayload) external returns (bytes memory response) {\n        /**\n         * Suppress compiler warnings about not using parameters, while allowing\n         * parameters to keep names for documentation purposes. This does not\n         * generate code.\n         */\n        targetContract;\n        calldataPayload;\n\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            /**\n             * Store `simulateAndRevert.selector`.\n             * String representation is used to force right padding\n             */\n            mstore(ptr, \"\\xb4\\xfa\\xba\\x09\")\n\n            /**\n             * Abuse the fact that both this and the internal methods have the\n             * same signature, and differ only in symbol name (and therefore,\n             * selector) and copy calldata directly. This saves us approximately\n             * 250 bytes of code and 300 gas at runtime over the\n             * `abi.encodeWithSelector` builtin.\n             */\n            calldatacopy(add(ptr, 0x04), 0x04, sub(calldatasize(), 0x04))\n\n            /**\n             * `pop` is required here by the compiler, as top level expressions\n             * can't have return values in inline assembly. `call` typically\n             * returns a 0 or 1 value indicated whether or not it reverted, but\n             * since we know it will always revert, we can safely ignore it.\n             */\n            pop(\n                call(\n                    gas(),\n                    // address() has been changed to caller() to use the implementation of the Safe\n                    caller(),\n                    0,\n                    ptr,\n                    calldatasize(),\n                    /**\n                     * The `simulateAndRevert` call always reverts, and\n                     * instead encodes whether or not it was successful in the return\n                     * data. The first 32-byte word of the return data contains the\n                     * `success` value, so write it to memory address 0x00 (which is\n                     * reserved Solidity scratch space and OK to use).\n                     */\n                    0x00,\n                    0x20\n                )\n            )\n\n            /**\n             * Allocate and copy the response bytes, making sure to increment\n             * the free memory pointer accordingly (in case this method is\n             * called as an internal function). The remaining `returndata[0x20:]`\n             * contains the ABI encoded response bytes, so we can just write it\n             * as is to memory.\n             */\n            let responseSize := sub(returndatasize(), 0x20)\n            response := mload(0x40)\n            mstore(0x40, add(response, responseSize))\n            returndatacopy(response, 0x20, responseSize)\n\n            if iszero(mload(0x00)) {\n                revert(add(response, 0x20), mload(response))\n            }\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n\n    /**\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\n     *      The function was moved to the fallback handler as a part of\n     *      1.5.0 contract upgrade. It used to be a part of the Safe core contract, but\n     *      was replaced by the same function that also accepts an executor address.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     * @param requiredSignatures Amount of required valid signatures.\n     */\n    function checkNSignatures(\n        bytes32 dataHash,\n        bytes memory /* IGNORED */,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) public view {\n        ISafe(payable(_manager())).checkNSignatures(_msgSender(), dataHash, signatures, requiredSignatures);\n    }\n}\n"},"contracts/handler/HandlerContext.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\n * @dev The fallback manager appends the following context to the calldata:\n *      1. Fallback manager caller address (non-padded)\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\n * @author Richard Meissner - @rmeissner\n */\nabstract contract HandlerContext {\n    /**\n     * @notice Allows fetching the original caller address.\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\n     *      check information against the calling manager.\n     * @return sender Original caller address.\n     */\n    function _msgSender() internal pure returns (address sender) {\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n\n    /**\n     * @notice Returns the FallbackManager address\n     * @return Fallback manager address\n     */\n    function _manager() internal view returns (address) {\n        return msg.sender;\n    }\n}\n"},"contracts/handler/TokenCallbackHandler.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {ERC1155TokenReceiver} from \"../interfaces/ERC1155TokenReceiver.sol\";\nimport {ERC721TokenReceiver} from \"../interfaces/ERC721TokenReceiver.sol\";\nimport {ERC777TokensRecipient} from \"../interfaces/ERC777TokensRecipient.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\n\n/**\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\n * @author Richard Meissner - @rmeissner\n */\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\n    /**\n     * @notice Handles ERC1155 Token callback.\n     * return Standardized onERC1155Received return value.\n     */\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\n        return 0xf23a6e61;\n    }\n\n    /**\n     * @notice Handles ERC1155 Token batch callback.\n     * return Standardized onERC1155BatchReceived return value.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xbc197c81;\n    }\n\n    /**\n     * @notice Handles ERC721 Token callback.\n     *  return Standardized onERC721Received return value.\n     */\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\n        return 0x150b7a02;\n    }\n\n    /**\n     * @notice Handles ERC777 Token callback.\n     * return nothing (not standardized)\n     */\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\n        // We implement this for completeness, doesn't really have any value\n    }\n\n    /**\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\n     * @param interfaceId Id of the interface.\n     * @return if the interface is supported.\n     */\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"contracts/interfaces/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface ERC1155TokenReceiver {\n    /**\n     * @notice Handle the receipt of a single ERC1155 token type.\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n     *      This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n     *      This function MUST revert if it rejects the transfer.\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\n     * @param _from      The address which previously owned the token.\n     * @param _id        The ID of the token being transferred.\n     * @param _value     The amount of tokens being transferred.\n     * @param _data      Additional data with no specified format.\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`.\n     */\n    function onERC1155Received(\n        address _operator,\n        address _from,\n        uint256 _id,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bytes4);\n\n    /**\n     * @notice Handle the receipt of multiple ERC1155 token types.\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n     *      This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n     *      This function MUST revert if it rejects the transfer(s).\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\n     * @param _from      The address which previously owned the token.\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\n     * @param _data      Additional data with no specified format.\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`.\n     */\n    function onERC1155BatchReceived(\n        address _operator,\n        address _from,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"},"contracts/interfaces/ERC721TokenReceiver.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface ERC721TokenReceiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     *  after a `transfer`. This function MAY throw to revert and reject the\n     *  transfer. Return of other than the magic value MUST result in the\n     *  transaction being reverted.\n     *  Note: the contract address is always the message sender.\n     * @param _operator The address which called `safeTransferFrom` function.\n     * @param _from The address which previously owned the token.\n     * @param _tokenId The NFT identifier which is being transferred.\n     * @param _data Additional data with no specified format.\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n     *  unless throwing\n     */\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\n}\n"},"contracts/interfaces/ERC777TokensRecipient.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title ERC777TokensRecipient\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\n */\ninterface ERC777TokensRecipient {\n    /**\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\n     * @param operator The address of the operator performing the transfer or minting operation.\n     * @param from The address of the sender.\n     * @param to The address of the recipient.\n     * @param amount The amount of tokens that were transferred or minted.\n     * @param data Additional data that was passed during the transfer or minting operation.\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n"},"contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\n     * See the corresponding EIP section\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/interfaces/IFallbackManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\n * @author @safe-global/safe-protocol\n */\ninterface IFallbackManager {\n    event ChangedFallbackHandler(address indexed handler);\n\n    /**\n     * @notice Set Fallback Handler to `handler` for the Safe.\n     * @dev Only fallback calls without value and with data will be forwarded.\n     *      This can only be done via a Safe transaction.\n     *      Cannot be set to the Safe itself.\n     * @param handler contract to handle fallback calls.\n     */\n    function setFallbackHandler(address handler) external;\n}\n"},"contracts/interfaces/IGuardManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n/* solhint-disable one-contract-per-file */\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\n * @author @safe-global/safe-protocol\n */\ninterface IGuardManager {\n    event ChangedGuard(address indexed guard);\n\n    /**\n     * @dev Set a guard that checks transactions before execution\n     *      This can only be done via a Safe transaction.\n     *      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\n     *        audit the guard code and design recovery mechanisms.\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\n     */\n    function setGuard(address guard) external;\n}\n"},"contracts/interfaces/IModuleManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport {Enum} from \"../libraries/Enum.sol\";\nimport {IGuardManager} from \"./IGuardManager.sol\";\n\n/**\n * @title IModuleManager - An interface of contract managing Safe modules\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\n           ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \n           so only trusted and audited modules should be added to a Safe. A malicious module can\n           completely takeover a Safe.\n * @author @safe-global/safe-protocol\n */\ninterface IModuleManager is IGuardManager {\n    event EnabledModule(address indexed module);\n    event DisabledModule(address indexed module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n\n    /**\n     * @notice Enables the module `module` for the Safe.\n     * @dev This can only be done via a Safe transaction.\n     * @param module Module to be whitelisted.\n     */\n    function enableModule(address module) external;\n\n    /**\n     * @notice Disables the module `module` for the Safe.\n     * @dev This can only be done via a Safe transaction.\n     * @param prevModule Previous module in the modules linked list.\n     * @param module Module to be removed.\n     */\n    function disableModule(address prevModule, address module) external;\n\n    /**\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return success Boolean flag indicating if the call succeeded.\n     */\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) external returns (bool success);\n\n    /**\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return success Boolean flag indicating if the call succeeded.\n     * @return returnData Data returned by the call.\n     */\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) external returns (bool success, bytes memory returnData);\n\n    /**\n     * @notice Returns if an module is enabled\n     * @return True if the module is enabled\n     */\n    function isModuleEnabled(address module) external view returns (bool);\n\n    /**\n     * @notice Returns an array of modules.\n     *         If all entries fit into a single page, the next pointer will be 0x1.\n     *         If another page is present, next will be the last element of the returned array.\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\n     * @return array Array of modules.\n     * @return next Start of the next page.\n     */\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\n}\n"},"contracts/interfaces/IOwnerManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\n * @author @safe-global/safe-protocol\n */\ninterface IOwnerManager {\n    event AddedOwner(address indexed owner);\n    event RemovedOwner(address indexed owner);\n    event ChangedThreshold(uint256 threshold);\n\n    /**\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param owner New owner address.\n     * @param _threshold New threshold.\n     */\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\n\n    /**\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\n     * @param owner Owner address to be removed.\n     * @param _threshold New threshold.\n     */\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\n\n    /**\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n     * @dev This can only be done via a Safe transaction.\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n     * @param oldOwner Owner address to be replaced.\n     * @param newOwner New owner address.\n     */\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\n\n    /**\n     * @notice Changes the threshold of the Safe to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param _threshold New threshold.\n     */\n    function changeThreshold(uint256 _threshold) external;\n\n    /**\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\n     * @return Threshold number.\n     */\n    function getThreshold() external view returns (uint256);\n\n    /**\n     * @notice Returns if `owner` is an owner of the Safe.\n     * @return Boolean if owner is an owner of the Safe.\n     */\n    function isOwner(address owner) external view returns (bool);\n\n    /**\n     * @notice Returns a list of Safe owners.\n     * @return Array of Safe owners.\n     */\n    function getOwners() external view returns (address[] memory);\n}\n"},"contracts/interfaces/ISafe.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"../libraries/Enum.sol\";\nimport {IModuleManager} from \"./IModuleManager.sol\";\nimport {IOwnerManager} from \"./IOwnerManager.sol\";\nimport {IFallbackManager} from \"./IFallbackManager.sol\";\n\n/**\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\n * @author @safe-global/safe-protocol\n */\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n    event SignMsg(bytes32 indexed msgHash);\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\n\n    /**\n     * @notice Sets an initial storage of the Safe contract.\n     * @dev This method can only be called once.\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\n     * @param _owners List of Safe owners.\n     * @param _threshold Number of required confirmations for a Safe transaction.\n     * @param to Contract address for optional delegate call.\n     * @param data Data payload for optional delegate call.\n     * @param fallbackHandler Handler for fallback calls to this contract\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\n     * @param payment Value that should be paid\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\n     */\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\n     * @dev The fees are always transferred, even if the user transaction fails.\n     *      This method doesn't perform any sanity check of the transaction, such as:\n     *      - if the contract at `to` address has code or not\n     *      - if the `gasToken` is a contract or not\n     *      It is the responsibility of the caller to perform such checks.\n     * @param to Destination address of Safe transaction.\n     * @param value Ether value of Safe transaction.\n     * @param data Data payload of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     * @param safeTxGas Gas that should be used for the Safe transaction.\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n     * @param gasPrice Gas price that should be used for the payment calculation.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     * @return success Boolean indicating transaction's success.\n     */\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n\n    /**\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     */\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\n\n    /**\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     * @dev This function makes it compatible with previous versions.\n     */\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\n\n    /**\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\n     * @param executor Address that executing the transaction.\n     *        ⚠️⚠️⚠️ Make sure that the executor address is a legitmate executor.\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. ⚠️⚠️⚠️\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     * @param requiredSignatures Amount of required valid signatures.\n     */\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\n\n    /**\n     * @notice Marks hash `hashToApprove` as approved.\n     * @dev This can be used with a pre-approved hash transaction signature.\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\n     */\n    function approveHash(bytes32 hashToApprove) external;\n\n    /**\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\n     * @return bytes32 The domain separator hash.\n     */\n    function domainSeparator() external view returns (bytes32);\n\n    /**\n     * @notice Returns transaction hash to be signed by owners.\n     * @param to Destination address.\n     * @param value Ether value.\n     * @param data Data payload.\n     * @param operation Operation type.\n     * @param safeTxGas Gas that should be used for the safe transaction.\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\n     * @param gasPrice Maximum gas price that should be used for this transaction.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n     * @param _nonce Transaction nonce.\n     * @return Transaction hash.\n     */\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes32);\n\n    /**\n     * External getter function for state variables.\n     */\n\n    /**\n     * @notice Returns the version of the Safe contract.\n     * @return Version string.\n     */\n    // solhint-disable-next-line\n    function VERSION() external view returns (string memory);\n\n    /**\n     * @notice Returns the nonce of the Safe contract.\n     * @return Nonce.\n     */\n    function nonce() external view returns (uint256);\n\n    /**\n     * @notice Returns a uint if the messageHash is signed by the owner.\n     * @param messageHash Hash of message that should be checked.\n     * @return Number denoting if an owner signed the hash.\n     */\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\n\n    /**\n     * @notice Returns a uint if the messageHash is approved by the owner.\n     * @param owner Owner address that should be checked.\n     * @param messageHash Hash of message that should be checked.\n     * @return Number denoting if an owner approved the hash.\n     */\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\n}\n"},"contracts/interfaces/ISignatureValidator.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n/* solhint-disable one-contract-per-file */\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n    /**\n     * @notice EIP1271 method to validate a signature.\n     * @param _hash Hash of the data signed on the behalf of address(this).\n     * @param _signature Signature byte array associated with _data.\n     *\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\n}\n"},"contracts/libraries/Enum.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\n * @author @safe-global/safe-protocol\n */\nlibrary Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n"},"contracts/libraries/ErrorMessage.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\n * @author Shebin John - @remedcu\n * @notice The aim is to save gas using assembly to revert with custom error message.\n */\nabstract contract ErrorMessage {\n    /**\n     * @notice Function which uses assembly to revert with the passed error message.\n     * @param error The error string to revert with.\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \"GSXXX\"\n     */\n    function revertWithError(bytes5 error) internal pure {\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \"Error(string)\"\n            mstore(add(ptr, 0x04), 0x20) // String offset\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\n            mstore(add(ptr, 0x44), error) // Revert reason\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n}\n"},"contracts/libraries/Safe130To141Migration.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n/* solhint-disable one-contract-per-file */\npragma solidity >=0.7.0 <0.9.0;\n\nimport {SafeStorage} from \"../libraries/SafeStorage.sol\";\nimport {ISafe} from \"../interfaces/ISafe.sol\";\n\n/**\n * @title Migration Contract for Safe Upgrade\n * @notice This contract facilitates the migration of a Safe contract from version 1.3.0 to 1.4.1.\n *         The older versions should use built-in upgrade methods.\n * @dev IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address\n *      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls\n *      if the address stored at the storage slot 0 is not a contract. The check is implemented in the `checkCurrentSingleton` function.\n */\ncontract Safe130To141Migration is SafeStorage {\n    // Address of Safe contract version 1.4.1 Singleton\n    address public constant SAFE_141_SINGLETON = address(0x41675C099F32341bf84BFc5382aF534df5C7461a);\n\n    // Address of Safe contract version 1.4.1 Singleton (L2)\n    address public constant SAFE_141_SINGLETON_L2 = address(0x29fcB43b46531BcA003ddC8FCB67FFE91900C762);\n\n    // Address of Safe contract version 1.4.1 Compatibility Fallback Handler\n    address public constant SAFE_141_FALLBACK_HANDLER = address(0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99);\n\n    /**\n     * @notice Constructor\n     * @dev Initializes the migrationSingleton with the contract's own address.\n     */\n    constructor() {\n        require(isContract(SAFE_141_SINGLETON), \"Safe 1.4.1 Singleton is not deployed\");\n        require(isContract(SAFE_141_SINGLETON_L2), \"Safe 1.4.1 Singleton (L2) is not deployed\");\n        require(isContract(SAFE_141_FALLBACK_HANDLER), \"Safe 1.4.1 Fallback Handler is not deployed\");\n    }\n\n    /**\n     * @dev Checks whether the current singleton address is a contract.\n     *      The canonical Safe proxy stores the singleton address at the storage slot 0.\n     *      This migration contract doesn't define it's own storage, so the fact that the storage slot 0 is defined\n     *      and is a contract ensures that the contract was called with a DELEGATECALL.\n     */\n    function checkCurrentSingleton() internal view {\n        require(isContract(singleton), \"Unsupported proxy contract\");\n    }\n\n    /// @dev Modifier that checks whether the current singleton address is a contract.\n    modifier validSingletonOnly() {\n        checkCurrentSingleton();\n        _;\n    }\n\n    /**\n     * @notice Event indicating a change of master copy address.\n     * @param singleton New master copy address\n     */\n    event ChangedMasterCopy(address singleton);\n\n    /**\n     * @notice Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON`\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     */\n    function migrate() public validSingletonOnly {\n        singleton = SAFE_141_SINGLETON;\n\n        emit ChangedMasterCopy(singleton);\n    }\n\n    /** @notice Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     */\n    function migrateWithFallbackHandler() public {\n        // The `migrate` function will take care of the delegatecall check\n        migrate();\n\n        ISafe(address(this)).setFallbackHandler(SAFE_141_FALLBACK_HANDLER);\n    }\n\n    /**\n     * @notice Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2`\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     */\n    function migrateL2() public validSingletonOnly {\n        singleton = SAFE_141_SINGLETON_L2;\n\n        emit ChangedMasterCopy(singleton);\n    }\n\n    /** @notice Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     */\n    function migrateL2WithFallbackHandler() public {\n        // The `migrateL2` function will take care of the delegatecall check\n        migrateL2();\n\n        ISafe(address(this)).setFallbackHandler(SAFE_141_FALLBACK_HANDLER);\n    }\n\n    /**\n     * @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\n     *\n     * @param account The Ethereum address to be checked.\n     *\n     * @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\n     *\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\n     * It may return incorrect results in some edge cases:\n     *\n     * - During the contract deployment process, including the constructor, this function may incorrectly identify the\n     *   contract's own address as an EOA, as the code is not yet deployed.\n     *\n     * - If a contract performs a self-destruct operation (using `selfdestruct`) after deployment, this function may\n     *   incorrectly identify the address as an EOA once the contract is destroyed, as its code will be removed.\n     *\n     * - When interacting with external contracts that use delegatecall or other mechanisms to execute code from\n     *   different contracts, this function may not accurately distinguish between a contract and an EOA, as it only\n     *   checks the code size at the specified address.\n     *\n     * - Contracts that are created using the CREATE2 opcode may not be accurately identified as contracts by this\n     *   function, especially if the code is not deployed until after the creation.\n     *\n     * Developers should use caution when relying on the results of this function for critical decision-making.\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        /* solhint-enable no-inline-assembly */\n\n        // If the code size is greater than 0, it is a contract; otherwise, it is an EOA.\n        return size > 0;\n    }\n}\n"},"contracts/libraries/Safe150Migration.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n/* solhint-disable one-contract-per-file */\npragma solidity >=0.7.0 <0.9.0;\n\nimport {SafeStorage} from \"../libraries/SafeStorage.sol\";\nimport {Guard} from \"../base/GuardManager.sol\";\nimport {ISafe} from \"../interfaces/ISafe.sol\";\n\n/**\n * @title Migration Contract for Safe Upgrade\n * @notice This contract facilitates the migration of a Safe contract from version 1.3.0/1.4.1 to 1.5.0.\n * @dev IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address\n *      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls\n *      if the address stored at the storage slot 0 is not a contract.\n */\ncontract Safe150Migration is SafeStorage {\n    // Address of Safe contract version 1.5.0 Singleton (L1)\n    // TODO: Update this address when the Safe 1.5.0 Singleton is deployed\n    address public constant SAFE_150_SINGLETON = address(0x88627c8904eCd9DF96A572Ef32A7ff13b199Ed8D);\n\n    // Address of Safe contract version 1.5.0 Singleton (L2)\n    // TODO: Update this address when the Safe 1.5.0 Singleton (L2) is deployed\n    address public constant SAFE_150_SINGLETON_L2 = address(0x0Ee37514644683f7EB9745a5726C722DeBa77e52);\n\n    // Address of Safe contract version 1.5.0 Compatibility Fallback Handler\n    // TODO: Update this address when the Safe 1.5.0 Compatibility Fallback Handler is deployed\n    address public constant SAFE_150_FALLBACK_HANDLER = address(0x8aa755cB169991fEDC3E306751dCb71964A041c7);\n\n    // the slot is defined as \"keccak256(\"guard_manager.guard.address\")\" in the GuardManager contract\n    // reference: https://github.com/safe-global/safe-smart-account/blob/8ffae95faa815acf86ec8b50021ebe9f96abde10/contracts/base/GuardManager.sol#L76-L77\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n    /**\n     * @notice Constructor\n     * @dev Initializes the migrationSingleton with the contract's own address.\n     */\n    constructor() {\n        require(isContract(SAFE_150_SINGLETON), \"Safe 1.4.1 Singleton is not deployed\");\n        require(isContract(SAFE_150_SINGLETON_L2), \"Safe 1.4.1 Singleton (L2) is not deployed\");\n        require(isContract(SAFE_150_FALLBACK_HANDLER), \"Safe 1.4.1 Fallback Handler is not deployed\");\n    }\n\n    /**\n     * @notice Event indicating a change of master copy address.\n     * @param singleton New master copy address\n     */\n    event ChangedMasterCopy(address singleton);\n\n    /**\n     * @dev Private function to check if a guard is supported.\n     */\n    function checkGuard() private view {\n        address guard = getGuard();\n\n        if (guard != address(0)) {\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \"GS300\");\n        }\n    }\n\n    function checkCurrentSingleton() internal view {\n        require(isContract(singleton), \"Trying to migrate an invalid Safe\");\n    }\n\n    modifier validSingletonOnly() {\n        checkCurrentSingleton();\n        _;\n    }\n\n    /**\n     * @notice Migrate to Safe 1.5.0 Singleton (L1) at `SAFE_150_SINGLETON`\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     */\n    function migrateSingleton() public validSingletonOnly {\n        checkGuard();\n\n        singleton = SAFE_150_SINGLETON;\n        emit ChangedMasterCopy(singleton);\n    }\n\n    /**\n     * @notice Migrate and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\n     */\n    function migrateWithFallbackHandler() public validSingletonOnly {\n        migrateSingleton();\n\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\n    }\n\n    /**\n     * @notice Migrate and set the guard to the specified address.\n     * @param guard The address of the new guard contract.\n     */\n    function migrateWithSetGuard(address guard) public validSingletonOnly {\n        singleton = SAFE_150_SINGLETON;\n        emit ChangedMasterCopy(singleton);\n\n        ISafe(address(this)).setGuard(guard);\n    }\n\n    /**\n     * @notice Migrate, set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\n     * @param guard The address of the new guard contract.\n     */\n    function migrateWithSetGuardAndFallbackHandler(address guard) public validSingletonOnly {\n        migrateWithSetGuard(guard);\n\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\n    }\n\n    /**\n     * @notice Migrate to Safe 1.5.0 Singleton (L2) at `SAFE_150_SINGLETON_L2`\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     */\n    function migrateL2Singleton() public validSingletonOnly {\n        checkGuard();\n\n        singleton = SAFE_150_SINGLETON_L2;\n        emit ChangedMasterCopy(singleton);\n    }\n\n    /**\n     * @notice Migrate to Safe 1.5.0 Singleton (L2) and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\n     */\n    function migrateL2WithFallbackHandler() public validSingletonOnly {\n        migrateL2Singleton();\n\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\n    }\n\n    /**\n     * @notice Migrate to Safe 1.5.0 Singleton (L2) and set the guard to the specified address.\n     * @param guard The address of the new guard contract.\n     */\n    function migrateL2WithSetGuard(address guard) public validSingletonOnly {\n        singleton = SAFE_150_SINGLETON_L2;\n        emit ChangedMasterCopy(singleton);\n\n        ISafe(address(this)).setGuard(guard);\n    }\n\n    /**\n     * @notice Migrate to Safe 1.5.0 Singleton (L2), set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\n     * @param guard The address of the new guard contract.\n     */\n    function migrateL2WithSetGuardAndFallbackHandler(address guard) public validSingletonOnly {\n        migrateL2WithSetGuard(guard);\n\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\n    }\n\n    /**\n     * @notice Get the address of the current guard.\n     * @return guard The address of the current guard contract.\n     */\n    function getGuard() internal view returns (address guard) {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            guard := sload(slot)\n        }\n        /* solhint-enable no-inline-assembly */\n    }\n\n    /**\n     * @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\n     * @param account The Ethereum address to be checked.\n     * @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\n     * It may return incorrect results in some edge cases (see documentation for details).\n     * Developers should use caution when relying on the results of this function for critical decision-making.\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        /* solhint-enable no-inline-assembly */\n\n        // If the code size is greater than 0, it is a contract; otherwise, it is an EOA.\n        return size > 0;\n    }\n}\n"},"contracts/libraries/SafeStorage.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\n * @dev Should be always the first base contract of a library that is used with a Safe.\n * @author Richard Meissner - @rmeissner\n */\ncontract SafeStorage {\n    // From /common/Singleton.sol\n    address internal singleton;\n    // From /common/ModuleManager.sol\n    mapping(address => address) internal modules;\n    // From /common/OwnerManager.sol\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    // From /Safe.sol\n    uint256 internal nonce;\n    bytes32 internal _deprecatedDomainSeparator;\n    mapping(bytes32 => uint256) internal signedMessages;\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\n}\n"},"contracts/libraries/SafeToL2Migration.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\n/* solhint-disable one-contract-per-file */\npragma solidity >=0.7.0 <0.9.0;\n\nimport {SafeStorage} from \"../libraries/SafeStorage.sol\";\nimport {Enum} from \"../libraries/Enum.sol\";\nimport {ISafe} from \"../interfaces/ISafe.sol\";\n\n/**\n * @title Migration Contract for updating a Safe from 1.1.1/1.3.0/1.4.1 versions to a L2 version. Useful when replaying a Safe from a non L2 network in a L2 network.\n * @notice This contract facilitates the migration of a Safe contract from version 1.1.1 to 1.3.0/1.4.1 L2, 1.3.0 to 1.3.0L2 or from 1.4.1 to 1.4.1L2\n *         Other versions are not supported\n * @dev IMPORTANT: The migration will only work with proxies that store the implementation address in the storage slot 0.\n */\ncontract SafeToL2Migration is SafeStorage {\n    // Address of this contract\n    address public immutable MIGRATION_SINGLETON;\n\n    /**\n     * @notice Constructor\n     * @dev Initializes the migrationSingleton with the contract's own address.\n     */\n    constructor() {\n        MIGRATION_SINGLETON = address(this);\n    }\n\n    /**\n     * @notice Event indicating a change of master copy address.\n     * @param singleton New master copy address\n     */\n    event ChangedMasterCopy(address singleton);\n\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n\n    event SafeMultiSigTransaction(\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes signatures,\n        // We combine nonce, sender and threshold into one to avoid stack too deep\n        // Dev note: additionalInfo should not contain `bytes`, as this complicates decoding\n        bytes additionalInfo\n    );\n\n    /**\n     * @notice Modifier to make a function callable via delegatecall only.\n     * If the function is called via a regular call, it will revert.\n     */\n    modifier onlyDelegateCall() {\n        require(address(this) != MIGRATION_SINGLETON, \"Migration should only be called via delegatecall\");\n        _;\n    }\n\n    /**\n     * @notice Modifier to prevent using initialized Safes.\n     * If Safe has a nonce higher than 0, it will revert\n     */\n    modifier onlyNonceZero() {\n        // Nonce is increased before executing a tx, so first executed tx will have nonce=1\n        require(nonce == 1, \"Safe must have not executed any tx\");\n        _;\n    }\n\n    /**\n     * @dev Internal function with common migration steps, changes the singleton and emits SafeMultiSigTransaction event\n     */\n    function migrate(address l2Singleton, bytes memory functionData) private {\n        singleton = l2Singleton;\n\n        // Encode nonce, sender, threshold\n        bytes memory additionalInfo = abi.encode(0, msg.sender, threshold);\n\n        // Simulate a L2 transaction so Safe Tx Service indexer picks up the Safe\n        emit SafeMultiSigTransaction(\n            MIGRATION_SINGLETON,\n            0,\n            functionData,\n            Enum.Operation.DelegateCall,\n            0,\n            0,\n            0,\n            address(0),\n            payable(address(0)),\n            \"\", // We cannot detect signatures\n            additionalInfo\n        );\n        emit ChangedMasterCopy(singleton);\n    }\n\n    /**\n     * @notice Migrate from Safe 1.3.0/1.4.1 Singleton (L1) to the same version provided L2 singleton\n     * Safe is required to have nonce 0 so backend can support it after the migration\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     * Singletons versions will be compared, so it implies that contracts exist\n     */\n    function migrateToL2(address l2Singleton) public onlyDelegateCall onlyNonceZero {\n        require(address(singleton) != l2Singleton, \"Safe is already using the singleton\");\n        bytes32 oldSingletonVersion = keccak256(abi.encodePacked(ISafe(singleton).VERSION()));\n        bytes32 newSingletonVersion = keccak256(abi.encodePacked(ISafe(l2Singleton).VERSION()));\n\n        require(oldSingletonVersion == newSingletonVersion, \"L2 singleton must match current version singleton\");\n        // There's no way to make sure if address is a valid singleton, unless we configure the contract for every chain\n        require(\n            newSingletonVersion == keccak256(abi.encodePacked(\"1.3.0\")) || newSingletonVersion == keccak256(abi.encodePacked(\"1.4.1\")),\n            \"Provided singleton version is not supported\"\n        );\n\n        // 0xef2624ae - keccak(\"migrateToL2(address)\")\n        bytes memory functionData = abi.encodeWithSelector(0xef2624ae, l2Singleton);\n        migrate(l2Singleton, functionData);\n    }\n\n    /**\n     * @notice Migrate from Safe 1.1.1 Singleton to 1.3.0 or 1.4.1 L2\n     * Safe is required to have nonce 0 so backend can support it after the migration\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\n     * Singletons version will be checked, so it implies that contracts exist.\n     * A valid and compatible fallbackHandler needs to be provided, only existance will be checked.\n     */\n    function migrateFromV111(address l2Singleton, address fallbackHandler) public onlyDelegateCall onlyNonceZero {\n        require(isContract(fallbackHandler), \"fallbackHandler is not a contract\");\n\n        bytes32 oldSingletonVersion = keccak256(abi.encodePacked(ISafe(singleton).VERSION()));\n        require(oldSingletonVersion == keccak256(abi.encodePacked(\"1.1.1\")), \"Provided singleton version is not supported\");\n\n        bytes32 newSingletonVersion = keccak256(abi.encodePacked(ISafe(l2Singleton).VERSION()));\n        require(\n            newSingletonVersion == keccak256(abi.encodePacked(\"1.3.0\")) || newSingletonVersion == keccak256(abi.encodePacked(\"1.4.1\")),\n            \"Provided singleton version is not supported\"\n        );\n\n        ISafe safe = ISafe(address(this));\n        safe.setFallbackHandler(fallbackHandler);\n\n        // Safes < 1.3.0 did not emit SafeSetup, so Safe Tx Service backend needs the event to index the Safe\n        emit SafeSetup(MIGRATION_SINGLETON, safe.getOwners(), safe.getThreshold(), address(0), fallbackHandler);\n\n        // 0xd9a20812 - keccak(\"migrateFromV111(address,address)\")\n        bytes memory functionData = abi.encodeWithSelector(0xd9a20812, l2Singleton, fallbackHandler);\n        migrate(l2Singleton, functionData);\n    }\n\n    /**\n     * @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\n     * @param account The Ethereum address to be checked.\n     * @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\n     * It may return incorrect results in some edge cases (see documentation for details).\n     * Developers should use caution when relying on the results of this function for critical decision-making.\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        /* solhint-enable no-inline-assembly */\n\n        // If the code size is greater than 0, it is a contract; otherwise, it is an EOA.\n        return size > 0;\n    }\n}\n"},"contracts/libraries/SignMessageLib.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {SafeStorage} from \"./SafeStorage.sol\";\nimport {ISafe} from \"../interfaces/ISafe.sol\";\n\n/**\n * @title SignMessageLib - Allows to sign messages on-chain by writing the signed message hashes on-chain.\n * @author Richard Meissner - @rmeissner\n */\ncontract SignMessageLib is SafeStorage {\n    // keccak256(\"SafeMessage(bytes message)\");\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n    event SignMsg(bytes32 indexed msgHash);\n\n    /**\n     * @notice Marks a message (`_data`) as signed.\n     * @dev Can be verified using EIP-1271 validation method by passing the pre-image of the message hash and empty bytes as the signature.\n     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this).\n     */\n    function signMessage(bytes calldata _data) external {\n        bytes32 msgHash = getMessageHash(_data);\n        signedMessages[msgHash] = 1;\n        emit SignMsg(msgHash);\n    }\n\n    /**\n     * @dev Returns hash of a message that can be signed by owners.\n     * @param message Message that should be hashed.\n     * @return Message hash.\n     */\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\n        return keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), ISafe(payable(address(this))).domainSeparator(), safeMessageHash));\n    }\n}\n"},"contracts/Safe.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Guard} from \"./base/GuardManager.sol\";\nimport {ModuleManager} from \"./base/ModuleManager.sol\";\nimport {OwnerManager} from \"./base/OwnerManager.sol\";\nimport {FallbackManager} from \"./base/FallbackManager.sol\";\nimport {NativeCurrencyPaymentFallback} from \"./common/NativeCurrencyPaymentFallback.sol\";\nimport {Singleton} from \"./common/Singleton.sol\";\nimport {SignatureDecoder} from \"./common/SignatureDecoder.sol\";\nimport {SecuredTokenTransfer} from \"./common/SecuredTokenTransfer.sol\";\nimport {StorageAccessible} from \"./common/StorageAccessible.sol\";\nimport {Enum} from \"./libraries/Enum.sol\";\nimport {ISignatureValidator, ISignatureValidatorConstants} from \"./interfaces/ISignatureValidator.sol\";\nimport {SafeMath} from \"./external/SafeMath.sol\";\nimport {ISafe} from \"./interfaces/ISafe.sol\";\n\n/**\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\n * @dev Most important concepts:\n *      - Threshold: Number of required confirmations for a Safe transaction.\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\n *        approve transactions. Managed in `OwnerManager`.\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\n *      For the events-based implementation see `SafeL2.sol`.\n * @author Stefan George - @Georgi87\n * @author Richard Meissner - @rmeissner\n */\ncontract Safe is\n    Singleton,\n    NativeCurrencyPaymentFallback,\n    ModuleManager,\n    OwnerManager,\n    SignatureDecoder,\n    SecuredTokenTransfer,\n    ISignatureValidatorConstants,\n    FallbackManager,\n    StorageAccessible,\n    ISafe\n{\n    using SafeMath for uint256;\n\n    string public constant override VERSION = \"1.4.1\";\n\n    // keccak256(\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n    // );\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n    // keccak256(\n    //     \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n    // );\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\n\n    uint256 public override nonce;\n    bytes32 private _deprecatedDomainSeparator;\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\n    mapping(bytes32 => uint256) public override signedMessages;\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\n    mapping(address => mapping(bytes32 => uint256)) public override approvedHashes;\n\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\n    constructor() {\n        /**\n         * By setting the threshold it is not possible to call setup anymore,\n         * so we create a Safe with 0 owners and threshold 1.\n         * This is an unusable Safe, perfect for the singleton\n         */\n        threshold = 1;\n    }\n\n    // @inheritdoc ISafe\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external override {\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\n        setupOwners(_owners, _threshold);\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\n        setupModules(to, data);\n\n        if (payment > 0) {\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n        }\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\n    }\n\n    // @inheritdoc ISafe\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) public payable virtual override returns (bool success) {\n        bytes32 txHash;\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            txHash = getTransactionHash( // Transaction info\n                to,\n                value,\n                data,\n                operation,\n                safeTxGas,\n                // Payment info\n                baseGas,\n                gasPrice,\n                gasToken,\n                refundReceiver,\n                // Signature info\n                // We use the post-increment here, so the current nonce value is used and incremented afterwards.\n                nonce++\n            );\n            checkSignatures(txHash, signatures);\n        }\n        address guard = getGuard();\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkTransaction(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    signatures,\n                    msg.sender\n                );\n            }\n        }\n\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\n        if (gasleft() < ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500) revertWithError(\"GS010\");\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            uint256 gasUsed = gasleft();\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\n            gasUsed = gasUsed.sub(gasleft());\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\n            if (!success && safeTxGas == 0 && gasPrice == 0) revertWithError(\"GS013\");\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\n            uint256 payment = 0;\n            if (gasPrice > 0) {\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n            }\n            if (success) emit ExecutionSuccess(txHash, payment);\n            else emit ExecutionFailure(txHash, payment);\n        }\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkAfterExecution(txHash, success);\n            }\n        }\n    }\n\n    /**\n     * @notice Handles the payment for a Safe transaction.\n     * @param gasUsed Gas used by the Safe transaction.\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\n     * @param gasPrice Gas price that should be used for the payment calculation.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @return payment The amount of payment made in the specified token.\n     */\n    function handlePayment(\n        uint256 gasUsed,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver\n    ) private returns (uint256 payment) {\n        // solhint-disable-next-line avoid-tx-origin\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n        if (gasToken == address(0)) {\n            // For native tokens, we will only adjust the gas price to not be higher than the actually used gas price\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\n            (bool refundSuccess, ) = receiver.call{value: payment}(\"\");\n            if (!refundSuccess) revertWithError(\"GS011\");\n        } else {\n            payment = gasUsed.add(baseGas).mul(gasPrice);\n            if (!transferToken(gasToken, receiver, payment)) revertWithError(\"GS012\");\n        }\n    }\n\n    /**\n     * @notice Checks whether the contract signature is valid. Reverts otherwise.\n     * @dev This is extracted to a separate function for better compatibility with Certora's prover.\n     *      More info here: https://github.com/safe-global/safe-smart-account/pull/661\n     * @param owner Address of the owner used to sign the message\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param signatures Signature data that should be verified.\n     * @param offset Offset to the start of the contract signature in the signatures byte array\n     */\n    function checkContractSignature(address owner, bytes32 dataHash, bytes memory signatures, uint256 offset) internal view {\n        // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\n        if (offset.add(32) > signatures.length) revertWithError(\"GS022\");\n\n        // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\n        uint256 contractSignatureLen;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            contractSignatureLen := mload(add(add(signatures, offset), 0x20))\n        }\n        /* solhint-enable no-inline-assembly */\n        if (offset.add(32).add(contractSignatureLen) > signatures.length) revertWithError(\"GS023\");\n\n        // Check signature\n        bytes memory contractSignature;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n            contractSignature := add(add(signatures, offset), 0x20)\n        }\n        /* solhint-enable no-inline-assembly */\n\n        if (ISignatureValidator(owner).isValidSignature(dataHash, contractSignature) != EIP1271_MAGIC_VALUE) revertWithError(\"GS024\");\n    }\n\n    // @inheritdoc ISafe\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) public view override {\n        checkSignatures(dataHash, \"\", signatures);\n    }\n\n    // @inheritdoc ISafe\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) public view override {\n        // Load threshold to avoid multiple storage loads\n        uint256 _threshold = threshold;\n        // Check that a threshold is set\n        if (_threshold == 0) revertWithError(\"GS001\");\n        checkNSignatures(msg.sender, dataHash, signatures, _threshold);\n    }\n\n    // @inheritdoc ISafe\n    function checkNSignatures(\n        address executor,\n        bytes32 dataHash,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) public view override {\n        // Check that the provided signature data is not too short\n        if (signatures.length < requiredSignatures.mul(65)) revertWithError(\"GS020\");\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint256 v; // Implicit conversion from uint8 to uint256 will be done for v received from signatureSplit(...).\n        bytes32 r;\n        bytes32 s;\n        uint256 i;\n        for (i = 0; i < requiredSignatures; i++) {\n            (v, r, s) = signatureSplit(signatures, i);\n            if (v == 0) {\n                // If v is 0 then it is a contract signature\n                // When handling contract signatures the address of the contract is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\n                // Here we only check that the pointer is not pointing inside the part that is being processed\n                if (uint256(s) < requiredSignatures.mul(65)) revertWithError(\"GS021\");\n\n                // The contract signature check is extracted to a separate function for better compatibility with formal verification\n                // A quote from the Certora team:\n                // \"The assembly code broke the pointer analysis, which switched the prover in failsafe mode, where it is (a) much slower and (b) computes different hashes than in the normal mode.\"\n                // More info here: https://github.com/safe-global/safe-smart-account/pull/661\n                checkContractSignature(currentOwner, dataHash, signatures, uint256(s));\n            } else if (v == 1) {\n                // If v is 1 then it is an approved hash\n                // When handling approved hashes the address of the approver is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\n                if (executor != currentOwner && approvedHashes[currentOwner][dataHash] == 0) revertWithError(\"GS025\");\n            } else if (v > 30) {\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), uint8(v - 4), r, s);\n            } else {\n                // Default is the ecrecover flow with the provided data hash\n                // Use ecrecover with the messageHash for EOA signatures\n                currentOwner = ecrecover(dataHash, uint8(v), r, s);\n            }\n            if (currentOwner <= lastOwner || owners[currentOwner] == address(0) || currentOwner == SENTINEL_OWNERS)\n                revertWithError(\"GS026\");\n            lastOwner = currentOwner;\n        }\n    }\n\n    // @inheritdoc ISafe\n    function approveHash(bytes32 hashToApprove) external override {\n        if (owners[msg.sender] == address(0)) revertWithError(\"GS030\");\n        approvedHashes[msg.sender][hashToApprove] = 1;\n        emit ApproveHash(hashToApprove, msg.sender);\n    }\n\n    // @inheritdoc ISafe\n    function domainSeparator() public view override returns (bytes32) {\n        uint256 chainId;\n        /* solhint-disable no-inline-assembly */\n        /// @solidity memory-safe-assembly\n        assembly {\n            chainId := chainid()\n        }\n        /* solhint-enable no-inline-assembly */\n\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, this));\n    }\n\n    /**\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\n     * @param to Destination address.\n     * @param value Ether value.\n     * @param data Data payload.\n     * @param operation Operation type.\n     * @param safeTxGas Gas that should be used for the safe transaction.\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n     * @param gasPrice Maximum gas price that should be used for this transaction.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n     * @param _nonce Transaction nonce.\n     * @return Transaction hash bytes.\n     */\n    function encodeTransactionData(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) private view returns (bytes memory) {\n        bytes32 safeTxHash = keccak256(\n            abi.encode(\n                SAFE_TX_TYPEHASH,\n                to,\n                value,\n                keccak256(data),\n                operation,\n                safeTxGas,\n                baseGas,\n                gasPrice,\n                gasToken,\n                refundReceiver,\n                _nonce\n            )\n        );\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\n    }\n\n    // @inheritdoc ISafe\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view override returns (bytes32) {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }\n}\n"},"contracts/SafeL2.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Safe, Enum} from \"./Safe.sol\";\n\n/**\n * @title SafeL2 - An implementation of the Safe contract that emits additional events on transaction executions.\n * @notice For a more complete description of the Safe contract, please refer to the main Safe contract `Safe.sol`.\n * @author Stefan George - @Georgi87\n * @author Richard Meissner - @rmeissner\n */\ncontract SafeL2 is Safe {\n    event SafeMultiSigTransaction(\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes signatures,\n        // We combine nonce, sender and threshold into one to avoid stack too deep\n        // Dev note: additionalInfo should not contain `bytes`, as this complicates decoding\n        bytes additionalInfo\n    );\n\n    event SafeModuleTransaction(address module, address to, uint256 value, bytes data, Enum.Operation operation);\n\n    // @inheritdoc Safe\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) public payable override returns (bool) {\n        bytes memory additionalInfo;\n        {\n            additionalInfo = abi.encode(nonce, msg.sender, threshold);\n        }\n        emit SafeMultiSigTransaction(\n            to,\n            value,\n            data,\n            operation,\n            safeTxGas,\n            baseGas,\n            gasPrice,\n            gasToken,\n            refundReceiver,\n            signatures,\n            additionalInfo\n        );\n        return super.execTransaction(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures);\n    }\n\n    // @inheritdoc Safe\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public override returns (bool success) {\n        emit SafeModuleTransaction(msg.sender, to, value, data, operation);\n        success = super.execTransactionFromModule(to, value, data, operation);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/Safe.sol":{"ast":{"absolutePath":"contracts/Safe.sol","exportedSymbols":{"Enum":[4287],"FallbackManager":[1247],"Guard":[1311],"ISafe":[4261],"ISignatureValidator":[4280],"ISignatureValidatorConstants":[4267],"ModuleManager":[1932],"NativeCurrencyPaymentFallback":[2478],"OwnerManager":[2456],"Safe":[928],"SafeMath":[3384],"SecuredTokenTransfer":[2505],"SignatureDecoder":[2556],"Singleton":[2562],"StorageAccessible":[2611]},"id":929,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:0"},{"absolutePath":"contracts/base/GuardManager.sol","file":"./base/GuardManager.sol","id":3,"nodeType":"ImportDirective","scope":929,"sourceUnit":1391,"src":"75:46:0","symbolAliases":[{"foreign":{"id":2,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:5:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/ModuleManager.sol","file":"./base/ModuleManager.sol","id":5,"nodeType":"ImportDirective","scope":929,"sourceUnit":1933,"src":"122:55:0","symbolAliases":[{"foreign":{"id":4,"name":"ModuleManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"130:13:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/OwnerManager.sol","file":"./base/OwnerManager.sol","id":7,"nodeType":"ImportDirective","scope":929,"sourceUnit":2457,"src":"178:53:0","symbolAliases":[{"foreign":{"id":6,"name":"OwnerManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"186:12:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/FallbackManager.sol","file":"./base/FallbackManager.sol","id":9,"nodeType":"ImportDirective","scope":929,"sourceUnit":1248,"src":"232:59:0","symbolAliases":[{"foreign":{"id":8,"name":"FallbackManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"240:15:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/common/NativeCurrencyPaymentFallback.sol","file":"./common/NativeCurrencyPaymentFallback.sol","id":11,"nodeType":"ImportDirective","scope":929,"sourceUnit":2479,"src":"292:89:0","symbolAliases":[{"foreign":{"id":10,"name":"NativeCurrencyPaymentFallback","nodeType":"Identifier","overloadedDeclarations":[],"src":"300:29:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/common/Singleton.sol","file":"./common/Singleton.sol","id":13,"nodeType":"ImportDirective","scope":929,"sourceUnit":2563,"src":"382:49:0","symbolAliases":[{"foreign":{"id":12,"name":"Singleton","nodeType":"Identifier","overloadedDeclarations":[],"src":"390:9:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/common/SignatureDecoder.sol","file":"./common/SignatureDecoder.sol","id":15,"nodeType":"ImportDirective","scope":929,"sourceUnit":2557,"src":"432:63:0","symbolAliases":[{"foreign":{"id":14,"name":"SignatureDecoder","nodeType":"Identifier","overloadedDeclarations":[],"src":"440:16:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/common/SecuredTokenTransfer.sol","file":"./common/SecuredTokenTransfer.sol","id":17,"nodeType":"ImportDirective","scope":929,"sourceUnit":2506,"src":"496:71:0","symbolAliases":[{"foreign":{"id":16,"name":"SecuredTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"src":"504:20:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/common/StorageAccessible.sol","file":"./common/StorageAccessible.sol","id":19,"nodeType":"ImportDirective","scope":929,"sourceUnit":2612,"src":"568:65:0","symbolAliases":[{"foreign":{"id":18,"name":"StorageAccessible","nodeType":"Identifier","overloadedDeclarations":[],"src":"576:17:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/libraries/Enum.sol","file":"./libraries/Enum.sol","id":21,"nodeType":"ImportDirective","scope":929,"sourceUnit":4288,"src":"634:42:0","symbolAliases":[{"foreign":{"id":20,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"642:4:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISignatureValidator.sol","file":"./interfaces/ISignatureValidator.sol","id":24,"nodeType":"ImportDirective","scope":929,"sourceUnit":4281,"src":"677:103:0","symbolAliases":[{"foreign":{"id":22,"name":"ISignatureValidator","nodeType":"Identifier","overloadedDeclarations":[],"src":"685:19:0","typeDescriptions":{}}},{"foreign":{"id":23,"name":"ISignatureValidatorConstants","nodeType":"Identifier","overloadedDeclarations":[],"src":"706:28:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/external/SafeMath.sol","file":"./external/SafeMath.sol","id":26,"nodeType":"ImportDirective","scope":929,"sourceUnit":3385,"src":"781:49:0","symbolAliases":[{"foreign":{"id":25,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"src":"789:8:0","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"./interfaces/ISafe.sol","id":28,"nodeType":"ImportDirective","scope":929,"sourceUnit":4262,"src":"831:45:0","symbolAliases":[{"foreign":{"id":27,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"839:5:0","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":30,"name":"Singleton","nodeType":"UserDefinedTypeName","referencedDeclaration":2562,"src":"2310:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_Singleton_$2562","typeString":"contract Singleton"}},"id":31,"nodeType":"InheritanceSpecifier","src":"2310:9:0"},{"baseName":{"id":32,"name":"NativeCurrencyPaymentFallback","nodeType":"UserDefinedTypeName","referencedDeclaration":2478,"src":"2325:29:0","typeDescriptions":{"typeIdentifier":"t_contract$_NativeCurrencyPaymentFallback_$2478","typeString":"contract NativeCurrencyPaymentFallback"}},"id":33,"nodeType":"InheritanceSpecifier","src":"2325:29:0"},{"baseName":{"id":34,"name":"ModuleManager","nodeType":"UserDefinedTypeName","referencedDeclaration":1932,"src":"2360:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_ModuleManager_$1932","typeString":"contract ModuleManager"}},"id":35,"nodeType":"InheritanceSpecifier","src":"2360:13:0"},{"baseName":{"id":36,"name":"OwnerManager","nodeType":"UserDefinedTypeName","referencedDeclaration":2456,"src":"2379:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_OwnerManager_$2456","typeString":"contract OwnerManager"}},"id":37,"nodeType":"InheritanceSpecifier","src":"2379:12:0"},{"baseName":{"id":38,"name":"SignatureDecoder","nodeType":"UserDefinedTypeName","referencedDeclaration":2556,"src":"2397:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_SignatureDecoder_$2556","typeString":"contract SignatureDecoder"}},"id":39,"nodeType":"InheritanceSpecifier","src":"2397:16:0"},{"baseName":{"id":40,"name":"SecuredTokenTransfer","nodeType":"UserDefinedTypeName","referencedDeclaration":2505,"src":"2419:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_SecuredTokenTransfer_$2505","typeString":"contract SecuredTokenTransfer"}},"id":41,"nodeType":"InheritanceSpecifier","src":"2419:20:0"},{"baseName":{"id":42,"name":"ISignatureValidatorConstants","nodeType":"UserDefinedTypeName","referencedDeclaration":4267,"src":"2445:28:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidatorConstants_$4267","typeString":"contract ISignatureValidatorConstants"}},"id":43,"nodeType":"InheritanceSpecifier","src":"2445:28:0"},{"baseName":{"id":44,"name":"FallbackManager","nodeType":"UserDefinedTypeName","referencedDeclaration":1247,"src":"2479:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_FallbackManager_$1247","typeString":"contract FallbackManager"}},"id":45,"nodeType":"InheritanceSpecifier","src":"2479:15:0"},{"baseName":{"id":46,"name":"StorageAccessible","nodeType":"UserDefinedTypeName","referencedDeclaration":2611,"src":"2500:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_StorageAccessible_$2611","typeString":"contract StorageAccessible"}},"id":47,"nodeType":"InheritanceSpecifier","src":"2500:17:0"},{"baseName":{"id":48,"name":"ISafe","nodeType":"UserDefinedTypeName","referencedDeclaration":4261,"src":"2523:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":49,"nodeType":"InheritanceSpecifier","src":"2523:5:0"}],"contractDependencies":[1191,1247,1390,1932,2456,2478,2505,2536,2556,2562,2611,3887,3901,3992,4063,4261,4267,4299],"contractKind":"contract","documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"878:1410:0","text":" @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\n @dev Most important concepts:\n      - Threshold: Number of required confirmations for a Safe transaction.\n      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\n        approve transactions. Managed in `OwnerManager`.\n      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\n      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\n      - Signature: A valid signature of an owner of the Safe for a transaction hash.\n      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\n      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\n      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\n      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\n      For the events-based implementation see `SafeL2.sol`.\n @author Stefan George - @Georgi87\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":928,"linearizedBaseContracts":[928,4261,2611,1247,3887,4267,2505,2556,2456,4063,1932,3992,1390,3901,1191,2536,4299,2478,2562],"name":"Safe","nodeType":"ContractDefinition","nodes":[{"id":52,"libraryName":{"id":50,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":3384,"src":"2541:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$3384","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"2535:27:0","typeName":{"id":51,"name":"uint256","nodeType":"ElementaryTypeName","src":"2554:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"baseFunctions":[4236],"constant":true,"functionSelector":"ffa1ad74","id":56,"mutability":"constant","name":"VERSION","nodeType":"VariableDeclaration","overrides":{"id":54,"nodeType":"OverrideSpecifier","overrides":[],"src":"2591:8:0"},"scope":928,"src":"2568:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":53,"name":"string","nodeType":"ElementaryTypeName","src":"2568:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"312e342e31","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2610:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_7015c1a48403d132ad83884b326109f1b309c42f752b2abd1db79522ee074673","typeString":"literal_string \"1.4.1\""},"value":"1.4.1"},"visibility":"public"},{"constant":true,"id":59,"mutability":"constant","name":"DOMAIN_SEPARATOR_TYPEHASH","nodeType":"VariableDeclaration","scope":928,"src":"2721:119:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2721:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834376537393533346132343539353265386231363839336133333662383561336439656139666138633537336633643830336166623932613739343639323138","id":58,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2774:66:0","typeDescriptions":{"typeIdentifier":"t_rational_32523383700587834770323112271211932718128200013265661849047136999858837557784_by_1","typeString":"int_const 3252...(69 digits omitted)...7784"},"value":"0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218"},"visibility":"private"},{"constant":true,"id":62,"mutability":"constant","name":"SAFE_TX_TYPEHASH","nodeType":"VariableDeclaration","scope":928,"src":"3053:110:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":60,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3053:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862623833313064343836333638646236626436663834393430326664643733616435336433313662356134623236343461643665666530663934313238366438","id":61,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3097:66:0","typeDescriptions":{"typeIdentifier":"t_rational_84814075808141314178395468817534025465894426928601295766380145544921651250904_by_1","typeString":"int_const 8481...(69 digits omitted)...0904"},"value":"0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8"},"visibility":"private"},{"baseFunctions":[4242],"constant":false,"functionSelector":"affed0e0","id":65,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","overrides":{"id":64,"nodeType":"OverrideSpecifier","overrides":[],"src":"3185:8:0"},"scope":928,"src":"3170:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint256","nodeType":"ElementaryTypeName","src":"3170:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":67,"mutability":"mutable","name":"_deprecatedDomainSeparator","nodeType":"VariableDeclaration","scope":928,"src":"3205:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":66,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"baseFunctions":[4250],"constant":false,"functionSelector":"5ae6bd37","id":72,"mutability":"mutable","name":"signedMessages","nodeType":"VariableDeclaration","overrides":{"id":71,"nodeType":"OverrideSpecifier","overrides":[],"src":"3386:8:0"},"scope":928,"src":"3351:58:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":70,"keyType":{"id":68,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3359:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3351:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":69,"name":"uint256","nodeType":"ElementaryTypeName","src":"3370:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"baseFunctions":[4260],"constant":false,"functionSelector":"7d832974","id":79,"mutability":"mutable","name":"approvedHashes","nodeType":"VariableDeclaration","overrides":{"id":78,"nodeType":"OverrideSpecifier","overrides":[],"src":"3576:8:0"},"scope":928,"src":"3521:78:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"},"typeName":{"id":77,"keyType":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"3529:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3521:47:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"},"valueType":{"id":76,"keyType":{"id":74,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3548:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3540:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":75,"name":"uint256","nodeType":"ElementaryTypeName","src":"3559:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"body":{"id":86,"nodeType":"Block","src":"3723:257:0","statements":[{"expression":{"id":84,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":82,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3960:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3972:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3960:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":85,"nodeType":"ExpressionStatement","src":"3960:13:0"}]},"id":87,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"3720:2:0"},"returnParameters":{"id":81,"nodeType":"ParameterList","parameters":[],"src":"3723:0:0"},"scope":928,"src":"3709:271:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4136],"body":{"id":151,"nodeType":"Block","src":"4292:879:0","statements":[{"expression":{"arguments":[{"id":109,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"4431:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":110,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"4440:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":108,"name":"setupOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"4419:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address[] memory,uint256)"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4419:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112,"nodeType":"ExpressionStatement","src":"4419:32:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":113,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"4465:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4492:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4484:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"4484:7:0","typeDescriptions":{}}},"id":117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4484:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4465:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":123,"nodeType":"IfStatement","src":"4461:78:0","trueBody":{"expression":{"arguments":[{"id":120,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"4523:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"internalSetFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"4496:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4496:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":122,"nodeType":"ExpressionStatement","src":"4496:43:0"}},{"expression":{"arguments":[{"id":125,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4687:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":126,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"4691:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":124,"name":"setupModules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4674:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4674:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":128,"nodeType":"ExpressionStatement","src":"4674:22:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":129,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"4711:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4721:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4711:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":141,"nodeType":"IfStatement","src":"4707:380:0","trueBody":{"id":140,"nodeType":"Block","src":"4724:363:0","statements":[{"expression":{"arguments":[{"id":133,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"5031:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5040:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5043:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"id":136,"name":"paymentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"5046:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":137,"name":"paymentReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"5060:15:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":132,"name":"handlePayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"5017:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,address,address payable) returns (uint256)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5017:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":139,"nodeType":"ExpressionStatement","src":"5017:59:0"}]}},{"eventCall":{"arguments":[{"expression":{"id":143,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5111:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5111:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":145,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"5123:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":146,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"5132:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":147,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"5144:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":148,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"5148:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":142,"name":"SafeSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4093,"src":"5101:9:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address[] memory,uint256,address,address)"}},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5101:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":150,"nodeType":"EmitStatement","src":"5096:68:0"}]},"functionSelector":"b63e800d","id":152,"implemented":true,"kind":"function","modifiers":[],"name":"setup","nodeType":"FunctionDefinition","overrides":{"id":106,"nodeType":"OverrideSpecifier","overrides":[],"src":"4283:8:0"},"parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"_owners","nodeType":"VariableDeclaration","scope":152,"src":"4035:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":88,"name":"address","nodeType":"ElementaryTypeName","src":"4035:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":89,"nodeType":"ArrayTypeName","src":"4035:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":92,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":152,"src":"4071:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":91,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":152,"src":"4099:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"4099:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":152,"src":"4119:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":95,"name":"bytes","nodeType":"ElementaryTypeName","src":"4119:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"fallbackHandler","nodeType":"VariableDeclaration","scope":152,"src":"4148:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"4148:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"paymentToken","nodeType":"VariableDeclaration","scope":152,"src":"4181:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":99,"name":"address","nodeType":"ElementaryTypeName","src":"4181:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"payment","nodeType":"VariableDeclaration","scope":152,"src":"4211:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":101,"name":"uint256","nodeType":"ElementaryTypeName","src":"4211:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"paymentReceiver","nodeType":"VariableDeclaration","scope":152,"src":"4236:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"4236:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"4025:248:0"},"returnParameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"4292:0:0"},"scope":928,"src":"4011:1160:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4162],"body":{"id":353,"nodeType":"Block","src":"5571:3169:0","statements":[{"assignments":[179],"declarations":[{"constant":false,"id":179,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":353,"src":"5581:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5581:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":180,"nodeType":"VariableDeclarationStatement","src":"5581:14:0"},{"id":202,"nodeType":"Block","src":"5694:568:0","statements":[{"expression":{"id":195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":181,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"5708:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":183,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"5773:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":184,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"5793:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":185,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"5816:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":186,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"5838:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":187,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"5865:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":188,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5924:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":189,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5949:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":190,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"5975:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":191,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"6001:14:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6181:7:0","subExpression":{"id":192,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"6181:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":182,"name":"getTransactionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"5717:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (address,uint256,bytes calldata,enum Enum.Operation,uint256,uint256,uint256,address,address,uint256) view returns (bytes32)"}},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5717:485:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5708:494:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":196,"nodeType":"ExpressionStatement","src":"5708:494:0"},{"expression":{"arguments":[{"id":198,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"6232:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":199,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"6240:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":197,"name":"checkSignatures","nodeType":"Identifier","overloadedDeclarations":[527,558],"referencedDeclaration":527,"src":"6216:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory) view"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6216:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":201,"nodeType":"ExpressionStatement","src":"6216:35:0"}]},{"assignments":[204],"declarations":[{"constant":false,"id":204,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":353,"src":"6271:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"6271:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":207,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":205,"name":"getGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"6287:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6287:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6271:26:0"},{"id":234,"nodeType":"Block","src":"6307:571:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":208,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6325:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6342:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6334:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":209,"name":"address","nodeType":"ElementaryTypeName","src":"6334:7:0","typeDescriptions":{}}},"id":212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6334:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"6325:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":233,"nodeType":"IfStatement","src":"6321:547:0","trueBody":{"id":232,"nodeType":"Block","src":"6346:522:0","statements":[{"expression":{"arguments":[{"id":218,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"6455:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"6479:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":220,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"6506:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":221,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"6532:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":222,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"6563:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":223,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"6630:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":224,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"6659:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":225,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"6689:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":226,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"6719:14:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":227,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"6793:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":228,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6825:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6825:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":215,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6370:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":214,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"6364:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6364:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1311","typeString":"contract Guard"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"checkTransaction","nodeType":"MemberAccess","referencedDeclaration":1286,"src":"6364:29:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$_t_bytes_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256,uint256,uint256,address,address payable,bytes memory,address) external"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6364:489:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":231,"nodeType":"ExpressionStatement","src":"6364:489:0"}]}}]},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":235,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"7166:7:0","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7166:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":245,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"7206:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32353030","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7218:4:0","typeDescriptions":{"typeIdentifier":"t_rational_2500_by_1","typeString":"int_const 2500"},"value":"2500"},"src":"7206:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":237,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"7180:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3634","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7192:2:0","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"7180:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7179:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3633","id":241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7198:2:0","typeDescriptions":{"typeIdentifier":"t_rational_63_by_1","typeString":"int_const 63"},"value":"63"},"src":"7179:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7178:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","referencedDeclaration":3383,"src":"7178:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7178:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"353030","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7226:3:0","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"src":"7178:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7166:63:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":256,"nodeType":"IfStatement","src":"7162:93:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303130","id":253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7247:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d970fd9adbe3047cd5b7a20406b6bf2e613338cfe3a19aca4ca1810b67fad10","typeString":"literal_string \"GS010\""},"value":"GS010"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9d970fd9adbe3047cd5b7a20406b6bf2e613338cfe3a19aca4ca1810b67fad10","typeString":"literal_string \"GS010\""}],"id":252,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"7231:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7231:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":255,"nodeType":"ExpressionStatement","src":"7231:24:0"}},{"id":335,"nodeType":"Block","src":"7354:1240:0","statements":[{"assignments":[258],"declarations":[{"constant":false,"id":258,"mutability":"mutable","name":"gasUsed","nodeType":"VariableDeclaration","scope":335,"src":"7368:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":257,"name":"uint256","nodeType":"ElementaryTypeName","src":"7368:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":261,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":259,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"7386:7:0","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7386:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7368:27:0"},{"expression":{"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":262,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"7664:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":264,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"7682:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"7686:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":266,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"7693:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":267,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"7699:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":268,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"7710:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7710:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":276,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"7747:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"7710:46:0","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":271,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"7727:7:0","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7727:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32353030","id":273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7739:4:0","typeDescriptions":{"typeIdentifier":"t_rational_2500_by_1","typeString":"int_const 2500"},"value":"2500"},"src":"7727:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":275,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7726:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":263,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"7674:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7674:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7664:93:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":280,"nodeType":"ExpressionStatement","src":"7664:93:0"},{"expression":{"id":287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":281,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"7771:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":284,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"7793:7:0","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7793:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":282,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"7781:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":3340,"src":"7781:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7781:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7771:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":288,"nodeType":"ExpressionStatement","src":"7771:32:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8083:8:0","subExpression":{"id":289,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"8084:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":291,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"8095:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8108:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8095:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8083:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":295,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8113:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8125:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8113:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8083:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":303,"nodeType":"IfStatement","src":"8079:73:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303133","id":300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8144:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_99333b4627cde46d9c53d7148b33b8b1f4f065f5dceb2cb210893e67e551978e","typeString":"literal_string \"GS013\""},"value":"GS013"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_99333b4627cde46d9c53d7148b33b8b1f4f065f5dceb2cb210893e67e551978e","typeString":"literal_string \"GS013\""}],"id":299,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"8128:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8128:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":302,"nodeType":"ExpressionStatement","src":"8128:24:0"}},{"assignments":[305],"declarations":[{"constant":false,"id":305,"mutability":"mutable","name":"payment","nodeType":"VariableDeclaration","scope":335,"src":"8301:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":304,"name":"uint256","nodeType":"ElementaryTypeName","src":"8301:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":307,"initialValue":{"hexValue":"30","id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8319:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8301:19:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":308,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8338:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8349:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8338:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":322,"nodeType":"IfStatement","src":"8334:128:0","trueBody":{"id":321,"nodeType":"Block","src":"8352:110:0","statements":[{"expression":{"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":311,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"8370:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":313,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"8394:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":314,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"8403:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":315,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8412:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":316,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"8422:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":317,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"8432:14:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":312,"name":"handlePayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"8380:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,address,address payable) returns (uint256)"}},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8380:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8370:77:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":320,"nodeType":"ExpressionStatement","src":"8370:77:0"}]}},{"condition":{"id":323,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"8479:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"eventCall":{"arguments":[{"id":330,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"8567:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":331,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"8575:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":329,"name":"ExecutionFailure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"8550:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8550:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":333,"nodeType":"EmitStatement","src":"8545:38:0"},"id":334,"nodeType":"IfStatement","src":"8475:108:0","trueBody":{"eventCall":{"arguments":[{"id":325,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"8510:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":326,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"8518:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":324,"name":"ExecutionSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"8493:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8493:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":328,"nodeType":"EmitStatement","src":"8488:38:0"}}]},{"id":352,"nodeType":"Block","src":"8603:131:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":336,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"8621:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8638:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8630:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"8630:7:0","typeDescriptions":{}}},"id":340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8630:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"8621:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":351,"nodeType":"IfStatement","src":"8617:107:0","trueBody":{"id":350,"nodeType":"Block","src":"8642:82:0","statements":[{"expression":{"arguments":[{"id":346,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"8693:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":347,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"8701:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[{"id":343,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"8666:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":342,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"8660:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8660:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1311","typeString":"contract Guard"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"checkAfterExecution","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"8660:32:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_bool_$returns$__$","typeString":"function (bytes32,bool) external"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8660:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":349,"nodeType":"ExpressionStatement","src":"8660:49:0"}]}}]}]},"functionSelector":"6a761202","id":354,"implemented":true,"kind":"function","modifiers":[],"name":"execTransaction","nodeType":"FunctionDefinition","overrides":{"id":174,"nodeType":"OverrideSpecifier","overrides":[],"src":"5539:8:0"},"parameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":354,"src":"5236:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"5236:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":354,"src":"5256:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":155,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":354,"src":"5279:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":157,"name":"bytes","nodeType":"ElementaryTypeName","src":"5279:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":354,"src":"5308:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":159,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"5308:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":162,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":354,"src":"5342:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"5342:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":354,"src":"5369:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":163,"name":"uint256","nodeType":"ElementaryTypeName","src":"5369:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":354,"src":"5394:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint256","nodeType":"ElementaryTypeName","src":"5394:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":354,"src":"5420:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":167,"name":"address","nodeType":"ElementaryTypeName","src":"5420:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":354,"src":"5446:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":169,"name":"address","nodeType":"ElementaryTypeName","src":"5446:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":172,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":354,"src":"5486:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":171,"name":"bytes","nodeType":"ElementaryTypeName","src":"5486:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5226:289:0"},"returnParameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":176,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":354,"src":"5557:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":175,"name":"bool","nodeType":"ElementaryTypeName","src":"5557:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5556:14:0"},"scope":928,"src":"5202:3538:0","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":449,"nodeType":"Block","src":"9470:718:0","statements":[{"assignments":[371],"declarations":[{"constant":false,"id":371,"mutability":"mutable","name":"receiver","nodeType":"VariableDeclaration","scope":449,"src":"9533:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"9533:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":385,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":372,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"9560:14:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9586:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9578:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"9578:7:0","typeDescriptions":{}}},"id":376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9578:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"9560:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":383,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"9612:14:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9560:66:0","trueExpression":{"arguments":[{"expression":{"id":380,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"9599:2:0","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"origin","nodeType":"MemberAccess","src":"9599:9:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9591:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"9591:8:0","stateMutability":"payable","typeDescriptions":{}}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9591:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"9533:93:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":386,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"9640:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9660:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9652:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"9652:7:0","typeDescriptions":{}}},"id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9652:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"9640:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":447,"nodeType":"Block","src":"10026:156:0","statements":[{"expression":{"id":434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":426,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"10040:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":432,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"10075:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":429,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"10062:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":427,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"10050:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3365,"src":"10050:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10050:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3315,"src":"10050:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10050:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10040:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":435,"nodeType":"ExpressionStatement","src":"10040:44:0"},{"condition":{"id":441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10102:43:0","subExpression":{"arguments":[{"id":437,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"10117:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":438,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"10127:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":439,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"10137:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":436,"name":"transferToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"10103:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10103:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":446,"nodeType":"IfStatement","src":"10098:73:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303132","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10163:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_74edef16877c9a34a97f281dbea2805f9198008e7df330ab6416449a66143b07","typeString":"literal_string \"GS012\""},"value":"GS012"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_74edef16877c9a34a97f281dbea2805f9198008e7df330ab6416449a66143b07","typeString":"literal_string \"GS012\""}],"id":442,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"10147:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10147:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":445,"nodeType":"ExpressionStatement","src":"10147:24:0"}}]},"id":448,"nodeType":"IfStatement","src":"9636:546:0","trueBody":{"id":425,"nodeType":"Block","src":"9664:356:0","statements":[{"expression":{"id":407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":392,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"9796:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":398,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"9831:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":399,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"9842:2:0","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"gasprice","nodeType":"MemberAccess","src":"9842:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9831:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":403,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"9867:2:0","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"gasprice","nodeType":"MemberAccess","src":"9867:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9831:47:0","trueExpression":{"id":402,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"9856:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":395,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"9818:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":393,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"9806:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3365,"src":"9806:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9806:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3315,"src":"9806:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9806:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9796:83:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":408,"nodeType":"ExpressionStatement","src":"9796:83:0"},{"assignments":[410,null],"declarations":[{"constant":false,"id":410,"mutability":"mutable","name":"refundSuccess","nodeType":"VariableDeclaration","scope":425,"src":"9894:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":409,"name":"bool","nodeType":"ElementaryTypeName","src":"9894:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":417,"initialValue":{"arguments":[{"hexValue":"","id":415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9948:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":411,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"9918:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"9918:13:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":413,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"9939:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"9918:29:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9918:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"9893:58:0"},{"condition":{"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9969:14:0","subExpression":{"id":418,"name":"refundSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"9970:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":424,"nodeType":"IfStatement","src":"9965:44:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303131","id":421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10001:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_4353e9bcd8ea99b4d56990ac4b8777f1ab67cada8356790f30e482f2408a44b0","typeString":"literal_string \"GS011\""},"value":"GS011"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4353e9bcd8ea99b4d56990ac4b8777f1ab67cada8356790f30e482f2408a44b0","typeString":"literal_string \"GS011\""}],"id":420,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"9985:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9985:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":423,"nodeType":"ExpressionStatement","src":"9985:24:0"}}]}}]},"documentation":{"id":355,"nodeType":"StructuredDocumentation","src":"8746:514:0","text":" @notice Handles the payment for a Safe transaction.\n @param gasUsed Gas used by the Safe transaction.\n @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\n @param gasPrice Gas price that should be used for the payment calculation.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @return payment The amount of payment made in the specified token."},"id":450,"implemented":true,"kind":"function","modifiers":[],"name":"handlePayment","nodeType":"FunctionDefinition","parameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"gasUsed","nodeType":"VariableDeclaration","scope":450,"src":"9297:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"9297:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":450,"src":"9322:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"9322:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":361,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":450,"src":"9347:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":360,"name":"uint256","nodeType":"ElementaryTypeName","src":"9347:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":363,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":450,"src":"9373:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"9373:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":365,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":450,"src":"9399:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":364,"name":"address","nodeType":"ElementaryTypeName","src":"9399:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"9287:148:0"},"returnParameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"payment","nodeType":"VariableDeclaration","scope":450,"src":"9453:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":367,"name":"uint256","nodeType":"ElementaryTypeName","src":"9453:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9452:17:0"},"scope":928,"src":"9265:923:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":511,"nodeType":"Block","src":"10920:1261:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"3332","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11050:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":462,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"11039:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3365,"src":"11039:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11039:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":466,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"11056:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"11056:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11039:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":473,"nodeType":"IfStatement","src":"11035:64:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303232","id":470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11091:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_372498b513e17609439d064ce0277017b054c808f722c83ff57cee4e06a9e457","typeString":"literal_string \"GS022\""},"value":"GS022"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_372498b513e17609439d064ce0277017b054c808f722c83ff57cee4e06a9e457","typeString":"literal_string \"GS022\""}],"id":469,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"11075:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11075:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":472,"nodeType":"ExpressionStatement","src":"11075:24:0"}},{"assignments":[475],"declarations":[{"constant":false,"id":475,"mutability":"mutable","name":"contractSignatureLen","nodeType":"VariableDeclaration","scope":511,"src":"11227:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"11227:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":476,"nodeType":"VariableDeclarationStatement","src":"11227:28:0"},{"AST":{"nodeType":"YulBlock","src":"11366:89:0","statements":[{"nodeType":"YulAssignment","src":"11380:65:0","value":{"arguments":[{"arguments":[{"arguments":[{"name":"signatures","nodeType":"YulIdentifier","src":"11418:10:0"},{"name":"offset","nodeType":"YulIdentifier","src":"11430:6:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11414:3:0"},"nodeType":"YulFunctionCall","src":"11414:23:0"},{"kind":"number","nodeType":"YulLiteral","src":"11439:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11410:3:0"},"nodeType":"YulFunctionCall","src":"11410:34:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11404:5:0"},"nodeType":"YulFunctionCall","src":"11404:41:0"},"variableNames":[{"name":"contractSignatureLen","nodeType":"YulIdentifier","src":"11380:20:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":475,"isOffset":false,"isSlot":false,"src":"11380:20:0","valueSize":1},{"declaration":459,"isOffset":false,"isSlot":false,"src":"11430:6:0","valueSize":1},{"declaration":457,"isOffset":false,"isSlot":false,"src":"11418:10:0","valueSize":1}],"id":477,"nodeType":"InlineAssembly","src":"11357:98:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":483,"name":"contractSignatureLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"11535:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"3332","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11527:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":478,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"11516:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3365,"src":"11516:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11516:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3365,"src":"11516:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11516:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":485,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"11559:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"11559:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11516:60:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":492,"nodeType":"IfStatement","src":"11512:90:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303233","id":489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11594:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_00aecc0fa22d38afc0f465808a9fee188ba139fb53b2ca550ea01d91d6ecf29f","typeString":"literal_string \"GS023\""},"value":"GS023"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00aecc0fa22d38afc0f465808a9fee188ba139fb53b2ca550ea01d91d6ecf29f","typeString":"literal_string \"GS023\""}],"id":488,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"11578:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11578:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":491,"nodeType":"ExpressionStatement","src":"11578:24:0"}},{"assignments":[494],"declarations":[{"constant":false,"id":494,"mutability":"mutable","name":"contractSignature","nodeType":"VariableDeclaration","scope":511,"src":"11640:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":493,"name":"bytes","nodeType":"ElementaryTypeName","src":"11640:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":495,"nodeType":"VariableDeclarationStatement","src":"11640:30:0"},{"AST":{"nodeType":"YulBlock","src":"11781:210:0","statements":[{"nodeType":"YulAssignment","src":"11926:55:0","value":{"arguments":[{"arguments":[{"name":"signatures","nodeType":"YulIdentifier","src":"11955:10:0"},{"name":"offset","nodeType":"YulIdentifier","src":"11967:6:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11951:3:0"},"nodeType":"YulFunctionCall","src":"11951:23:0"},{"kind":"number","nodeType":"YulLiteral","src":"11976:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11947:3:0"},"nodeType":"YulFunctionCall","src":"11947:34:0"},"variableNames":[{"name":"contractSignature","nodeType":"YulIdentifier","src":"11926:17:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":494,"isOffset":false,"isSlot":false,"src":"11926:17:0","valueSize":1},{"declaration":459,"isOffset":false,"isSlot":false,"src":"11967:6:0","valueSize":1},{"declaration":457,"isOffset":false,"isSlot":false,"src":"11955:10:0","valueSize":1}],"id":496,"nodeType":"InlineAssembly","src":"11772:219:0"},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":501,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"12097:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":502,"name":"contractSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"12107:17:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":498,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"12073:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":497,"name":"ISignatureValidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4280,"src":"12053:19:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISignatureValidator_$4280_$","typeString":"type(contract ISignatureValidator)"}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12053:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidator_$4280","typeString":"contract ISignatureValidator"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":4279,"src":"12053:43:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes32,bytes memory) view external returns (bytes4)"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12053:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":504,"name":"EIP1271_MAGIC_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"12129:19:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"12053:95:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":510,"nodeType":"IfStatement","src":"12049:125:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303234","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12166:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d9dfad0f7e80ccb3a898324566cbd9ed8451678d229622c4c1b5f1f19330139","typeString":"literal_string \"GS024\""},"value":"GS024"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1d9dfad0f7e80ccb3a898324566cbd9ed8451678d229622c4c1b5f1f19330139","typeString":"literal_string \"GS024\""}],"id":506,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"12150:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12150:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":509,"nodeType":"ExpressionStatement","src":"12150:24:0"}}]},"documentation":{"id":451,"nodeType":"StructuredDocumentation","src":"10194:601:0","text":" @notice Checks whether the contract signature is valid. Reverts otherwise.\n @dev This is extracted to a separate function for better compatibility with Certora's prover.\n      More info here: https://github.com/safe-global/safe-smart-account/pull/661\n @param owner Address of the owner used to sign the message\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param signatures Signature data that should be verified.\n @param offset Offset to the start of the contract signature in the signatures byte array"},"id":512,"implemented":true,"kind":"function","modifiers":[],"name":"checkContractSignature","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":453,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":512,"src":"10832:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"10832:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":512,"src":"10847:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10847:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":457,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":512,"src":"10865:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":456,"name":"bytes","nodeType":"ElementaryTypeName","src":"10865:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"offset","nodeType":"VariableDeclaration","scope":512,"src":"10890:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":458,"name":"uint256","nodeType":"ElementaryTypeName","src":"10890:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10831:74:0"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[],"src":"10920:0:0"},"scope":928,"src":"10800:1381:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[4170],"body":{"id":526,"nodeType":"Block","src":"12301:58:0","statements":[{"expression":{"arguments":[{"id":521,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"12327:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12337:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"id":523,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"12341:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":520,"name":"checkSignatures","nodeType":"Identifier","overloadedDeclarations":[527,558],"referencedDeclaration":558,"src":"12311:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory) view"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12311:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"12311:41:0"}]},"functionSelector":"ed516d51","id":527,"implemented":true,"kind":"function","modifiers":[],"name":"checkSignatures","nodeType":"FunctionDefinition","overrides":{"id":518,"nodeType":"OverrideSpecifier","overrides":[],"src":"12292:8:0"},"parameters":{"id":517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":514,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":527,"src":"12237:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":513,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12237:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":516,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":527,"src":"12255:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":515,"name":"bytes","nodeType":"ElementaryTypeName","src":"12255:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12236:43:0"},"returnParameters":{"id":519,"nodeType":"ParameterList","parameters":[],"src":"12301:0:0"},"scope":928,"src":"12212:147:0","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4180],"body":{"id":557,"nodeType":"Block","src":"12507:273:0","statements":[{"assignments":[538],"declarations":[{"constant":false,"id":538,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":557,"src":"12575:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":537,"name":"uint256","nodeType":"ElementaryTypeName","src":"12575:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":540,"initialValue":{"id":539,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"12596:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12575:30:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":541,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"12660:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12674:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12660:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":548,"nodeType":"IfStatement","src":"12656:45:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303031","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12693:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_93293a4a2e4cde533ea81b8912d8934c2d7892ceb975e9ad2c25f4abf449a730","typeString":"literal_string \"GS001\""},"value":"GS001"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_93293a4a2e4cde533ea81b8912d8934c2d7892ceb975e9ad2c25f4abf449a730","typeString":"literal_string \"GS001\""}],"id":544,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"12677:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12677:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":547,"nodeType":"ExpressionStatement","src":"12677:24:0"}},{"expression":{"arguments":[{"expression":{"id":550,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12728:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"12728:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":552,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"12740:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":553,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"12750:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":554,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"12762:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":549,"name":"checkNSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"12711:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,bytes memory,uint256) view"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12711:62:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"ExpressionStatement","src":"12711:62:0"}]},"functionSelector":"934f3a11","id":558,"implemented":true,"kind":"function","modifiers":[],"name":"checkSignatures","nodeType":"FunctionDefinition","overrides":{"id":535,"nodeType":"OverrideSpecifier","overrides":[],"src":"12498:8:0"},"parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":558,"src":"12415:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12415:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":558,"src":"12433:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":530,"name":"bytes","nodeType":"ElementaryTypeName","src":"12433:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":533,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":558,"src":"12461:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":532,"name":"bytes","nodeType":"ElementaryTypeName","src":"12461:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12414:71:0"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[],"src":"12507:0:0"},"scope":928,"src":"12390:390:0","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4192],"body":{"id":765,"nodeType":"Block","src":"12985:3198:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":570,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"13066:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"13066:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"hexValue":"3635","id":574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13109:2:0","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"}],"expression":{"id":572,"name":"requiredSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"13086:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3315,"src":"13086:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13086:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13066:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":581,"nodeType":"IfStatement","src":"13062:76:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303230","id":578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13130:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f27dba96666375fe844b71e8ea4f388db2ce9f87fa9882d36a17036a7478b232","typeString":"literal_string \"GS020\""},"value":"GS020"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f27dba96666375fe844b71e8ea4f388db2ce9f87fa9882d36a17036a7478b232","typeString":"literal_string \"GS020\""}],"id":577,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"13114:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13114:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":580,"nodeType":"ExpressionStatement","src":"13114:24:0"}},{"assignments":[583],"declarations":[{"constant":false,"id":583,"mutability":"mutable","name":"lastOwner","nodeType":"VariableDeclaration","scope":765,"src":"13200:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":582,"name":"address","nodeType":"ElementaryTypeName","src":"13200:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":588,"initialValue":{"arguments":[{"hexValue":"30","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13228:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13220:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":584,"name":"address","nodeType":"ElementaryTypeName","src":"13220:7:0","typeDescriptions":{}}},"id":587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13220:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"13200:30:0"},{"assignments":[590],"declarations":[{"constant":false,"id":590,"mutability":"mutable","name":"currentOwner","nodeType":"VariableDeclaration","scope":765,"src":"13240:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"13240:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":591,"nodeType":"VariableDeclarationStatement","src":"13240:20:0"},{"assignments":[593],"declarations":[{"constant":false,"id":593,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","scope":765,"src":"13270:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"13270:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":594,"nodeType":"VariableDeclarationStatement","src":"13270:9:0"},{"assignments":[596],"declarations":[{"constant":false,"id":596,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":765,"src":"13388:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13388:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":597,"nodeType":"VariableDeclarationStatement","src":"13388:9:0"},{"assignments":[599],"declarations":[{"constant":false,"id":599,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":765,"src":"13407:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13407:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":600,"nodeType":"VariableDeclarationStatement","src":"13407:9:0"},{"assignments":[602],"declarations":[{"constant":false,"id":602,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":765,"src":"13426:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":601,"name":"uint256","nodeType":"ElementaryTypeName","src":"13426:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":603,"nodeType":"VariableDeclarationStatement","src":"13426:9:0"},{"body":{"id":763,"nodeType":"Block","src":"13486:2691:0","statements":[{"expression":{"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":614,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"13501:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":615,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"13504:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":616,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"13507:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":617,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"13500:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_bytes32_$_t_bytes32_$","typeString":"tuple(uint256,bytes32,bytes32)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":619,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"13527:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":620,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"13539:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":618,"name":"signatureSplit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"13512:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$_t_bytes32_$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (uint8,bytes32,bytes32)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13512:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint8_$_t_bytes32_$_t_bytes32_$","typeString":"tuple(uint8,bytes32,bytes32)"}},"src":"13500:41:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":623,"nodeType":"ExpressionStatement","src":"13500:41:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":624,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"13559:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13564:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13559:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":665,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"14826:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14831:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14826:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":698,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"15336:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3330","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15340:2:0","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"src":"15336:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":734,"nodeType":"Block","src":"15738:233:0","statements":[{"expression":{"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":722,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"15906:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":724,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"15931:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":727,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"15947:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15941:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":725,"name":"uint8","nodeType":"ElementaryTypeName","src":"15941:5:0","typeDescriptions":{}}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15941:8:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":729,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"15951:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":730,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"15954:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":723,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"15921:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15921:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15906:50:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":733,"nodeType":"ExpressionStatement","src":"15906:50:0"}]},"id":735,"nodeType":"IfStatement","src":"15332:639:0","trueBody":{"id":721,"nodeType":"Block","src":"15344:388:0","statements":[{"expression":{"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":701,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"15598:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15650:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":707,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"15686:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":704,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"15633:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"15633:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15633:62:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":703,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"15623:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15623:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":712,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"15704:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"34","id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15708:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"15704:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15698:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":710,"name":"uint8","nodeType":"ElementaryTypeName","src":"15698:5:0","typeDescriptions":{}}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15698:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":716,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"15712:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":717,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"15715:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":702,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"15613:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15613:104:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15598:119:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":720,"nodeType":"ExpressionStatement","src":"15598:119:0"}]}},"id":736,"nodeType":"IfStatement","src":"14822:1149:0","trueBody":{"id":697,"nodeType":"Block","src":"14834:492:0","statements":[{"expression":{"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":668,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"15004:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":675,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"15043:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15035:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":673,"name":"uint256","nodeType":"ElementaryTypeName","src":"15035:7:0","typeDescriptions":{}}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15035:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15027:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":671,"name":"uint160","nodeType":"ElementaryTypeName","src":"15027:7:0","typeDescriptions":{}}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15027:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15019:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":669,"name":"address","nodeType":"ElementaryTypeName","src":"15019:7:0","typeDescriptions":{}}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15019:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"15004:43:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":680,"nodeType":"ExpressionStatement","src":"15004:43:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":681,"name":"executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"15214:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":682,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"15226:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15214:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":684,"name":"approvedHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"15242:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"}},"id":686,"indexExpression":{"id":685,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"15257:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15242:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":688,"indexExpression":{"id":687,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"15271:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15242:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15284:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15242:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15214:71:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":696,"nodeType":"IfStatement","src":"15210:101:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303235","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15303:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_bc2491dc7fc5c71a630e01bcb9c3e39f61f559ab54f6528d2adb67d65ed9ff6b","typeString":"literal_string \"GS025\""},"value":"GS025"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bc2491dc7fc5c71a630e01bcb9c3e39f61f559ab54f6528d2adb67d65ed9ff6b","typeString":"literal_string \"GS025\""}],"id":692,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"15287:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15287:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":695,"nodeType":"ExpressionStatement","src":"15287:24:0"}}]}},"id":737,"nodeType":"IfStatement","src":"13555:2416:0","trueBody":{"id":664,"nodeType":"Block","src":"13567:1249:0","statements":[{"expression":{"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":627,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"13745:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":634,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"13784:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13776:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"13776:7:0","typeDescriptions":{}}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13776:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13768:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":630,"name":"uint160","nodeType":"ElementaryTypeName","src":"13768:7:0","typeDescriptions":{}}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13768:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13760:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"13760:7:0","typeDescriptions":{}}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13760:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"13745:43:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":639,"nodeType":"ExpressionStatement","src":"13745:43:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":642,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"14179:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14171:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"14171:7:0","typeDescriptions":{}}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14171:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"hexValue":"3635","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14207:2:0","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"}],"expression":{"id":644,"name":"requiredSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"14184:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3315,"src":"14184:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14184:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14171:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":653,"nodeType":"IfStatement","src":"14167:69:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303231","id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14228:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_d153a9d5a0d4e2c2b7d4e887f02c1da6287d6d54f20f4d8ce40382a23140787a","typeString":"literal_string \"GS021\""},"value":"GS021"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d153a9d5a0d4e2c2b7d4e887f02c1da6287d6d54f20f4d8ce40382a23140787a","typeString":"literal_string \"GS021\""}],"id":649,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"14212:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14212:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":652,"nodeType":"ExpressionStatement","src":"14212:24:0"}},{"expression":{"arguments":[{"id":655,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"14754:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":656,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14768:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":657,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"14778:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"id":660,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"14798:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14790:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"14790:7:0","typeDescriptions":{}}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14790:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":654,"name":"checkContractSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"14731:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,bytes memory,uint256) view"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14731:70:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":663,"nodeType":"ExpressionStatement","src":"14731:70:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":738,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"15988:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":739,"name":"lastOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"16004:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15988:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":741,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"16017:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":743,"indexExpression":{"id":742,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"16024:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16017:20:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16049:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16041:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"16041:7:0","typeDescriptions":{}}},"id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16041:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"16017:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15988:63:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":750,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"16055:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":751,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"16071:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16055:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15988:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":758,"nodeType":"IfStatement","src":"15984:144:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303236","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16120:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_14032cc06a7a2043c1b961d6b7d6cbfaea1511224ce5ca723af49fa68e55c159","typeString":"literal_string \"GS026\""},"value":"GS026"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_14032cc06a7a2043c1b961d6b7d6cbfaea1511224ce5ca723af49fa68e55c159","typeString":"literal_string \"GS026\""}],"id":754,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"16104:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16104:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":757,"nodeType":"ExpressionStatement","src":"16104:24:0"}},{"expression":{"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":759,"name":"lastOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"16142:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":760,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"16154:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16142:24:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":762,"nodeType":"ExpressionStatement","src":"16142:24:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":608,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"13457:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":609,"name":"requiredSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"13461:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13457:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":764,"initializationExpression":{"expression":{"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"13450:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13454:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13450:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":607,"nodeType":"ExpressionStatement","src":"13450:5:0"},"loopExpression":{"expression":{"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13481:3:0","subExpression":{"id":611,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"13481:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":613,"nodeType":"ExpressionStatement","src":"13481:3:0"},"nodeType":"ForStatement","src":"13445:2732:0"}]},"functionSelector":"1fcac7f3","id":766,"implemented":true,"kind":"function","modifiers":[],"name":"checkNSignatures","nodeType":"FunctionDefinition","overrides":{"id":568,"nodeType":"OverrideSpecifier","overrides":[],"src":"12976:8:0"},"parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"executor","nodeType":"VariableDeclaration","scope":766,"src":"12846:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"12846:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":766,"src":"12872:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12872:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":564,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":766,"src":"12898:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":563,"name":"bytes","nodeType":"ElementaryTypeName","src":"12898:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"requiredSignatures","nodeType":"VariableDeclaration","scope":766,"src":"12931:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":565,"name":"uint256","nodeType":"ElementaryTypeName","src":"12931:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12836:127:0"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[],"src":"12985:0:0"},"scope":928,"src":"12811:3372:0","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4198],"body":{"id":801,"nodeType":"Block","src":"16276:187:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":772,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"16290:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":775,"indexExpression":{"expression":{"id":773,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16297:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"16297:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16290:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16320:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16312:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"16312:7:0","typeDescriptions":{}}},"id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16312:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"16290:32:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":785,"nodeType":"IfStatement","src":"16286:62:0","trueBody":{"expression":{"arguments":[{"hexValue":"4753303330","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16340:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_26b7fa7d947085035b53de5c25693e568c405e1e894ad22389a1528045f35ba8","typeString":"literal_string \"GS030\""},"value":"GS030"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_26b7fa7d947085035b53de5c25693e568c405e1e894ad22389a1528045f35ba8","typeString":"literal_string \"GS030\""}],"id":781,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"16324:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16324:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":784,"nodeType":"ExpressionStatement","src":"16324:24:0"}},{"expression":{"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":786,"name":"approvedHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"16358:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"}},"id":790,"indexExpression":{"expression":{"id":787,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16373:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"16373:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16358:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":791,"indexExpression":{"id":789,"name":"hashToApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"16385:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16358:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16402:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"16358:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":794,"nodeType":"ExpressionStatement","src":"16358:45:0"},{"eventCall":{"arguments":[{"id":796,"name":"hashToApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"16430:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":797,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16445:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"16445:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":795,"name":"ApproveHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"16418:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16418:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":800,"nodeType":"EmitStatement","src":"16413:43:0"}]},"functionSelector":"d4d9bdcd","id":802,"implemented":true,"kind":"function","modifiers":[],"name":"approveHash","nodeType":"FunctionDefinition","overrides":{"id":770,"nodeType":"OverrideSpecifier","overrides":[],"src":"16267:8:0"},"parameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"mutability":"mutable","name":"hashToApprove","nodeType":"VariableDeclaration","scope":802,"src":"16235:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16235:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16234:23:0"},"returnParameters":{"id":771,"nodeType":"ParameterList","parameters":[],"src":"16276:0:0"},"scope":928,"src":"16214:249:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4204],"body":{"id":821,"nodeType":"Block","src":"16560:315:0","statements":[{"assignments":[809],"declarations":[{"constant":false,"id":809,"mutability":"mutable","name":"chainId","nodeType":"VariableDeclaration","scope":821,"src":"16570:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":808,"name":"uint256","nodeType":"ElementaryTypeName","src":"16570:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":810,"nodeType":"VariableDeclarationStatement","src":"16570:15:0"},{"AST":{"nodeType":"YulBlock","src":"16696:44:0","statements":[{"nodeType":"YulAssignment","src":"16710:20:0","value":{"arguments":[],"functionName":{"name":"chainid","nodeType":"YulIdentifier","src":"16721:7:0"},"nodeType":"YulFunctionCall","src":"16721:9:0"},"variableNames":[{"name":"chainId","nodeType":"YulIdentifier","src":"16710:7:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":809,"isOffset":false,"isSlot":false,"src":"16710:7:0","valueSize":1}],"id":811,"nodeType":"InlineAssembly","src":"16687:53:0"},{"expression":{"arguments":[{"arguments":[{"id":815,"name":"DOMAIN_SEPARATOR_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"16826:25:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":816,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"16853:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":817,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"16862:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$928","typeString":"contract Safe"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_Safe_$928","typeString":"contract Safe"}],"expression":{"id":813,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"16815:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"16815:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16815:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":812,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"16805:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16805:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":807,"id":820,"nodeType":"Return","src":"16798:70:0"}]},"functionSelector":"f698da25","id":822,"implemented":true,"kind":"function","modifiers":[],"name":"domainSeparator","nodeType":"FunctionDefinition","overrides":{"id":804,"nodeType":"OverrideSpecifier","overrides":[],"src":"16533:8:0"},"parameters":{"id":803,"nodeType":"ParameterList","parameters":[],"src":"16518:2:0"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":822,"src":"16551:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16551:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16550:9:0"},"scope":928,"src":"16494:381:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":884,"nodeType":"Block","src":"18022:484:0","statements":[{"assignments":[849],"declarations":[{"constant":false,"id":849,"mutability":"mutable","name":"safeTxHash","nodeType":"VariableDeclaration","scope":884,"src":"18032:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":848,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18032:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":868,"initialValue":{"arguments":[{"arguments":[{"id":853,"name":"SAFE_TX_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"18104:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":854,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"18138:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":855,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"18158:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":857,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"18191:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":856,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"18181:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18181:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":859,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"18214:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":860,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"18241:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":861,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"18268:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":862,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"18293:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":863,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"18319:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":864,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"18345:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":865,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"18377:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":851,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"18076:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"18076:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18076:321:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":850,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"18053:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18053:354:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"18032:375:0"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30783139","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18448:4:0","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"0x19"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"}],"id":872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18441:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":871,"name":"bytes1","nodeType":"ElementaryTypeName","src":"18441:6:0","typeDescriptions":{}}},"id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18441:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[{"hexValue":"30783031","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18462:4:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18455:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":875,"name":"bytes1","nodeType":"ElementaryTypeName","src":"18455:6:0","typeDescriptions":{}}},"id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18455:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[],"expression":{"argumentTypes":[],"id":879,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"18469:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18469:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":881,"name":"safeTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"18488:10:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":869,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"18424:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"18424:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18424:75:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":847,"id":883,"nodeType":"Return","src":"18417:82:0"}]},"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"16881:797:0","text":" @notice Returns the pre-image of the transaction hash (see getTransactionHash).\n @param to Destination address.\n @param value Ether value.\n @param data Data payload.\n @param operation Operation type.\n @param safeTxGas Gas that should be used for the safe transaction.\n @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n @param gasPrice Maximum gas price that should be used for this transaction.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n @param _nonce Transaction nonce.\n @return Transaction hash bytes."},"id":885,"implemented":true,"kind":"function","modifiers":[],"name":"encodeTransactionData","nodeType":"FunctionDefinition","parameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":885,"src":"17723:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"17723:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":827,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":885,"src":"17743:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":826,"name":"uint256","nodeType":"ElementaryTypeName","src":"17743:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":829,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":885,"src":"17766:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":828,"name":"bytes","nodeType":"ElementaryTypeName","src":"17766:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":831,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":885,"src":"17795:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":830,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"17795:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":885,"src":"17829:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"17829:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":835,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":885,"src":"17856:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":834,"name":"uint256","nodeType":"ElementaryTypeName","src":"17856:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":837,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":885,"src":"17881:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"17881:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":885,"src":"17907:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"17907:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":885,"src":"17933:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"17933:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":843,"mutability":"mutable","name":"_nonce","nodeType":"VariableDeclaration","scope":885,"src":"17965:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"17965:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17713:272:0"},"returnParameters":{"id":847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":885,"src":"18008:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":845,"name":"bytes","nodeType":"ElementaryTypeName","src":"18008:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18007:14:0"},"scope":928,"src":"17683:823:0","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[4230],"body":{"id":926,"nodeType":"Block","src":"18876:148:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":913,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"18925:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"18929:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":915,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"18936:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":916,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"18942:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":917,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"18953:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":918,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"18964:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":919,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"18973:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":920,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"18983:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":921,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"18993:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":922,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"19009:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":912,"name":"encodeTransactionData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"18903:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,uint256,bytes calldata,enum Enum.Operation,uint256,uint256,uint256,address,address,uint256) view returns (bytes memory)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18903:113:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":911,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"18893:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18893:124:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":910,"id":925,"nodeType":"Return","src":"18886:131:0"}]},"functionSelector":"d8d11f78","id":927,"implemented":true,"kind":"function","modifiers":[],"name":"getTransactionHash","nodeType":"FunctionDefinition","overrides":{"id":907,"nodeType":"OverrideSpecifier","overrides":[],"src":"18849:8:0"},"parameters":{"id":906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":927,"src":"18574:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":886,"name":"address","nodeType":"ElementaryTypeName","src":"18574:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":889,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":927,"src":"18594:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"18594:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":891,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":927,"src":"18617:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":890,"name":"bytes","nodeType":"ElementaryTypeName","src":"18617:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":927,"src":"18646:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":892,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"18646:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":927,"src":"18680:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":894,"name":"uint256","nodeType":"ElementaryTypeName","src":"18680:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":927,"src":"18707:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"18707:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":927,"src":"18732:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":898,"name":"uint256","nodeType":"ElementaryTypeName","src":"18732:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":927,"src":"18758:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":900,"name":"address","nodeType":"ElementaryTypeName","src":"18758:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":927,"src":"18784:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"18784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"_nonce","nodeType":"VariableDeclaration","scope":927,"src":"18816:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":904,"name":"uint256","nodeType":"ElementaryTypeName","src":"18816:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18564:272:0"},"returnParameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":927,"src":"18867:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18867:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18866:9:0"},"scope":928,"src":"18537:487:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":929,"src":"2289:16737:0"}],"src":"42:18985:0"},"id":0},"contracts/SafeL2.sol":{"ast":{"absolutePath":"contracts/SafeL2.sol","exportedSymbols":{"Enum":[4287],"Safe":[928],"SafeL2":[1076]},"id":1077,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":930,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:1"},{"absolutePath":"contracts/Safe.sol","file":"./Safe.sol","id":933,"nodeType":"ImportDirective","scope":1077,"sourceUnit":929,"src":"75:38:1","symbolAliases":[{"foreign":{"id":931,"name":"Safe","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:4:1","typeDescriptions":{}}},{"foreign":{"id":932,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"89:4:1","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":935,"name":"Safe","nodeType":"UserDefinedTypeName","referencedDeclaration":928,"src":"450:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$928","typeString":"contract Safe"}},"id":936,"nodeType":"InheritanceSpecifier","src":"450:4:1"}],"contractDependencies":[928,1191,1247,1390,1932,2456,2478,2505,2536,2556,2562,2611,3887,3901,3992,4063,4261,4267,4299],"contractKind":"contract","documentation":{"id":934,"nodeType":"StructuredDocumentation","src":"115:315:1","text":" @title SafeL2 - An implementation of the Safe contract that emits additional events on transaction executions.\n @notice For a more complete description of the Safe contract, please refer to the main Safe contract `Safe.sol`.\n @author Stefan George - @Georgi87\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1076,"linearizedBaseContracts":[1076,928,4261,2611,1247,3887,4267,2505,2556,2456,4063,1932,3992,1390,3901,1191,2536,4299,2478,2562],"name":"SafeL2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":960,"name":"SafeMultiSigTransaction","nodeType":"EventDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"indexed":false,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":960,"src":"500:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"500:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":960,"src":"520:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":942,"indexed":false,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":960,"src":"543:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":941,"name":"bytes","nodeType":"ElementaryTypeName","src":"543:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":944,"indexed":false,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":960,"src":"563:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":943,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"563:14:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":946,"indexed":false,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":960,"src":"597:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"597:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":948,"indexed":false,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":960,"src":"624:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":950,"indexed":false,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":960,"src":"649:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":949,"name":"uint256","nodeType":"ElementaryTypeName","src":"649:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":952,"indexed":false,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":960,"src":"675:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"675:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":954,"indexed":false,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":960,"src":"701:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"701:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":956,"indexed":false,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":960,"src":"741:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":955,"name":"bytes","nodeType":"ElementaryTypeName","src":"741:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":958,"indexed":false,"mutability":"mutable","name":"additionalInfo","nodeType":"VariableDeclaration","scope":960,"src":"943:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":957,"name":"bytes","nodeType":"ElementaryTypeName","src":"943:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"490:479:1"},"src":"461:509:1"},{"anonymous":false,"id":972,"name":"SafeModuleTransaction","nodeType":"EventDefinition","parameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"indexed":false,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":972,"src":"1004:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"1004:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":964,"indexed":false,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":972,"src":"1020:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":966,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":972,"src":"1032:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":965,"name":"uint256","nodeType":"ElementaryTypeName","src":"1032:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":968,"indexed":false,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":972,"src":"1047:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":967,"name":"bytes","nodeType":"ElementaryTypeName","src":"1047:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":970,"indexed":false,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":972,"src":"1059:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":969,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1059:14:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"1003:81:1"},"src":"976:109:1"},{"baseFunctions":[354],"body":{"id":1040,"nodeType":"Block","src":"1468:561:1","statements":[{"assignments":[999],"declarations":[{"constant":false,"id":999,"mutability":"mutable","name":"additionalInfo","nodeType":"VariableDeclaration","scope":1040,"src":"1478:27:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":998,"name":"bytes","nodeType":"ElementaryTypeName","src":"1478:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1000,"nodeType":"VariableDeclarationStatement","src":"1478:27:1"},{"id":1011,"nodeType":"Block","src":"1515:82:1","statements":[{"expression":{"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1001,"name":"additionalInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"1529:14:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1004,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1557:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1005,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1564:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1564:10:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1007,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1576:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1002,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1546:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1546:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1546:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1529:57:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1010,"nodeType":"ExpressionStatement","src":"1529:57:1"}]},{"eventCall":{"arguments":[{"id":1013,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"1648:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1014,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"1664:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1015,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"1683:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1016,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"1701:9:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":1017,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"1724:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1018,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"1747:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1019,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"1768:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1020,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"1790:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1021,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"1812:14:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1022,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"1840:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1023,"name":"additionalInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"1864:14:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1012,"name":"SafeMultiSigTransaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"1611:23:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256,uint256,uint256,address,address payable,bytes memory,bytes memory)"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1611:277:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1025,"nodeType":"EmitStatement","src":"1606:282:1"},{"expression":{"arguments":[{"id":1028,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"1927:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1029,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"1931:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1030,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"1938:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1031,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"1944:9:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":1032,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"1955:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1033,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"1966:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1034,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"1975:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1035,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"1985:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1036,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"1995:14:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1037,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"2011:10:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1026,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1905:5:1","typeDescriptions":{"typeIdentifier":"t_super$_SafeL2_$1076","typeString":"contract super SafeL2"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"execTransaction","nodeType":"MemberAccess","referencedDeclaration":354,"src":"1905:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes calldata,enum Enum.Operation,uint256,uint256,uint256,address,address payable,bytes memory) returns (bool)"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1905:117:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":997,"id":1039,"nodeType":"Return","src":"1898:124:1"}]},"functionSelector":"6a761202","id":1041,"implemented":true,"kind":"function","modifiers":[],"name":"execTransaction","nodeType":"FunctionDefinition","overrides":{"id":994,"nodeType":"OverrideSpecifier","overrides":[],"src":"1444:8:1"},"parameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1041,"src":"1149:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":973,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":976,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1041,"src":"1169:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":975,"name":"uint256","nodeType":"ElementaryTypeName","src":"1169:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":978,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1041,"src":"1192:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":977,"name":"bytes","nodeType":"ElementaryTypeName","src":"1192:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":980,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1041,"src":"1221:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":979,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1221:14:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":982,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":1041,"src":"1255:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1255:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":984,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":1041,"src":"1282:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1282:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":986,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":1041,"src":"1307:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":985,"name":"uint256","nodeType":"ElementaryTypeName","src":"1307:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":1041,"src":"1333:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":987,"name":"address","nodeType":"ElementaryTypeName","src":"1333:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":990,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":1041,"src":"1359:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":989,"name":"address","nodeType":"ElementaryTypeName","src":"1359:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":1041,"src":"1399:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":991,"name":"bytes","nodeType":"ElementaryTypeName","src":"1399:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1139:289:1"},"returnParameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1041,"src":"1462:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":995,"name":"bool","nodeType":"ElementaryTypeName","src":"1462:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1461:6:1"},"scope":1076,"src":"1115:914:1","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[1745],"body":{"id":1074,"nodeType":"Block","src":"2243:162:1","statements":[{"eventCall":{"arguments":[{"expression":{"id":1056,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2280:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2280:10:1","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1058,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"2292:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"2296:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1060,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"2303:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1061,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"2309:9:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}],"id":1055,"name":"SafeModuleTransaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"2258:21:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$returns$__$","typeString":"function (address,address,uint256,bytes memory,enum Enum.Operation)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2258:61:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1063,"nodeType":"EmitStatement","src":"2253:66:1"},{"expression":{"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1064,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"2329:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1067,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"2371:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"2375:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1069,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"2382:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1070,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"2388:9:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}],"expression":{"id":1065,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2339:5:1","typeDescriptions":{"typeIdentifier":"t_super$_SafeL2_$1076","typeString":"contract super SafeL2"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"execTransactionFromModule","nodeType":"MemberAccess","referencedDeclaration":1745,"src":"2339:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation) returns (bool)"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2339:59:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2329:69:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1073,"nodeType":"ExpressionStatement","src":"2329:69:1"}]},"functionSelector":"468721a7","id":1075,"implemented":true,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nodeType":"FunctionDefinition","overrides":{"id":1051,"nodeType":"OverrideSpecifier","overrides":[],"src":"2211:8:1"},"parameters":{"id":1050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1043,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1075,"src":"2103:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1042,"name":"address","nodeType":"ElementaryTypeName","src":"2103:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1045,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1075,"src":"2123:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"2123:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1047,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1075,"src":"2146:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1046,"name":"bytes","nodeType":"ElementaryTypeName","src":"2146:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1049,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1075,"src":"2173:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1048,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2173:14:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"2093:110:1"},"returnParameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1053,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1075,"src":"2229:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1052,"name":"bool","nodeType":"ElementaryTypeName","src":"2229:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2228:14:1"},"scope":1076,"src":"2059:346:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1077,"src":"431:1976:1"}],"src":"42:2366:1"},"id":1},"contracts/accessors/SimulateTxAccessor.sol":{"ast":{"absolutePath":"contracts/accessors/SimulateTxAccessor.sol","exportedSymbols":{"Enum":[4287],"Executor":[1191],"SimulateTxAccessor":[1158]},"id":1159,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1078,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:2"},{"absolutePath":"contracts/base/Executor.sol","file":"../base/Executor.sol","id":1081,"nodeType":"ImportDirective","scope":1159,"sourceUnit":1192,"src":"75:52:2","symbolAliases":[{"foreign":{"id":1079,"name":"Executor","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:8:2","typeDescriptions":{}}},{"foreign":{"id":1080,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"93:4:2","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1083,"name":"Executor","nodeType":"UserDefinedTypeName","referencedDeclaration":1191,"src":"327:8:2","typeDescriptions":{"typeIdentifier":"t_contract$_Executor_$1191","typeString":"contract Executor"}},"id":1084,"nodeType":"InheritanceSpecifier","src":"327:8:2"}],"contractDependencies":[1191],"contractKind":"contract","documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"129:166:2","text":" @title Simulate Transaction Accessor.\n @notice Can be used with StorageAccessible to simulate Safe transactions.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1158,"linearizedBaseContracts":[1158,1191],"name":"SimulateTxAccessor","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1086,"mutability":"immutable","name":"ACCESSOR_SINGLETON","nodeType":"VariableDeclaration","scope":1158,"src":"342:44:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"342:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1096,"nodeType":"Block","src":"407:51:2","statements":[{"expression":{"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1089,"name":"ACCESSOR_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"417:18:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1092,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"446:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_SimulateTxAccessor_$1158","typeString":"contract SimulateTxAccessor"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SimulateTxAccessor_$1158","typeString":"contract SimulateTxAccessor"}],"id":1091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"438:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1090,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:2","typeDescriptions":{}}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"438:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"417:34:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1095,"nodeType":"ExpressionStatement","src":"417:34:2"}]},"id":1097,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":1087,"nodeType":"ParameterList","parameters":[],"src":"404:2:2"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[],"src":"407:0:2"},"scope":1158,"src":"393:65:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1111,"nodeType":"Block","src":"652:133:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1103,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"678:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_SimulateTxAccessor_$1158","typeString":"contract SimulateTxAccessor"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SimulateTxAccessor_$1158","typeString":"contract SimulateTxAccessor"}],"id":1102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"670:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"670:7:2","typeDescriptions":{}}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"670:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1105,"name":"ACCESSOR_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"687:18:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"670:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53696d756c61746554784163636573736f722073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6c","id":1107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"707:59:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7498ff62dc2b2d15f0dcc3ecf8e94831812d542404a74147f014771b2a3727a5","typeString":"literal_string \"SimulateTxAccessor should only be called via delegatecall\""},"value":"SimulateTxAccessor should only be called via delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7498ff62dc2b2d15f0dcc3ecf8e94831812d542404a74147f014771b2a3727a5","typeString":"literal_string \"SimulateTxAccessor should only be called via delegatecall\""}],"id":1100,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"662:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"662:105:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"ExpressionStatement","src":"662:105:2"},{"id":1110,"nodeType":"PlaceholderStatement","src":"777:1:2"}]},"documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"464:155:2","text":" @notice Modifier to make a function callable via delegatecall only.\n If the function is called via a regular call, it will revert."},"id":1112,"name":"onlyDelegateCall","nodeType":"ModifierDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[],"src":"649:2:2"},"src":"624:161:2","virtual":false,"visibility":"internal"},{"body":{"id":1156,"nodeType":"Block","src":"1835:905:2","statements":[{"assignments":[1133],"declarations":[{"constant":false,"id":1133,"mutability":"mutable","name":"startGas","nodeType":"VariableDeclaration","scope":1156,"src":"1845:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"1845:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1136,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1134,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"1864:7:2","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1864:9:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1845:28:2"},{"expression":{"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1137,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"1883:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"1901:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"1905:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1141,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"1912:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1142,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"1918:9:2","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1143,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"1929:7:2","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:9:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1138,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"1893:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1893:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1883:56:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1147,"nodeType":"ExpressionStatement","src":"1883:56:2"},{"expression":{"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1148,"name":"estimate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"1949:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1149,"name":"startGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"1960:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1150,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"1971:7:2","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1971:9:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1960:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1949:31:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1154,"nodeType":"ExpressionStatement","src":"1949:31:2"},{"AST":{"nodeType":"YulBlock","src":"2091:595:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2146:22:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2163:4:2","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2157:5:2"},"nodeType":"YulFunctionCall","src":"2157:11:2"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"2150:3:2","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2368:4:2","type":"","value":"0x40"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2378:3:2"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2387:14:2"},"nodeType":"YulFunctionCall","src":"2387:16:2"},{"kind":"number","nodeType":"YulLiteral","src":"2405:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2383:3:2"},"nodeType":"YulFunctionCall","src":"2383:27:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2374:3:2"},"nodeType":"YulFunctionCall","src":"2374:37:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2361:6:2"},"nodeType":"YulFunctionCall","src":"2361:51:2"},"nodeType":"YulExpressionStatement","src":"2361:51:2"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2462:3:2"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2467:14:2"},"nodeType":"YulFunctionCall","src":"2467:16:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2455:6:2"},"nodeType":"YulFunctionCall","src":"2455:29:2"},"nodeType":"YulExpressionStatement","src":"2455:29:2"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2546:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"2551:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2542:3:2"},"nodeType":"YulFunctionCall","src":"2542:14:2"},{"kind":"number","nodeType":"YulLiteral","src":"2558:1:2","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2561:14:2"},"nodeType":"YulFunctionCall","src":"2561:16:2"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"2527:14:2"},"nodeType":"YulFunctionCall","src":"2527:51:2"},"nodeType":"YulExpressionStatement","src":"2527:51:2"},{"nodeType":"YulAssignment","src":"2659:17:2","value":{"name":"ptr","nodeType":"YulIdentifier","src":"2673:3:2"},"variableNames":[{"name":"returnData","nodeType":"YulIdentifier","src":"2659:10:2"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1130,"isOffset":false,"isSlot":false,"src":"2659:10:2","valueSize":1}],"id":1155,"nodeType":"InlineAssembly","src":"2082:604:2"}]},"documentation":{"id":1113,"nodeType":"StructuredDocumentation","src":"791:817:2","text":" @notice Simulates a Safe transaction and returns the used gas, success boolean and the return data.\n @dev Executes the specified operation {Call, DelegateCall} and returns operation-specific data.\n      Has to be called via delegatecall.\n      This returns the data equal to `abi.encode(uint256(estimate), bool(success), bytes(returnData))`.\n      Specifically, the returndata will be:\n      `estimate:uint256 || success:bool || returnData.length:uint256 || returnData:bytes`.\n @param to Destination address .\n @param value Native token value.\n @param data Data payload.\n @param operation Operation type {Call, DelegateCall}.\n @return estimate Gas used.\n @return success Success boolean value.\n @return returnData Return data."},"functionSelector":"1c5fb211","id":1157,"implemented":true,"kind":"function","modifiers":[{"id":1124,"modifierName":{"id":1123,"name":"onlyDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"1752:16:2","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1752:16:2"}],"name":"simulate","nodeType":"FunctionDefinition","parameters":{"id":1122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1157,"src":"1640:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1114,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1157,"src":"1660:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1660:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1157,"src":"1683:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1118,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1121,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1157,"src":"1712:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1120,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1712:14:2","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"1630:112:2"},"returnParameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"mutability":"mutable","name":"estimate","nodeType":"VariableDeclaration","scope":1157,"src":"1778:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1125,"name":"uint256","nodeType":"ElementaryTypeName","src":"1778:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1128,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1157,"src":"1796:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1127,"name":"bool","nodeType":"ElementaryTypeName","src":"1796:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"returnData","nodeType":"VariableDeclaration","scope":1157,"src":"1810:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1129,"name":"bytes","nodeType":"ElementaryTypeName","src":"1810:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1777:57:2"},"scope":1158,"src":"1613:1127:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1159,"src":"296:2446:2"}],"src":"42:2701:2"},"id":2},"contracts/base/Executor.sol":{"ast":{"absolutePath":"contracts/base/Executor.sol","exportedSymbols":{"Enum":[4287],"Executor":[1191]},"id":1192,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1160,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:3"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../libraries/Enum.sol","id":1162,"nodeType":"ImportDirective","scope":1192,"sourceUnit":4288,"src":"74:43:3","symbolAliases":[{"foreign":{"id":1161,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"82:4:3","typeDescriptions":{}}}],"unitAlias":""},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"119:110:3","text":" @title Executor - A contract that can execute transactions\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1191,"linearizedBaseContracts":[1191],"name":"Executor","nodeType":"ContractDefinition","nodes":[{"body":{"id":1189,"nodeType":"Block","src":"980:641:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1179,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"994:9:3","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1180,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"1007:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$4287_$","typeString":"type(library Enum)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":4286,"src":"1007:14:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$4286_$","typeString":"type(enum Enum.Operation)"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"DelegateCall","nodeType":"MemberAccess","src":"1007:27:3","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"src":"994:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1187,"nodeType":"Block","src":"1329:286:3","statements":[{"AST":{"nodeType":"YulBlock","src":"1452:101:3","statements":[{"nodeType":"YulAssignment","src":"1470:69:3","value":{"arguments":[{"name":"txGas","nodeType":"YulIdentifier","src":"1486:5:3"},{"name":"to","nodeType":"YulIdentifier","src":"1493:2:3"},{"name":"value","nodeType":"YulIdentifier","src":"1497:5:3"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1508:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"1514:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1504:3:3"},"nodeType":"YulFunctionCall","src":"1504:15:3"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1527:4:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1521:5:3"},"nodeType":"YulFunctionCall","src":"1521:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"1534:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1537:1:3","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"1481:4:3"},"nodeType":"YulFunctionCall","src":"1481:58:3"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"1470:7:3"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1170,"isOffset":false,"isSlot":false,"src":"1508:4:3","valueSize":1},{"declaration":1170,"isOffset":false,"isSlot":false,"src":"1527:4:3","valueSize":1},{"declaration":1177,"isOffset":false,"isSlot":false,"src":"1470:7:3","valueSize":1},{"declaration":1166,"isOffset":false,"isSlot":false,"src":"1493:2:3","valueSize":1},{"declaration":1174,"isOffset":false,"isSlot":false,"src":"1486:5:3","valueSize":1},{"declaration":1168,"isOffset":false,"isSlot":false,"src":"1497:5:3","valueSize":1}],"id":1186,"nodeType":"InlineAssembly","src":"1443:110:3"}]},"id":1188,"nodeType":"IfStatement","src":"990:625:3","trueBody":{"id":1185,"nodeType":"Block","src":"1036:287:3","statements":[{"AST":{"nodeType":"YulBlock","src":"1159:102:3","statements":[{"nodeType":"YulAssignment","src":"1177:70:3","value":{"arguments":[{"name":"txGas","nodeType":"YulIdentifier","src":"1201:5:3"},{"name":"to","nodeType":"YulIdentifier","src":"1208:2:3"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1216:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"1222:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1212:3:3"},"nodeType":"YulFunctionCall","src":"1212:15:3"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1235:4:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1229:5:3"},"nodeType":"YulFunctionCall","src":"1229:11:3"},{"kind":"number","nodeType":"YulLiteral","src":"1242:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:3","type":"","value":"0"}],"functionName":{"name":"delegatecall","nodeType":"YulIdentifier","src":"1188:12:3"},"nodeType":"YulFunctionCall","src":"1188:59:3"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"1177:7:3"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1170,"isOffset":false,"isSlot":false,"src":"1216:4:3","valueSize":1},{"declaration":1170,"isOffset":false,"isSlot":false,"src":"1235:4:3","valueSize":1},{"declaration":1177,"isOffset":false,"isSlot":false,"src":"1177:7:3","valueSize":1},{"declaration":1166,"isOffset":false,"isSlot":false,"src":"1208:2:3","valueSize":1},{"declaration":1174,"isOffset":false,"isSlot":false,"src":"1201:5:3","valueSize":1}],"id":1184,"nodeType":"InlineAssembly","src":"1150:111:3"}]}}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"263:530:3","text":" @notice Executes either a delegatecall or a call with provided parameters.\n @dev This method doesn't perform any sanity check of the transaction, such as:\n      - if the contract at `to` address has code or not\n      It is the responsibility of the caller to perform such checks.\n @param to Destination address.\n @param value Ether value.\n @param data Data payload.\n @param operation Operation type.\n @return success boolean flag indicating if the call succeeded."},"id":1190,"implemented":true,"kind":"function","modifiers":[],"name":"execute","nodeType":"FunctionDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1190,"src":"824:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"824:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1190,"src":"844:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1167,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1190,"src":"867:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1169,"name":"bytes","nodeType":"ElementaryTypeName","src":"867:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1190,"src":"894:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1171,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"894:14:3","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"txGas","nodeType":"VariableDeclaration","scope":1190,"src":"928:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"928:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"814:133:3"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1190,"src":"966:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1176,"name":"bool","nodeType":"ElementaryTypeName","src":"966:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"965:14:3"},"scope":1191,"src":"798:823:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1192,"src":"230:1393:3"}],"src":"42:1582:3"},"id":3},"contracts/base/FallbackManager.sol":{"ast":{"absolutePath":"contracts/base/FallbackManager.sol","exportedSymbols":{"FallbackManager":[1247],"IFallbackManager":[3887],"SelfAuthorized":[2536]},"id":1248,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1193,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:4"},{"absolutePath":"contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":1195,"nodeType":"ImportDirective","scope":1248,"sourceUnit":2537,"src":"75:60:4","symbolAliases":[{"foreign":{"id":1194,"name":"SelfAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:14:4","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IFallbackManager.sol","file":"../interfaces/IFallbackManager.sol","id":1197,"nodeType":"ImportDirective","scope":1248,"sourceUnit":3888,"src":"136:68:4","symbolAliases":[{"foreign":{"id":1196,"name":"IFallbackManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"144:16:4","typeDescriptions":{}}}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1199,"name":"SelfAuthorized","nodeType":"UserDefinedTypeName","referencedDeclaration":2536,"src":"378:14:4","typeDescriptions":{"typeIdentifier":"t_contract$_SelfAuthorized_$2536","typeString":"contract SelfAuthorized"}},"id":1200,"nodeType":"InheritanceSpecifier","src":"378:14:4"},{"baseName":{"id":1201,"name":"IFallbackManager","nodeType":"UserDefinedTypeName","referencedDeclaration":3887,"src":"394:16:4","typeDescriptions":{"typeIdentifier":"t_contract$_IFallbackManager_$3887","typeString":"contract IFallbackManager"}},"id":1202,"nodeType":"InheritanceSpecifier","src":"394:16:4"}],"contractDependencies":[2536,3887,4299],"contractKind":"contract","documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"206:134:4","text":" @title Fallback Manager - A contract managing fallback calls made to this contract\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1247,"linearizedBaseContracts":[1247,3887,2536,4299],"name":"FallbackManager","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1205,"mutability":"constant","name":"FALLBACK_HANDLER_STORAGE_SLOT","nodeType":"VariableDeclaration","scope":1247,"src":"470:124:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"470:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307836633961366334613339323834653337656431636635336433333735373764313432313261343837306662393736613433363663363933623933393931386435","id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"528:66:4","typeDescriptions":{"typeIdentifier":"t_rational_49122629484629529244014240937346711770925847994644146912111677022347558721749_by_1","typeString":"int_const 4912...(69 digits omitted)...1749"},"value":"0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5"},"visibility":"internal"},{"body":{"id":1223,"nodeType":"Block","src":"800:1428:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1211,"name":"handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1942:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1214,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1961:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_FallbackManager_$1247","typeString":"contract FallbackManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FallbackManager_$1247","typeString":"contract FallbackManager"}],"id":1213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1953:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1212,"name":"address","nodeType":"ElementaryTypeName","src":"1953:7:4","typeDescriptions":{}}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1953:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1942:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1221,"nodeType":"IfStatement","src":"1938:54:4","trueBody":{"expression":{"arguments":[{"hexValue":"4753343030","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1984:7:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f31aea2d758c1bc976ea4b6db8005af34a1f6d8fd0cba0d31e0228d78d6a5ae2","typeString":"literal_string \"GS400\""},"value":"GS400"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f31aea2d758c1bc976ea4b6db8005af34a1f6d8fd0cba0d31e0228d78d6a5ae2","typeString":"literal_string \"GS400\""}],"id":1217,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1968:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1968:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1220,"nodeType":"ExpressionStatement","src":"1968:24:4"}},{"AST":{"nodeType":"YulBlock","src":"2104:70:4","statements":[{"expression":{"arguments":[{"name":"FALLBACK_HANDLER_STORAGE_SLOT","nodeType":"YulIdentifier","src":"2125:29:4"},{"name":"handler","nodeType":"YulIdentifier","src":"2156:7:4"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2118:6:4"},"nodeType":"YulFunctionCall","src":"2118:46:4"},"nodeType":"YulExpressionStatement","src":"2118:46:4"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1205,"isOffset":false,"isSlot":false,"src":"2125:29:4","valueSize":1},{"declaration":1208,"isOffset":false,"isSlot":false,"src":"2156:7:4","valueSize":1}],"id":1222,"nodeType":"InlineAssembly","src":"2095:79:4"}]},"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"601:132:4","text":"  @notice Internal function to set the fallback handler.\n  @param handler contract to handle fallback calls."},"id":1224,"implemented":true,"kind":"function","modifiers":[],"name":"internalSetFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"handler","nodeType":"VariableDeclaration","scope":1224,"src":"774:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1207,"name":"address","nodeType":"ElementaryTypeName","src":"774:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"773:17:4"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[],"src":"800:0:4"},"scope":1247,"src":"738:1490:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3886],"body":{"id":1240,"nodeType":"Block","src":"2342:98:4","statements":[{"expression":{"arguments":[{"id":1233,"name":"handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"2379:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1232,"name":"internalSetFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"2352:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2352:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1235,"nodeType":"ExpressionStatement","src":"2352:35:4"},{"eventCall":{"arguments":[{"id":1237,"name":"handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"2425:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1236,"name":"ChangedFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"2402:22:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2402:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1239,"nodeType":"EmitStatement","src":"2397:36:4"}]},"functionSelector":"f08a0323","id":1241,"implemented":true,"kind":"function","modifiers":[{"id":1230,"modifierName":{"id":1229,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"2331:10:4","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2331:10:4"}],"name":"setFallbackHandler","nodeType":"FunctionDefinition","overrides":{"id":1228,"nodeType":"OverrideSpecifier","overrides":[],"src":"2322:8:4"},"parameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"handler","nodeType":"VariableDeclaration","scope":1241,"src":"2298:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"2298:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2297:17:4"},"returnParameters":{"id":1231,"nodeType":"ParameterList","parameters":[],"src":"2342:0:4"},"scope":1247,"src":"2270:170:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1245,"nodeType":"Block","src":"3025:1372:4","statements":[{"AST":{"nodeType":"YulBlock","src":"3136:1207:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3535:51:4","value":{"arguments":[{"name":"FALLBACK_HANDLER_STORAGE_SLOT","nodeType":"YulIdentifier","src":"3556:29:4"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3550:5:4"},"nodeType":"YulFunctionCall","src":"3550:36:4"},"variables":[{"name":"handler","nodeType":"YulTypedName","src":"3539:7:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"3619:44:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3644:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3647:1:4","type":"","value":"0"}],"functionName":{"name":"return","nodeType":"YulIdentifier","src":"3637:6:4"},"nodeType":"YulFunctionCall","src":"3637:12:4"},"nodeType":"YulExpressionStatement","src":"3637:12:4"}]},"condition":{"arguments":[{"name":"handler","nodeType":"YulIdentifier","src":"3610:7:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3603:6:4"},"nodeType":"YulFunctionCall","src":"3603:15:4"},"nodeType":"YulIf","src":"3600:2:4"},{"nodeType":"YulVariableDeclaration","src":"3677:22:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3694:4:4","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3688:5:4"},"nodeType":"YulFunctionCall","src":"3688:11:4"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"3681:3:4","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3725:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"3730:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"3733:12:4"},"nodeType":"YulFunctionCall","src":"3733:14:4"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3712:12:4"},"nodeType":"YulFunctionCall","src":"3712:36:4"},"nodeType":"YulExpressionStatement","src":"3712:36:4"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3951:3:4"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"3956:12:4"},"nodeType":"YulFunctionCall","src":"3956:14:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3947:3:4"},"nodeType":"YulFunctionCall","src":"3947:24:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3977:2:4","type":"","value":"96"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"3981:6:4"},"nodeType":"YulFunctionCall","src":"3981:8:4"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3973:3:4"},"nodeType":"YulFunctionCall","src":"3973:17:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3940:6:4"},"nodeType":"YulFunctionCall","src":"3940:51:4"},"nodeType":"YulExpressionStatement","src":"3940:51:4"},{"nodeType":"YulVariableDeclaration","src":"4070:74:4","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"4090:3:4"},"nodeType":"YulFunctionCall","src":"4090:5:4"},{"name":"handler","nodeType":"YulIdentifier","src":"4097:7:4"},{"kind":"number","nodeType":"YulLiteral","src":"4106:1:4","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"4109:3:4"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"4118:12:4"},"nodeType":"YulFunctionCall","src":"4118:14:4"},{"kind":"number","nodeType":"YulLiteral","src":"4134:2:4","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4114:3:4"},"nodeType":"YulFunctionCall","src":"4114:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"4139:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4142:1:4","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"4085:4:4"},"nodeType":"YulFunctionCall","src":"4085:59:4"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"4074:7:4","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"4173:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"4178:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4181:14:4"},"nodeType":"YulFunctionCall","src":"4181:16:4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"4158:14:4"},"nodeType":"YulFunctionCall","src":"4158:40:4"},"nodeType":"YulExpressionStatement","src":"4158:40:4"},{"body":{"nodeType":"YulBlock","src":"4230:61:4","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"4255:3:4"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4260:14:4"},"nodeType":"YulFunctionCall","src":"4260:16:4"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4248:6:4"},"nodeType":"YulFunctionCall","src":"4248:29:4"},"nodeType":"YulExpressionStatement","src":"4248:29:4"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"4221:7:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4214:6:4"},"nodeType":"YulFunctionCall","src":"4214:15:4"},"nodeType":"YulIf","src":"4211:2:4"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"4311:3:4"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4316:14:4"},"nodeType":"YulFunctionCall","src":"4316:16:4"}],"functionName":{"name":"return","nodeType":"YulIdentifier","src":"4304:6:4"},"nodeType":"YulFunctionCall","src":"4304:29:4"},"nodeType":"YulExpressionStatement","src":"4304:29:4"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1205,"isOffset":false,"isSlot":false,"src":"3556:29:4","valueSize":1}],"id":1244,"nodeType":"InlineAssembly","src":"3127:1216:4"}]},"id":1246,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":1242,"nodeType":"ParameterList","parameters":[],"src":"3013:2:4"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[],"src":"3025:0:4"},"scope":1247,"src":"3005:1392:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1248,"src":"341:4058:4"}],"src":"42:4358:4"},"id":4},"contracts/base/GuardManager.sol":{"ast":{"absolutePath":"contracts/base/GuardManager.sol","exportedSymbols":{"BaseGuard":[1337],"Enum":[4287],"Guard":[1311],"GuardManager":[1390],"IERC165":[3873],"IGuardManager":[3901],"SelfAuthorized":[2536]},"id":1391,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1249,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"86:31:5"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../libraries/Enum.sol","id":1251,"nodeType":"ImportDirective","scope":1391,"sourceUnit":4288,"src":"119:43:5","symbolAliases":[{"foreign":{"id":1250,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"127:4:5","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":1253,"nodeType":"ImportDirective","scope":1391,"sourceUnit":2537,"src":"163:60:5","symbolAliases":[{"foreign":{"id":1252,"name":"SelfAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"src":"171:14:5","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IERC165.sol","file":"../interfaces/IERC165.sol","id":1255,"nodeType":"ImportDirective","scope":1391,"sourceUnit":3874,"src":"224:50:5","symbolAliases":[{"foreign":{"id":1254,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"src":"232:7:5","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGuardManager.sol","file":"../interfaces/IGuardManager.sol","id":1257,"nodeType":"ImportDirective","scope":1391,"sourceUnit":3902,"src":"275:62:5","symbolAliases":[{"foreign":{"id":1256,"name":"IGuardManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"283:13:5","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1259,"name":"IERC165","nodeType":"UserDefinedTypeName","referencedDeclaration":3873,"src":"385:7:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC165_$3873","typeString":"contract IERC165"}},"id":1260,"nodeType":"InheritanceSpecifier","src":"385:7:5"}],"contractDependencies":[3873],"contractKind":"interface","documentation":{"id":1258,"nodeType":"StructuredDocumentation","src":"339:27:5","text":"@title Guard Interface"},"fullyImplemented":false,"id":1311,"linearizedBaseContracts":[1311,3873],"name":"Guard","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1261,"nodeType":"StructuredDocumentation","src":"399:785:5","text":"@notice Checks the transaction details.\n @dev The function needs to implement transaction validation logic.\n @param to The address to which the transaction is intended.\n @param value The value of the transaction in Wei.\n @param data The transaction data.\n @param operation The type of operation of the transaction.\n @param safeTxGas Gas used for the transaction.\n @param baseGas The base gas for the transaction.\n @param gasPrice The price of gas in Wei for the transaction.\n @param gasToken The token used to pay for gas.\n @param refundReceiver The address which should receive the refund.\n @param signatures The signatures of the transaction.\n @param msgSender The address of the message sender."},"functionSelector":"75f0bb52","id":1286,"implemented":false,"kind":"function","modifiers":[],"name":"checkTransaction","nodeType":"FunctionDefinition","parameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1286,"src":"1224:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"1224:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1286,"src":"1244:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1244:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1286,"src":"1267:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1266,"name":"bytes","nodeType":"ElementaryTypeName","src":"1267:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1286,"src":"1294:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1268,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1294:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1271,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":1286,"src":"1328:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1328:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1273,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":1286,"src":"1355:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1272,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":1286,"src":"1380:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1274,"name":"uint256","nodeType":"ElementaryTypeName","src":"1380:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1277,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":1286,"src":"1406:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1276,"name":"address","nodeType":"ElementaryTypeName","src":"1406:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1279,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":1286,"src":"1432:30:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1278,"name":"address","nodeType":"ElementaryTypeName","src":"1432:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1281,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":1286,"src":"1472:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1280,"name":"bytes","nodeType":"ElementaryTypeName","src":"1472:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"msgSender","nodeType":"VariableDeclaration","scope":1286,"src":"1505:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1214:314:5"},"returnParameters":{"id":1285,"nodeType":"ParameterList","parameters":[],"src":"1537:0:5"},"scope":1311,"src":"1189:349:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1287,"nodeType":"StructuredDocumentation","src":"1544:494:5","text":"@notice Checks the module transaction details.\n @dev The function needs to implement module transaction validation logic.\n @param to The address to which the transaction is intended.\n @param value The value of the transaction in Wei.\n @param data The transaction data.\n @param operation The type of operation of the transaction.\n @param module The module involved in the transaction.\n @return moduleTxHash The hash of the module transaction."},"functionSelector":"728c2972","id":1302,"implemented":false,"kind":"function","modifiers":[],"name":"checkModuleTransaction","nodeType":"FunctionDefinition","parameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1302,"src":"2084:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1288,"name":"address","nodeType":"ElementaryTypeName","src":"2084:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1291,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1302,"src":"2104:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1290,"name":"uint256","nodeType":"ElementaryTypeName","src":"2104:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1302,"src":"2127:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1292,"name":"bytes","nodeType":"ElementaryTypeName","src":"2127:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1302,"src":"2154:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1294,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2154:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":1302,"src":"2188:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1296,"name":"address","nodeType":"ElementaryTypeName","src":"2188:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2074:134:5"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"moduleTxHash","nodeType":"VariableDeclaration","scope":1302,"src":"2227:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2227:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2226:22:5"},"scope":1311,"src":"2043:206:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1303,"nodeType":"StructuredDocumentation","src":"2255:256:5","text":"@notice Checks after execution of transaction.\n @dev The function needs to implement a check after the execution of the transaction.\n @param hash The hash of the transaction.\n @param success The status of the transaction execution."},"functionSelector":"93271368","id":1310,"implemented":false,"kind":"function","modifiers":[],"name":"checkAfterExecution","nodeType":"FunctionDefinition","parameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"hash","nodeType":"VariableDeclaration","scope":1310,"src":"2545:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2545:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1307,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1310,"src":"2559:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1306,"name":"bool","nodeType":"ElementaryTypeName","src":"2559:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2544:28:5"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[],"src":"2581:0:5"},"scope":1311,"src":"2516:66:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1391,"src":"366:2218:5"},{"abstract":true,"baseContracts":[{"baseName":{"id":1312,"name":"Guard","nodeType":"UserDefinedTypeName","referencedDeclaration":1311,"src":"2617:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1311","typeString":"contract Guard"}},"id":1313,"nodeType":"InheritanceSpecifier","src":"2617:5:5"}],"contractDependencies":[1311,3873],"contractKind":"contract","fullyImplemented":false,"id":1337,"linearizedBaseContracts":[1337,1311,3873],"name":"BaseGuard","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3872],"body":{"id":1335,"nodeType":"Block","src":"2722:158:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1321,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"2751:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1323,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"2771:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}],"id":1322,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2766:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2766:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_Guard_$1311","typeString":"type(contract Guard)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2766:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2751:38:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1327,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"2819:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1329,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"2839:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3873_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3873_$","typeString":"type(contract IERC165)"}],"id":1328,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2834:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2834:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3873","typeString":"type(contract IERC165)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2834:25:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2819:40:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2751:108:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1320,"id":1334,"nodeType":"Return","src":"2732:127:5"}]},"functionSelector":"01ffc9a7","id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nodeType":"FunctionDefinition","overrides":{"id":1317,"nodeType":"OverrideSpecifier","overrides":[],"src":"2698:8:5"},"parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1315,"mutability":"mutable","name":"interfaceId","nodeType":"VariableDeclaration","scope":1336,"src":"2656:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1314,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2656:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2655:20:5"},"returnParameters":{"id":1320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1336,"src":"2716:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1318,"name":"bool","nodeType":"ElementaryTypeName","src":"2716:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2715:6:5"},"scope":1337,"src":"2629:251:5","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1391,"src":"2586:296:5"},{"abstract":true,"baseContracts":[{"baseName":{"id":1339,"name":"SelfAuthorized","nodeType":"UserDefinedTypeName","referencedDeclaration":2536,"src":"3088:14:5","typeDescriptions":{"typeIdentifier":"t_contract$_SelfAuthorized_$2536","typeString":"contract SelfAuthorized"}},"id":1340,"nodeType":"InheritanceSpecifier","src":"3088:14:5"},{"baseName":{"id":1341,"name":"IGuardManager","nodeType":"UserDefinedTypeName","referencedDeclaration":3901,"src":"3104:13:5","typeDescriptions":{"typeIdentifier":"t_contract$_IGuardManager_$3901","typeString":"contract IGuardManager"}},"id":1342,"nodeType":"InheritanceSpecifier","src":"3104:13:5"}],"contractDependencies":[2536,3901,4299],"contractKind":"contract","documentation":{"id":1338,"nodeType":"StructuredDocumentation","src":"2884:169:5","text":" @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1390,"linearizedBaseContracts":[1390,3901,2536,4299],"name":"GuardManager","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1345,"mutability":"constant","name":"GUARD_STORAGE_SLOT","nodeType":"VariableDeclaration","scope":1390,"src":"3172:113:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3172:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834613230346636323063386335636364636133666435346430303362616464383562613530303433366134333166306362646134663535386339336333346338","id":1344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3219:66:5","typeDescriptions":{"typeIdentifier":"t_rational_33528237782592280163068556224972516439282563014722366175641814928123294921928_by_1","typeString":"int_const 3352...(69 digits omitted)...1928"},"value":"0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8"},"visibility":"internal"},{"baseFunctions":[3900],"body":{"id":1380,"nodeType":"Block","src":"3387:375:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1353,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"3401:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3418:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3410:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1354,"name":"address","nodeType":"ElementaryTypeName","src":"3410:7:5","typeDescriptions":{}}},"id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3410:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3401:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3424:56:5","subExpression":{"arguments":[{"expression":{"arguments":[{"id":1364,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"3461:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}],"id":1363,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3456:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3456:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_Guard_$1311","typeString":"type(contract Guard)"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"3456:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"id":1360,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"3431:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1359,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"3425:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3425:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1311","typeString":"contract Guard"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3872,"src":"3425:30:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3425:55:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3401:79:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1374,"nodeType":"IfStatement","src":"3397:109:5","trueBody":{"expression":{"arguments":[{"hexValue":"4753333030","id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3498:7:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0","typeString":"literal_string \"GS300\""},"value":"GS300"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0","typeString":"literal_string \"GS300\""}],"id":1370,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3482:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3482:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1373,"nodeType":"ExpressionStatement","src":"3482:24:5"}},{"AST":{"nodeType":"YulBlock","src":"3617:57:5","statements":[{"expression":{"arguments":[{"name":"GUARD_STORAGE_SLOT","nodeType":"YulIdentifier","src":"3638:18:5"},{"name":"guard","nodeType":"YulIdentifier","src":"3658:5:5"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3631:6:5"},"nodeType":"YulFunctionCall","src":"3631:33:5"},"nodeType":"YulExpressionStatement","src":"3631:33:5"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1345,"isOffset":false,"isSlot":false,"src":"3638:18:5","valueSize":1},{"declaration":1347,"isOffset":false,"isSlot":false,"src":"3658:5:5","valueSize":1}],"id":1375,"nodeType":"InlineAssembly","src":"3608:66:5"},{"eventCall":{"arguments":[{"id":1377,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"3749:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1376,"name":"ChangedGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"3736:12:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3736:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1379,"nodeType":"EmitStatement","src":"3731:24:5"}]},"functionSelector":"e19a9dd9","id":1381,"implemented":true,"kind":"function","modifiers":[{"id":1351,"modifierName":{"id":1350,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"3376:10:5","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3376:10:5"}],"name":"setGuard","nodeType":"FunctionDefinition","overrides":{"id":1349,"nodeType":"OverrideSpecifier","overrides":[],"src":"3367:8:5"},"parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":1381,"src":"3343:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"3343:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3342:15:5"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[],"src":"3387:0:5"},"scope":1390,"src":"3325:437:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1388,"nodeType":"Block","src":"4184:223:5","statements":[{"AST":{"nodeType":"YulBlock","src":"4295:58:5","statements":[{"nodeType":"YulAssignment","src":"4309:34:5","value":{"arguments":[{"name":"GUARD_STORAGE_SLOT","nodeType":"YulIdentifier","src":"4324:18:5"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4318:5:5"},"nodeType":"YulFunctionCall","src":"4318:25:5"},"variableNames":[{"name":"guard","nodeType":"YulIdentifier","src":"4309:5:5"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1345,"isOffset":false,"isSlot":false,"src":"4324:18:5","valueSize":1},{"declaration":1385,"isOffset":false,"isSlot":false,"src":"4309:5:5","valueSize":1}],"id":1387,"nodeType":"InlineAssembly","src":"4286:67:5"}]},"documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"3768:353:5","text":" @dev Internal method to retrieve the current guard\n      We do not have a public method because we're short on bytecode size limit,\n      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\n      with the slot `GUARD_STORAGE_SLOT`\n @return guard The address of the guard"},"id":1389,"implemented":true,"kind":"function","modifiers":[],"name":"getGuard","nodeType":"FunctionDefinition","parameters":{"id":1383,"nodeType":"ParameterList","parameters":[],"src":"4143:2:5"},"returnParameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":1389,"src":"4169:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"4169:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4168:15:5"},"scope":1390,"src":"4126:281:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1391,"src":"3054:1355:5"}],"src":"86:4324:5"},"id":5},"contracts/base/ModuleManager.sol":{"ast":{"absolutePath":"contracts/base/ModuleManager.sol","exportedSymbols":{"Enum":[4287],"Executor":[1191],"Guard":[1311],"GuardManager":[1390],"IModuleManager":[3992],"ModuleManager":[1932],"SelfAuthorized":[2536]},"id":1933,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1392,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:6"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../libraries/Enum.sol","id":1394,"nodeType":"ImportDirective","scope":1933,"sourceUnit":4288,"src":"74:43:6","symbolAliases":[{"foreign":{"id":1393,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"82:4:6","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":1396,"nodeType":"ImportDirective","scope":1933,"sourceUnit":2537,"src":"118:60:6","symbolAliases":[{"foreign":{"id":1395,"name":"SelfAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"src":"126:14:6","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/Executor.sol","file":"./Executor.sol","id":1398,"nodeType":"ImportDirective","scope":1933,"sourceUnit":1192,"src":"179:40:6","symbolAliases":[{"foreign":{"id":1397,"name":"Executor","nodeType":"Identifier","overloadedDeclarations":[],"src":"187:8:6","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/GuardManager.sol","file":"./GuardManager.sol","id":1401,"nodeType":"ImportDirective","scope":1933,"sourceUnit":1391,"src":"220:55:6","symbolAliases":[{"foreign":{"id":1399,"name":"GuardManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"228:12:6","typeDescriptions":{}}},{"foreign":{"id":1400,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"src":"242:5:6","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IModuleManager.sol","file":"../interfaces/IModuleManager.sol","id":1403,"nodeType":"ImportDirective","scope":1933,"sourceUnit":3993,"src":"276:64:6","symbolAliases":[{"foreign":{"id":1402,"name":"IModuleManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"284:14:6","typeDescriptions":{}}}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1405,"name":"SelfAuthorized","nodeType":"UserDefinedTypeName","referencedDeclaration":2536,"src":"871:14:6","typeDescriptions":{"typeIdentifier":"t_contract$_SelfAuthorized_$2536","typeString":"contract SelfAuthorized"}},"id":1406,"nodeType":"InheritanceSpecifier","src":"871:14:6"},{"baseName":{"id":1407,"name":"Executor","nodeType":"UserDefinedTypeName","referencedDeclaration":1191,"src":"887:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_Executor_$1191","typeString":"contract Executor"}},"id":1408,"nodeType":"InheritanceSpecifier","src":"887:8:6"},{"baseName":{"id":1409,"name":"GuardManager","nodeType":"UserDefinedTypeName","referencedDeclaration":1390,"src":"897:12:6","typeDescriptions":{"typeIdentifier":"t_contract$_GuardManager_$1390","typeString":"contract GuardManager"}},"id":1410,"nodeType":"InheritanceSpecifier","src":"897:12:6"},{"baseName":{"id":1411,"name":"IModuleManager","nodeType":"UserDefinedTypeName","referencedDeclaration":3992,"src":"911:14:6","typeDescriptions":{"typeIdentifier":"t_contract$_IModuleManager_$3992","typeString":"contract IModuleManager"}},"id":1412,"nodeType":"InheritanceSpecifier","src":"911:14:6"}],"contractDependencies":[1191,1390,2536,3901,3992,4299],"contractKind":"contract","documentation":{"id":1404,"nodeType":"StructuredDocumentation","src":"342:493:6","text":" @title Module Manager - A contract managing Safe modules\n @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\n⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \nso only trusted and audited modules should be added to a Safe. A malicious module can\ncompletely takeover a Safe.\n @author Stefan George - @Georgi87\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1932,"linearizedBaseContracts":[1932,3992,1390,3901,1191,2536,4299],"name":"ModuleManager","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1418,"mutability":"constant","name":"SENTINEL_MODULES","nodeType":"VariableDeclaration","scope":1932,"src":"932:57:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1413,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307831","id":1416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"985:3:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"977:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:6","typeDescriptions":{}}},"id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"977:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"modules","nodeType":"VariableDeclaration","scope":1932,"src":"996:44:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":1421,"keyType":{"id":1419,"name":"address","nodeType":"ElementaryTypeName","src":"1004:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"996:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":1420,"name":"address","nodeType":"ElementaryTypeName","src":"1015:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"body":{"id":1485,"nodeType":"Block","src":"1409:426:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1430,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"1423:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1432,"indexExpression":{"id":1431,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"1431:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1423:25:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1460:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1452:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1433,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:6","typeDescriptions":{}}},"id":1436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1452:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1423:39:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1442,"nodeType":"IfStatement","src":"1419:69:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753313030","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1480:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_8c9c6f726a0896ef73f47c5bcc7192641db350a8b0b2e1f61e0f0c694ec59426","typeString":"literal_string \"GS100\""},"value":"GS100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8c9c6f726a0896ef73f47c5bcc7192641db350a8b0b2e1f61e0f0c694ec59426","typeString":"literal_string \"GS100\""}],"id":1438,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1464:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1464:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1441,"nodeType":"ExpressionStatement","src":"1464:24:6"}},{"expression":{"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1443,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"1498:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1445,"indexExpression":{"id":1444,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"1506:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1498:25:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1446,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"1526:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1498:44:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1448,"nodeType":"ExpressionStatement","src":"1498:44:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1449,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"1556:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1570:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1562:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1450,"name":"address","nodeType":"ElementaryTypeName","src":"1562:7:6","typeDescriptions":{}}},"id":1453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1562:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1556:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1484,"nodeType":"IfStatement","src":"1552:277:6","trueBody":{"id":1483,"nodeType":"Block","src":"1574:255:6","statements":[{"condition":{"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1592:15:6","subExpression":{"arguments":[{"id":1456,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"1604:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1455,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"1593:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1593:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1463,"nodeType":"IfStatement","src":"1588:45:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753303032","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1625:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_6815e8af672f0836acc6449b9d3a4cb88965a5b47ac95c5e5335f73ab586c8d0","typeString":"literal_string \"GS002\""},"value":"GS002"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6815e8af672f0836acc6449b9d3a4cb88965a5b47ac95c5e5335f73ab586c8d0","typeString":"literal_string \"GS002\""}],"id":1459,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1609:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1609:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1462,"nodeType":"ExpressionStatement","src":"1609:24:6"}},{"condition":{"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1723:69:6","subExpression":{"arguments":[{"id":1465,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"1732:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1736:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1467,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"1739:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"expression":{"id":1468,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"1745:4:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$4287_$","typeString":"type(library Enum)"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":4286,"src":"1745:14:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$4286_$","typeString":"type(enum Enum.Operation)"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"DelegateCall","nodeType":"MemberAccess","src":"1745:27:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"expression":{"arguments":[{"id":1473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1779:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1471,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1774:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1774:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"1774:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1464,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"1724:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1724:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1482,"nodeType":"IfStatement","src":"1719:99:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753303030","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1810:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_3fdb21530a98d914fa570cd548d7a3608c11195b5a11ec44ecd149309d9dcced","typeString":"literal_string \"GS000\""},"value":"GS000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3fdb21530a98d914fa570cd548d7a3608c11195b5a11ec44ecd149309d9dcced","typeString":"literal_string \"GS000\""}],"id":1478,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1794:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1794:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1481,"nodeType":"ExpressionStatement","src":"1794:24:6"}}]}}]},"documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"1047:295:6","text":" @notice Setup function sets the initial storage of the contract.\n         Optionally executes a delegate call to another contract to setup the modules.\n @param to Optional destination address of call to execute.\n @param data Optional data of call to execute."},"id":1486,"implemented":true,"kind":"function","modifiers":[],"name":"setupModules","nodeType":"FunctionDefinition","parameters":{"id":1428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1486,"src":"1369:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1424,"name":"address","nodeType":"ElementaryTypeName","src":"1369:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1427,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1486,"src":"1381:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1426,"name":"bytes","nodeType":"ElementaryTypeName","src":"1381:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1368:31:6"},"returnParameters":{"id":1429,"nodeType":"ParameterList","parameters":[],"src":"1409:0:6"},"scope":1932,"src":"1347:488:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1547,"nodeType":"Block","src":"2478:327:6","statements":[{"expression":{"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1502,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"2488:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":1503,"name":"getGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"2496:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2496:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2488:18:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1506,"nodeType":"ExpressionStatement","src":"2488:18:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1508,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2574:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2574:10:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1510,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"2588:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2574:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1512,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"2608:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1515,"indexExpression":{"expression":{"id":1513,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2616:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2616:10:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2608:19:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2639:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2631:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1516,"name":"address","nodeType":"ElementaryTypeName","src":"2631:7:6","typeDescriptions":{}}},"id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2631:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2608:33:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2574:67:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313034","id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2643:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_b44c13dad2cf265cdd10f957c112238232519dfdaff7245a6824a63db294cf23","typeString":"literal_string \"GS104\""},"value":"GS104"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b44c13dad2cf265cdd10f957c112238232519dfdaff7245a6824a63db294cf23","typeString":"literal_string \"GS104\""}],"id":1507,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2566:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2566:85:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1524,"nodeType":"ExpressionStatement","src":"2566:85:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1525,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"2666:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2683:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2675:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1526,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:6","typeDescriptions":{}}},"id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2675:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2666:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1546,"nodeType":"IfStatement","src":"2662:137:6","trueBody":{"id":1545,"nodeType":"Block","src":"2687:112:6","statements":[{"expression":{"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1531,"name":"guardHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"2701:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1536,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"2749:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"2753:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1538,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"2760:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1539,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2766:9:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"expression":{"id":1540,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2777:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2777:10:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[{"id":1533,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"2719:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1532,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"2713:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2713:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1311","typeString":"contract Guard"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"checkModuleTransaction","nodeType":"MemberAccess","referencedDeclaration":1302,"src":"2713:35:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_address_$returns$_t_bytes32_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,address) external returns (bytes32)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2713:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2701:87:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1544,"nodeType":"ExpressionStatement","src":"2701:87:6"}]}}]},"documentation":{"id":1487,"nodeType":"StructuredDocumentation","src":"1841:442:6","text":" @notice Runs pre-execution checks for module transactions if a guard is enabled.\n @param to Target address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction.\n @return guard Guard to be used for checking.\n @return guardHash Hash returned from the guard tx check."},"id":1548,"implemented":true,"kind":"function","modifiers":[],"name":"preModuleExecution","nodeType":"FunctionDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1548,"src":"2325:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1488,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1491,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1548,"src":"2345:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1490,"name":"uint256","nodeType":"ElementaryTypeName","src":"2345:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1493,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1548,"src":"2368:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1492,"name":"bytes","nodeType":"ElementaryTypeName","src":"2368:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1495,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1548,"src":"2395:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1494,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2395:14:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"2315:110:6"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1498,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":1548,"src":"2444:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1497,"name":"address","nodeType":"ElementaryTypeName","src":"2444:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1500,"mutability":"mutable","name":"guardHash","nodeType":"VariableDeclaration","scope":1548,"src":"2459:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2443:34:6"},"scope":1932,"src":"2288:517:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1586,"nodeType":"Block","src":"3264:242:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1558,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"3278:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3295:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3287:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1559,"name":"address","nodeType":"ElementaryTypeName","src":"3287:7:6","typeDescriptions":{}}},"id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3287:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3278:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1573,"nodeType":"IfStatement","src":"3274:102:6","trueBody":{"id":1572,"nodeType":"Block","src":"3299:77:6","statements":[{"expression":{"arguments":[{"id":1568,"name":"guardHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"3346:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1569,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"3357:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[{"id":1565,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"3319:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1564,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"3313:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3313:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1311","typeString":"contract Guard"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"checkAfterExecution","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"3313:32:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_bool_$returns$__$","typeString":"function (bytes32,bool) external"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3313:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1571,"nodeType":"ExpressionStatement","src":"3313:52:6"}]}},{"condition":{"id":1574,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"3389:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"eventCall":{"arguments":[{"expression":{"id":1581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3488:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3488:10:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1580,"name":"ExecutionFromModuleFailure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"3461:26:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3461:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1584,"nodeType":"EmitStatement","src":"3456:43:6"},"id":1585,"nodeType":"IfStatement","src":"3385:114:6","trueBody":{"eventCall":{"arguments":[{"expression":{"id":1576,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3430:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3430:10:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1575,"name":"ExecutionFromModuleSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"3403:26:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3403:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1579,"nodeType":"EmitStatement","src":"3398:43:6"}}]},"documentation":{"id":1549,"nodeType":"StructuredDocumentation","src":"2811:362:6","text":" @notice Runs post-execution checks for module transactions if a guard is enabled.\n @param guardHash Hash returned from the guard during pre execution check.\n @param success Boolean flag indicating if the call succeeded.\n @param guard Guard to be used for checking.\n @dev Emits event based on module transaction success."},"id":1587,"implemented":true,"kind":"function","modifiers":[],"name":"postModuleExecution","nodeType":"FunctionDefinition","parameters":{"id":1556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":1587,"src":"3207:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1550,"name":"address","nodeType":"ElementaryTypeName","src":"3207:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1553,"mutability":"mutable","name":"guardHash","nodeType":"VariableDeclaration","scope":1587,"src":"3222:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3222:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1555,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1587,"src":"3241:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1554,"name":"bool","nodeType":"ElementaryTypeName","src":"3241:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3206:48:6"},"returnParameters":{"id":1557,"nodeType":"ParameterList","parameters":[],"src":"3264:0:6"},"scope":1932,"src":"3178:328:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3932],"body":{"id":1641,"nodeType":"Block","src":"3611:394:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1595,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3679:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3697:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3689:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1596,"name":"address","nodeType":"ElementaryTypeName","src":"3689:7:6","typeDescriptions":{}}},"id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3689:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3679:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1601,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3703:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1602,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"3713:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3703:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3679:50:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1609,"nodeType":"IfStatement","src":"3675:80:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753313031","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3747:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""},"value":"GS101"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""}],"id":1605,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3731:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3731:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1608,"nodeType":"ExpressionStatement","src":"3731:24:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1610,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"3810:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1612,"indexExpression":{"id":1611,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3818:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3810:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3837:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3829:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1613,"name":"address","nodeType":"ElementaryTypeName","src":"3829:7:6","typeDescriptions":{}}},"id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3829:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3810:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1622,"nodeType":"IfStatement","src":"3806:59:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753313032","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_bfe16ebc2bd5d2fdfe588255b31e648718f9ede037848519acb772cd4f042f12","typeString":"literal_string \"GS102\""},"value":"GS102"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bfe16ebc2bd5d2fdfe588255b31e648718f9ede037848519acb772cd4f042f12","typeString":"literal_string \"GS102\""}],"id":1618,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3841:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3841:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1621,"nodeType":"ExpressionStatement","src":"3841:24:6"}},{"expression":{"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1623,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"3875:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1625,"indexExpression":{"id":1624,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3883:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3875:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1626,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"3893:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1628,"indexExpression":{"id":1627,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"3901:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3893:25:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3875:43:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1630,"nodeType":"ExpressionStatement","src":"3875:43:6"},{"expression":{"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1631,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"3928:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1633,"indexExpression":{"id":1632,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"3936:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3928:25:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1634,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3956:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3928:34:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1636,"nodeType":"ExpressionStatement","src":"3928:34:6"},{"eventCall":{"arguments":[{"id":1638,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3991:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1637,"name":"EnabledModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"3977:13:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3977:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1640,"nodeType":"EmitStatement","src":"3972:26:6"}]},"functionSelector":"610b5925","id":1642,"implemented":true,"kind":"function","modifiers":[{"id":1593,"modifierName":{"id":1592,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"3600:10:6","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3600:10:6"}],"name":"enableModule","nodeType":"FunctionDefinition","overrides":{"id":1591,"nodeType":"OverrideSpecifier","overrides":[],"src":"3591:8:6"},"parameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1589,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":1642,"src":"3568:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1588,"name":"address","nodeType":"ElementaryTypeName","src":"3568:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3567:16:6"},"returnParameters":{"id":1594,"nodeType":"ParameterList","parameters":[],"src":"3611:0:6"},"scope":1932,"src":"3546:459:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3940],"body":{"id":1698,"nodeType":"Block","src":"4131:370:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1652,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4227:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4245:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4237:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1653,"name":"address","nodeType":"ElementaryTypeName","src":"4237:7:6","typeDescriptions":{}}},"id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4237:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4227:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1658,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4251:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1659,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"4261:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4251:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4227:50:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1666,"nodeType":"IfStatement","src":"4223:80:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753313031","id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4295:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""},"value":"GS101"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""}],"id":1662,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"4279:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4279:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1665,"nodeType":"ExpressionStatement","src":"4279:24:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1667,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4317:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1669,"indexExpression":{"id":1668,"name":"prevModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"4325:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4317:19:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1670,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4340:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4317:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1676,"nodeType":"IfStatement","src":"4313:59:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753313033","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4364:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7295c339622429fbd8194417b44c0a2c972675caa6bf424cf588d99024c608be","typeString":"literal_string \"GS103\""},"value":"GS103"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7295c339622429fbd8194417b44c0a2c972675caa6bf424cf588d99024c608be","typeString":"literal_string \"GS103\""}],"id":1672,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"4348:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4348:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"4348:24:6"}},{"expression":{"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1677,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4382:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1679,"indexExpression":{"id":1678,"name":"prevModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"4390:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4382:19:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1680,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4404:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1682,"indexExpression":{"id":1681,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4412:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4404:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4382:37:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1684,"nodeType":"ExpressionStatement","src":"4382:37:6"},{"expression":{"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1685,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4429:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1687,"indexExpression":{"id":1686,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4437:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4429:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4455:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4447:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1688,"name":"address","nodeType":"ElementaryTypeName","src":"4447:7:6","typeDescriptions":{}}},"id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4447:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4429:28:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1693,"nodeType":"ExpressionStatement","src":"4429:28:6"},{"eventCall":{"arguments":[{"id":1695,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4487:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1694,"name":"DisabledModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3918,"src":"4472:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4472:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1697,"nodeType":"EmitStatement","src":"4467:27:6"}]},"functionSelector":"e009cfde","id":1699,"implemented":true,"kind":"function","modifiers":[{"id":1650,"modifierName":{"id":1649,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"4120:10:6","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"4120:10:6"}],"name":"disableModule","nodeType":"FunctionDefinition","overrides":{"id":1648,"nodeType":"OverrideSpecifier","overrides":[],"src":"4111:8:6"},"parameters":{"id":1647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"prevModule","nodeType":"VariableDeclaration","scope":1699,"src":"4068:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1643,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":1699,"src":"4088:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"4088:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4067:36:6"},"returnParameters":{"id":1651,"nodeType":"ParameterList","parameters":[],"src":"4131:0:6"},"scope":1932,"src":"4045:456:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3954],"body":{"id":1744,"nodeType":"Block","src":"4733:230:6","statements":[{"assignments":[1714,1716],"declarations":[{"constant":false,"id":1714,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":1744,"src":"4744:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1713,"name":"address","nodeType":"ElementaryTypeName","src":"4744:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1716,"mutability":"mutable","name":"guardHash","nodeType":"VariableDeclaration","scope":1744,"src":"4759:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4759:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1723,"initialValue":{"arguments":[{"id":1718,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"4799:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"4803:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1720,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"4810:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1721,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4816:9:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}],"id":1717,"name":"preModuleExecution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"4780:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$returns$_t_address_$_t_bytes32_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation) returns (address,bytes32)"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4780:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bytes32_$","typeString":"tuple(address,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4743:83:6"},{"expression":{"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1724,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"4836:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1726,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"4854:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"4858:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1728,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"4865:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1729,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4871:9:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"expression":{"arguments":[{"id":1732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4887:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1731,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1730,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4882:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4882:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4882:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1725,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"4846:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4846:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4836:64:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1737,"nodeType":"ExpressionStatement","src":"4836:64:6"},{"expression":{"arguments":[{"id":1739,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"4930:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1740,"name":"guardHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"4937:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1741,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"4948:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1738,"name":"postModuleExecution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"4910:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_bool_$returns$__$","typeString":"function (address,bytes32,bool)"}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4910:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1743,"nodeType":"ExpressionStatement","src":"4910:46:6"}]},"functionSelector":"468721a7","id":1745,"implemented":true,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nodeType":"FunctionDefinition","overrides":{"id":1709,"nodeType":"OverrideSpecifier","overrides":[],"src":"4701:8:6"},"parameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1701,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1745,"src":"4585:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1700,"name":"address","nodeType":"ElementaryTypeName","src":"4585:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1703,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1745,"src":"4605:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1702,"name":"uint256","nodeType":"ElementaryTypeName","src":"4605:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1705,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1745,"src":"4628:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1704,"name":"bytes","nodeType":"ElementaryTypeName","src":"4628:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1707,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1745,"src":"4655:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1706,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"4655:14:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"4575:110:6"},"returnParameters":{"id":1712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1745,"src":"4719:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1710,"name":"bool","nodeType":"ElementaryTypeName","src":"4719:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4718:14:6"},"scope":1932,"src":"4541:422:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3970],"body":{"id":1793,"nodeType":"Block","src":"5222:909:6","statements":[{"assignments":[1762,1764],"declarations":[{"constant":false,"id":1762,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":1793,"src":"5233:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1761,"name":"address","nodeType":"ElementaryTypeName","src":"5233:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"guardHash","nodeType":"VariableDeclaration","scope":1793,"src":"5248:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1763,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5248:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1771,"initialValue":{"arguments":[{"id":1766,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"5288:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"5292:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1768,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"5299:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1769,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"5305:9:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}],"id":1765,"name":"preModuleExecution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"5269:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$returns$_t_address_$_t_bytes32_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation) returns (address,bytes32)"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5269:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_bytes32_$","typeString":"tuple(address,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"5232:83:6"},{"expression":{"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1772,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"5325:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1774,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"5343:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"5347:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1776,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"5354:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1777,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"5360:9:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"expression":{"arguments":[{"id":1780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5376:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"5376:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1778,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5371:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5371:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"5371:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1773,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"5335:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5335:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5325:64:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1785,"nodeType":"ExpressionStatement","src":"5325:64:6"},{"AST":{"nodeType":"YulBlock","src":"5500:521:6","statements":[{"nodeType":"YulAssignment","src":"5555:25:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5575:4:6","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5569:5:6"},"nodeType":"YulFunctionCall","src":"5569:11:6"},"variableNames":[{"name":"returnData","nodeType":"YulIdentifier","src":"5555:10:6"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5780:4:6","type":"","value":"0x40"},{"arguments":[{"name":"returnData","nodeType":"YulIdentifier","src":"5790:10:6"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"5806:14:6"},"nodeType":"YulFunctionCall","src":"5806:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"5824:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5802:3:6"},"nodeType":"YulFunctionCall","src":"5802:27:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5786:3:6"},"nodeType":"YulFunctionCall","src":"5786:44:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5773:6:6"},"nodeType":"YulFunctionCall","src":"5773:58:6"},"nodeType":"YulExpressionStatement","src":"5773:58:6"},{"expression":{"arguments":[{"name":"returnData","nodeType":"YulIdentifier","src":"5881:10:6"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"5893:14:6"},"nodeType":"YulFunctionCall","src":"5893:16:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5874:6:6"},"nodeType":"YulFunctionCall","src":"5874:36:6"},"nodeType":"YulExpressionStatement","src":"5874:36:6"},{"expression":{"arguments":[{"arguments":[{"name":"returnData","nodeType":"YulIdentifier","src":"5972:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"5984:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5968:3:6"},"nodeType":"YulFunctionCall","src":"5968:21:6"},{"kind":"number","nodeType":"YulLiteral","src":"5991:1:6","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"5994:14:6"},"nodeType":"YulFunctionCall","src":"5994:16:6"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"5953:14:6"},"nodeType":"YulFunctionCall","src":"5953:58:6"},"nodeType":"YulExpressionStatement","src":"5953:58:6"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1759,"isOffset":false,"isSlot":false,"src":"5555:10:6","valueSize":1},{"declaration":1759,"isOffset":false,"isSlot":false,"src":"5790:10:6","valueSize":1},{"declaration":1759,"isOffset":false,"isSlot":false,"src":"5881:10:6","valueSize":1},{"declaration":1759,"isOffset":false,"isSlot":false,"src":"5972:10:6","valueSize":1}],"id":1786,"nodeType":"InlineAssembly","src":"5491:530:6"},{"expression":{"arguments":[{"id":1788,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"6098:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1789,"name":"guardHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"6105:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1790,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"6116:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1787,"name":"postModuleExecution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"6078:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_bool_$returns$__$","typeString":"function (address,bytes32,bool)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6078:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1792,"nodeType":"ExpressionStatement","src":"6078:46:6"}]},"functionSelector":"5229073f","id":1794,"implemented":true,"kind":"function","modifiers":[],"name":"execTransactionFromModuleReturnData","nodeType":"FunctionDefinition","overrides":{"id":1755,"nodeType":"OverrideSpecifier","overrides":[],"src":"5165:8:6"},"parameters":{"id":1754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":1794,"src":"5057:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1746,"name":"address","nodeType":"ElementaryTypeName","src":"5057:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1749,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":1794,"src":"5077:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"5077:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1751,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":1794,"src":"5100:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1750,"name":"bytes","nodeType":"ElementaryTypeName","src":"5100:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1753,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":1794,"src":"5127:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":1752,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"5127:14:6","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"5047:110:6"},"returnParameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1757,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":1794,"src":"5183:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1756,"name":"bool","nodeType":"ElementaryTypeName","src":"5183:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"returnData","nodeType":"VariableDeclaration","scope":1794,"src":"5197:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1758,"name":"bytes","nodeType":"ElementaryTypeName","src":"5197:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5182:39:6"},"scope":1932,"src":"5003:1128:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3978],"body":{"id":1815,"nodeType":"Block","src":"6248:83:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1802,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"6265:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1803,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"6285:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6265:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1805,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"6295:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1807,"indexExpression":{"id":1806,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"6303:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6295:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6322:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6314:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1808,"name":"address","nodeType":"ElementaryTypeName","src":"6314:7:6","typeDescriptions":{}}},"id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6314:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"6295:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6265:59:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1801,"id":1814,"nodeType":"Return","src":"6258:66:6"}]},"functionSelector":"2d9ad53d","id":1816,"implemented":true,"kind":"function","modifiers":[],"name":"isModuleEnabled","nodeType":"FunctionDefinition","overrides":{"id":1798,"nodeType":"OverrideSpecifier","overrides":[],"src":"6224:8:6"},"parameters":{"id":1797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1796,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":1816,"src":"6196:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"6196:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6195:16:6"},"returnParameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1816,"src":"6242:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1799,"name":"bool","nodeType":"ElementaryTypeName","src":"6242:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6241:6:6"},"scope":1932,"src":"6171:160:6","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[3991],"body":{"id":1913,"nodeType":"Block","src":"6503:1522:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1829,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"6517:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1830,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"6526:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6517:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6546:23:6","subExpression":{"arguments":[{"id":1833,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"6563:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1832,"name":"isModuleEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"6547:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6547:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6517:52:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1841,"nodeType":"IfStatement","src":"6513:82:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753313035","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6587:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_21e9127eafd366d4171d9c7f3375ca996507e4dd231bd2c13b243a626f992d4c","typeString":"literal_string \"GS105\""},"value":"GS105"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_21e9127eafd366d4171d9c7f3375ca996507e4dd231bd2c13b243a626f992d4c","typeString":"literal_string \"GS105\""}],"id":1837,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"6571:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6571:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1840,"nodeType":"ExpressionStatement","src":"6571:24:6"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1842,"name":"pageSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"6609:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6621:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6609:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1849,"nodeType":"IfStatement","src":"6605:43:6","trueBody":{"expression":{"arguments":[{"hexValue":"4753313036","id":1846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6640:7:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_3be12fd8170783d77e95b898996a64d9da524b4d1491db467a4cf43987cf214d","typeString":"literal_string \"GS106\""},"value":"GS106"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3be12fd8170783d77e95b898996a64d9da524b4d1491db467a4cf43987cf214d","typeString":"literal_string \"GS106\""}],"id":1845,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"6624:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6624:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1848,"nodeType":"ExpressionStatement","src":"6624:24:6"}},{"expression":{"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1850,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"6699:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1854,"name":"pageSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"6721:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6707:13:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":1851,"name":"address","nodeType":"ElementaryTypeName","src":"6711:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1852,"nodeType":"ArrayTypeName","src":"6711:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6707:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"src":"6699:31:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1857,"nodeType":"ExpressionStatement","src":"6699:31:6"},{"assignments":[1859],"declarations":[{"constant":false,"id":1859,"mutability":"mutable","name":"moduleCount","nodeType":"VariableDeclaration","scope":1913,"src":"6774:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1858,"name":"uint256","nodeType":"ElementaryTypeName","src":"6774:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1861,"initialValue":{"hexValue":"30","id":1860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6796:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6774:23:6"},{"expression":{"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1862,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6807:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1863,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"6814:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1865,"indexExpression":{"id":1864,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"6822:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6814:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6807:21:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1867,"nodeType":"ExpressionStatement","src":"6807:21:6"},{"body":{"id":1897,"nodeType":"Block","src":"6919:111:6","statements":[{"expression":{"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1882,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"6933:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1884,"indexExpression":{"id":1883,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"6939:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6933:18:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1885,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6954:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6933:25:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1887,"nodeType":"ExpressionStatement","src":"6933:25:6"},{"expression":{"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1888,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6972:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1889,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"6979:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1891,"indexExpression":{"id":1890,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6987:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6979:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6972:20:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1893,"nodeType":"ExpressionStatement","src":"6972:20:6"},{"expression":{"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7006:13:6","subExpression":{"id":1894,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"7006:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1896,"nodeType":"ExpressionStatement","src":"7006:13:6"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1868,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6845:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6861:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6853:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1869,"name":"address","nodeType":"ElementaryTypeName","src":"6853:7:6","typeDescriptions":{}}},"id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6853:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"6845:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1874,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"6867:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1875,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"6875:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6867:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6845:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1878,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"6895:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1879,"name":"pageSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"6909:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6895:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6845:72:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1898,"nodeType":"WhileStatement","src":"6838:192:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1899,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"7685:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1900,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"7693:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7685:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1911,"nodeType":"IfStatement","src":"7681:84:6","trueBody":{"id":1910,"nodeType":"Block","src":"7711:54:6","statements":[{"expression":{"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1902,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"7725:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1903,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"7732:5:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1907,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1904,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"7738:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7752:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7738:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7732:22:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7725:29:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1909,"nodeType":"ExpressionStatement","src":"7725:29:6"}]}},{"AST":{"nodeType":"YulBlock","src":"7921:50:6","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7942:5:6"},{"name":"moduleCount","nodeType":"YulIdentifier","src":"7949:11:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7935:6:6"},"nodeType":"YulFunctionCall","src":"7935:26:6"},"nodeType":"YulExpressionStatement","src":"7935:26:6"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1825,"isOffset":false,"isSlot":false,"src":"7942:5:6","valueSize":1},{"declaration":1859,"isOffset":false,"isSlot":false,"src":"7949:11:6","valueSize":1}],"id":1912,"nodeType":"InlineAssembly","src":"7912:59:6"}]},"functionSelector":"cc2f8452","id":1914,"implemented":true,"kind":"function","modifiers":[],"name":"getModulesPaginated","nodeType":"FunctionDefinition","overrides":{"id":1822,"nodeType":"OverrideSpecifier","overrides":[],"src":"6447:8:6"},"parameters":{"id":1821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"start","nodeType":"VariableDeclaration","scope":1914,"src":"6400:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1817,"name":"address","nodeType":"ElementaryTypeName","src":"6400:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1820,"mutability":"mutable","name":"pageSize","nodeType":"VariableDeclaration","scope":1914,"src":"6415:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1819,"name":"uint256","nodeType":"ElementaryTypeName","src":"6415:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6399:33:6"},"returnParameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":1914,"src":"6465:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1823,"name":"address","nodeType":"ElementaryTypeName","src":"6465:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1824,"nodeType":"ArrayTypeName","src":"6465:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":1914,"src":"6489:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1826,"name":"address","nodeType":"ElementaryTypeName","src":"6489:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6464:38:6"},"scope":1932,"src":"6371:1654:6","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1930,"nodeType":"Block","src":"8396:264:6","statements":[{"assignments":[1923],"declarations":[{"constant":false,"id":1923,"mutability":"mutable","name":"size","nodeType":"VariableDeclaration","scope":1930,"src":"8406:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"8406:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1924,"nodeType":"VariableDeclarationStatement","src":"8406:12:6"},{"AST":{"nodeType":"YulBlock","src":"8529:52:6","statements":[{"nodeType":"YulAssignment","src":"8543:28:6","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"8563:7:6"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"8551:11:6"},"nodeType":"YulFunctionCall","src":"8551:20:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8543:4:6"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1917,"isOffset":false,"isSlot":false,"src":"8563:7:6","valueSize":1},{"declaration":1923,"isOffset":false,"isSlot":false,"src":"8543:4:6","valueSize":1}],"id":1925,"nodeType":"InlineAssembly","src":"8520:61:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1926,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"8645:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8652:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8645:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1921,"id":1929,"nodeType":"Return","src":"8638:15:6"}]},"documentation":{"id":1915,"nodeType":"StructuredDocumentation","src":"8031:294:6","text":" @notice Returns true if `account` is a contract.\n @dev This function will return false if invoked during the constructor of a contract,\n      as the code is not actually created until after the constructor finishes.\n @param account The address being queried"},"id":1931,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","parameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":1931,"src":"8350:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1916,"name":"address","nodeType":"ElementaryTypeName","src":"8350:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8349:17:6"},"returnParameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1931,"src":"8390:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1919,"name":"bool","nodeType":"ElementaryTypeName","src":"8390:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8389:6:6"},"scope":1932,"src":"8330:330:6","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1933,"src":"836:7826:6"}],"src":"42:8621:6"},"id":6},"contracts/base/OwnerManager.sol":{"ast":{"absolutePath":"contracts/base/OwnerManager.sol","exportedSymbols":{"IOwnerManager":[4063],"OwnerManager":[2456],"SelfAuthorized":[2536]},"id":2457,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1934,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:7"},{"absolutePath":"contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":1936,"nodeType":"ImportDirective","scope":2457,"sourceUnit":2537,"src":"74:60:7","symbolAliases":[{"foreign":{"id":1935,"name":"SelfAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"src":"82:14:7","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IOwnerManager.sol","file":"../interfaces/IOwnerManager.sol","id":1938,"nodeType":"ImportDirective","scope":2457,"sourceUnit":4064,"src":"135:62:7","symbolAliases":[{"foreign":{"id":1937,"name":"IOwnerManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"143:13:7","typeDescriptions":{}}}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1940,"name":"SelfAuthorized","nodeType":"UserDefinedTypeName","referencedDeclaration":2536,"src":"559:14:7","typeDescriptions":{"typeIdentifier":"t_contract$_SelfAuthorized_$2536","typeString":"contract SelfAuthorized"}},"id":1941,"nodeType":"InheritanceSpecifier","src":"559:14:7"},{"baseName":{"id":1942,"name":"IOwnerManager","nodeType":"UserDefinedTypeName","referencedDeclaration":4063,"src":"575:13:7","typeDescriptions":{"typeIdentifier":"t_contract$_IOwnerManager_$4063","typeString":"contract IOwnerManager"}},"id":1943,"nodeType":"InheritanceSpecifier","src":"575:13:7"}],"contractDependencies":[2536,4063,4299],"contractKind":"contract","documentation":{"id":1939,"nodeType":"StructuredDocumentation","src":"199:325:7","text":" @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\n @dev Uses a linked list to store the owners because the code generate by the solidity compiler\n      is more efficient than using a dynamic array.\n @author Stefan George - @Georgi87\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2456,"linearizedBaseContracts":[2456,4063,2536,4299],"name":"OwnerManager","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1949,"mutability":"constant","name":"SENTINEL_OWNERS","nodeType":"VariableDeclaration","scope":2456,"src":"595:56:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1944,"name":"address","nodeType":"ElementaryTypeName","src":"595:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307831","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"647:3:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"639:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1945,"name":"address","nodeType":"ElementaryTypeName","src":"639:7:7","typeDescriptions":{}}},"id":1948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"639:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1953,"mutability":"mutable","name":"owners","nodeType":"VariableDeclaration","scope":2456,"src":"658:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":1952,"keyType":{"id":1950,"name":"address","nodeType":"ElementaryTypeName","src":"666:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"658:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":1951,"name":"address","nodeType":"ElementaryTypeName","src":"677:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"ownerCount","nodeType":"VariableDeclaration","scope":2456,"src":"707:27:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1954,"name":"uint256","nodeType":"ElementaryTypeName","src":"707:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"threshold","nodeType":"VariableDeclaration","scope":2456,"src":"740:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1956,"name":"uint256","nodeType":"ElementaryTypeName","src":"740:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"body":{"id":2078,"nodeType":"Block","src":"1047:1134:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1966,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"1185:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1197:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1973,"nodeType":"IfStatement","src":"1181:43:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323030","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1216:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3a328c389014707497c45ecba7527a678d30fabfd6868fe8bade352062f7774b","typeString":"literal_string \"GS200\""},"value":"GS200"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3a328c389014707497c45ecba7527a678d30fabfd6868fe8bade352062f7774b","typeString":"literal_string \"GS200\""}],"id":1969,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1200:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1200:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1972,"nodeType":"ExpressionStatement","src":"1200:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1974,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"1313:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1975,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1326:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1326:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1313:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1982,"nodeType":"IfStatement","src":"1309:57:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323031","id":1979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1358:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""},"value":"GS201"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""}],"id":1978,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1342:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1342:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1981,"nodeType":"ExpressionStatement","src":"1342:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1983,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"1432:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1446:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1432:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1990,"nodeType":"IfStatement","src":"1428:45:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323032","id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1465:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""},"value":"GS202"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""}],"id":1986,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1449:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1449:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1989,"nodeType":"ExpressionStatement","src":"1449:24:7"}},{"assignments":[1992],"declarations":[{"constant":false,"id":1992,"mutability":"mutable","name":"currentOwner","nodeType":"VariableDeclaration","scope":2078,"src":"1520:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1991,"name":"address","nodeType":"ElementaryTypeName","src":"1520:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1994,"initialValue":{"id":1993,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"1543:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1520:38:7"},{"body":{"id":2061,"nodeType":"Block","src":"1613:445:7","statements":[{"assignments":[2007],"declarations":[{"constant":false,"id":2007,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":2061,"src":"1672:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2006,"name":"address","nodeType":"ElementaryTypeName","src":"1672:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2011,"initialValue":{"baseExpression":{"id":2008,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1688:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2010,"indexExpression":{"id":2009,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"1696:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1688:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1672:26:7"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2012,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"1716:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1733:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1725:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2013,"name":"address","nodeType":"ElementaryTypeName","src":"1725:7:7","typeDescriptions":{}}},"id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1725:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1716:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2018,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"1739:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2019,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"1748:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1739:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1716:47:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2022,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"1767:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2025,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1784:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_OwnerManager_$2456","typeString":"contract OwnerManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OwnerManager_$2456","typeString":"contract OwnerManager"}],"id":2024,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1776:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2023,"name":"address","nodeType":"ElementaryTypeName","src":"1776:7:7","typeDescriptions":{}}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1776:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1767:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1716:73:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2029,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"1793:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2030,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"1809:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1793:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1716:98:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2037,"nodeType":"IfStatement","src":"1712:144:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323033","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1848:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2033,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1832:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1832:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2036,"nodeType":"ExpressionStatement","src":"1832:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2038,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"1918:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2040,"indexExpression":{"id":2039,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"1925:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1918:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1943:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1935:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"1935:7:7","typeDescriptions":{}}},"id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1935:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1918:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2050,"nodeType":"IfStatement","src":"1914:57:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323034","id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1963:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""},"value":"GS204"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""}],"id":2046,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"1947:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1947:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2049,"nodeType":"ExpressionStatement","src":"1947:24:7"}},{"expression":{"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2051,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"1985:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2053,"indexExpression":{"id":2052,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"1992:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1985:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2054,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"2008:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1985:28:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2056,"nodeType":"ExpressionStatement","src":"1985:28:7"},{"expression":{"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2057,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"2027:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2058,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"2042:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2027:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2060,"nodeType":"ExpressionStatement","src":"2027:20:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1999,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"1588:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2000,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1592:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1592:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1588:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2062,"initializationExpression":{"assignments":[1996],"declarations":[{"constant":false,"id":1996,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":2062,"src":"1573:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1995,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1998,"initialValue":{"hexValue":"30","id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1585:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1573:13:7"},"loopExpression":{"expression":{"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1608:3:7","subExpression":{"id":2003,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"1608:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2005,"nodeType":"ExpressionStatement","src":"1608:3:7"},"nodeType":"ForStatement","src":"1568:490:7"},{"expression":{"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2063,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2067:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2065,"indexExpression":{"id":2064,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"2074:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2067:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2066,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"2090:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2067:38:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2068,"nodeType":"ExpressionStatement","src":"2067:38:7"},{"expression":{"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2069,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2115:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2070,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2128:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2128:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2115:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2073,"nodeType":"ExpressionStatement","src":"2115:27:7"},{"expression":{"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2074,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"2152:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2075,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"2164:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2152:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2077,"nodeType":"ExpressionStatement","src":"2152:22:7"}]},"documentation":{"id":1958,"nodeType":"StructuredDocumentation","src":"773:193:7","text":" @notice Sets the initial storage of the contract.\n @param _owners List of Safe owners.\n @param _threshold Number of required confirmations for a Safe transaction."},"id":2079,"implemented":true,"kind":"function","modifiers":[],"name":"setupOwners","nodeType":"FunctionDefinition","parameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"_owners","nodeType":"VariableDeclaration","scope":2079,"src":"992:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1959,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1960,"nodeType":"ArrayTypeName","src":"992:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":2079,"src":"1018:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"991:46:7"},"returnParameters":{"id":1965,"nodeType":"ParameterList","parameters":[],"src":"1047:0:7"},"scope":2456,"src":"971:1210:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4015],"body":{"id":2153,"nodeType":"Block","src":"2313:565:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2089,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"2401:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2418:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2410:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2090,"name":"address","nodeType":"ElementaryTypeName","src":"2410:7:7","typeDescriptions":{}}},"id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2410:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2401:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2095,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"2424:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2096,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"2433:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2424:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2401:47:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2099,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"2452:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2102,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2469:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_OwnerManager_$2456","typeString":"contract OwnerManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OwnerManager_$2456","typeString":"contract OwnerManager"}],"id":2101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2461:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:7","typeDescriptions":{}}},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2461:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2452:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2401:73:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2110,"nodeType":"IfStatement","src":"2397:103:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323033","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2492:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2106,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"2476:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2476:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"ExpressionStatement","src":"2476:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2111,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2554:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2113,"indexExpression":{"id":2112,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"2561:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2554:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2579:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2571:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2114,"name":"address","nodeType":"ElementaryTypeName","src":"2571:7:7","typeDescriptions":{}}},"id":2117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2571:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2554:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2123,"nodeType":"IfStatement","src":"2550:57:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323034","id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2599:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""},"value":"GS204"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""}],"id":2119,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"2583:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2583:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2122,"nodeType":"ExpressionStatement","src":"2583:24:7"}},{"expression":{"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2124,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2617:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2126,"indexExpression":{"id":2125,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"2624:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2617:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2127,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2633:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2129,"indexExpression":{"id":2128,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"2640:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2633:23:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2617:39:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2131,"nodeType":"ExpressionStatement","src":"2617:39:7"},{"expression":{"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2132,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2666:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2134,"indexExpression":{"id":2133,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"2673:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2666:23:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2135,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"2692:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2666:31:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2137,"nodeType":"ExpressionStatement","src":"2666:31:7"},{"expression":{"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2707:12:7","subExpression":{"id":2138,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2707:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2140,"nodeType":"ExpressionStatement","src":"2707:12:7"},{"eventCall":{"arguments":[{"id":2142,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"2745:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2141,"name":"AddedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"2734:10:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2734:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2144,"nodeType":"EmitStatement","src":"2729:22:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2145,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"2819:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2146,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"2832:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2819:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2152,"nodeType":"IfStatement","src":"2815:56:7","trueBody":{"expression":{"arguments":[{"id":2149,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"2860:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2148,"name":"changeThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"2844:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2844:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2151,"nodeType":"ExpressionStatement","src":"2844:27:7"}}]},"functionSelector":"0d582f13","id":2154,"implemented":true,"kind":"function","modifiers":[{"id":2087,"modifierName":{"id":2086,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"2302:10:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2302:10:7"}],"name":"addOwnerWithThreshold","nodeType":"FunctionDefinition","overrides":{"id":2085,"nodeType":"OverrideSpecifier","overrides":[],"src":"2293:8:7"},"parameters":{"id":2084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":2154,"src":"2251:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2080,"name":"address","nodeType":"ElementaryTypeName","src":"2251:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2083,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":2154,"src":"2266:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2082,"name":"uint256","nodeType":"ElementaryTypeName","src":"2266:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2250:35:7"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[],"src":"2313:0:7"},"scope":2456,"src":"2220:658:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4025],"body":{"id":2233,"nodeType":"Block","src":"3019:639:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2166,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"3110:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3123:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3110:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2169,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"3127:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3110:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2175,"nodeType":"IfStatement","src":"3106:57:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323031","id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3155:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""},"value":"GS201"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""}],"id":2171,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3139:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3139:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2174,"nodeType":"ExpressionStatement","src":"3139:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2176,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3257:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3274:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3266:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2177,"name":"address","nodeType":"ElementaryTypeName","src":"3266:7:7","typeDescriptions":{}}},"id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3266:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3257:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2182,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3280:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2183,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"3289:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3280:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3257:47:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2190,"nodeType":"IfStatement","src":"3253:77:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323033","id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3322:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2186,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3306:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3306:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2189,"nodeType":"ExpressionStatement","src":"3306:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2191,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"3344:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2193,"indexExpression":{"id":2192,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"3351:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3344:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2194,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3365:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3344:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2200,"nodeType":"IfStatement","src":"3340:56:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323035","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3388:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""},"value":"GS205"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""}],"id":2196,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3372:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3372:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2199,"nodeType":"ExpressionStatement","src":"3372:24:7"}},{"expression":{"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2201,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"3406:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2203,"indexExpression":{"id":2202,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"3413:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3406:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2204,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"3426:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2206,"indexExpression":{"id":2205,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3433:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3426:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3406:33:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2208,"nodeType":"ExpressionStatement","src":"3406:33:7"},{"expression":{"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2209,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"3449:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2211,"indexExpression":{"id":2210,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3456:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3449:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3473:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3465:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2212,"name":"address","nodeType":"ElementaryTypeName","src":"3465:7:7","typeDescriptions":{}}},"id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3465:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3449:26:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2217,"nodeType":"ExpressionStatement","src":"3449:26:7"},{"expression":{"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"3485:12:7","subExpression":{"id":2218,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"3485:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2220,"nodeType":"ExpressionStatement","src":"3485:12:7"},{"eventCall":{"arguments":[{"id":2222,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3525:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2221,"name":"RemovedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"3512:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3512:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2224,"nodeType":"EmitStatement","src":"3507:24:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2225,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3599:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2226,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"3612:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3599:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2232,"nodeType":"IfStatement","src":"3595:56:7","trueBody":{"expression":{"arguments":[{"id":2229,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"3640:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2228,"name":"changeThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"3624:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3624:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2231,"nodeType":"ExpressionStatement","src":"3624:27:7"}}]},"functionSelector":"f8dc5dd9","id":2234,"implemented":true,"kind":"function","modifiers":[{"id":2164,"modifierName":{"id":2163,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"3008:10:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3008:10:7"}],"name":"removeOwner","nodeType":"FunctionDefinition","overrides":{"id":2162,"nodeType":"OverrideSpecifier","overrides":[],"src":"2999:8:7"},"parameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"mutability":"mutable","name":"prevOwner","nodeType":"VariableDeclaration","scope":2234,"src":"2938:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2155,"name":"address","nodeType":"ElementaryTypeName","src":"2938:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2158,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":2234,"src":"2957:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2157,"name":"address","nodeType":"ElementaryTypeName","src":"2957:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2160,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":2234,"src":"2972:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2159,"name":"uint256","nodeType":"ElementaryTypeName","src":"2972:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2937:54:7"},"returnParameters":{"id":2165,"nodeType":"ParameterList","parameters":[],"src":"3019:0:7"},"scope":2456,"src":"2917:741:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4035],"body":{"id":2337,"nodeType":"Block","src":"3798:752:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2246,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"3886:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3906:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3898:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2247,"name":"address","nodeType":"ElementaryTypeName","src":"3898:7:7","typeDescriptions":{}}},"id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3898:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3886:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2252,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"3912:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2253,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"3924:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3912:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3886:53:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2256,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"3943:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2259,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3963:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_OwnerManager_$2456","typeString":"contract OwnerManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OwnerManager_$2456","typeString":"contract OwnerManager"}],"id":2258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3955:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2257,"name":"address","nodeType":"ElementaryTypeName","src":"3955:7:7","typeDescriptions":{}}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3955:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3943:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3886:82:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2267,"nodeType":"IfStatement","src":"3882:112:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323033","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3986:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2263,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3970:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3970:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2266,"nodeType":"ExpressionStatement","src":"3970:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2268,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4048:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2270,"indexExpression":{"id":2269,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4055:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4048:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4076:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4068:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2271,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:7","typeDescriptions":{}}},"id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4068:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4048:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2280,"nodeType":"IfStatement","src":"4044:60:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323034","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4096:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""},"value":"GS204"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""}],"id":2276,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"4080:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4080:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2279,"nodeType":"ExpressionStatement","src":"4080:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2281,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4201:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4221:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4213:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"4213:7:7","typeDescriptions":{}}},"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4213:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4201:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4227:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2288,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"4239:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4227:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4201:53:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2295,"nodeType":"IfStatement","src":"4197:83:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323033","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4272:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2291,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"4256:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4256:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2294,"nodeType":"ExpressionStatement","src":"4256:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2296,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4294:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2298,"indexExpression":{"id":2297,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"4301:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4294:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2299,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4315:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4294:29:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2305,"nodeType":"IfStatement","src":"4290:59:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323035","id":2302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4341:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""},"value":"GS205"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""}],"id":2301,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"4325:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4325:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2304,"nodeType":"ExpressionStatement","src":"4325:24:7"}},{"expression":{"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2306,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4359:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2308,"indexExpression":{"id":2307,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4366:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4359:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2309,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4378:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2311,"indexExpression":{"id":2310,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4385:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4378:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4359:35:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2313,"nodeType":"ExpressionStatement","src":"4359:35:7"},{"expression":{"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2314,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4404:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2316,"indexExpression":{"id":2315,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"4411:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4404:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2317,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4424:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4404:28:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2319,"nodeType":"ExpressionStatement","src":"4404:28:7"},{"expression":{"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2320,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"4442:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2322,"indexExpression":{"id":2321,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4449:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4442:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4469:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4461:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2323,"name":"address","nodeType":"ElementaryTypeName","src":"4461:7:7","typeDescriptions":{}}},"id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4461:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4442:29:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2328,"nodeType":"ExpressionStatement","src":"4442:29:7"},{"eventCall":{"arguments":[{"id":2330,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4499:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2329,"name":"RemovedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"4486:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4486:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2332,"nodeType":"EmitStatement","src":"4481:27:7"},{"eventCall":{"arguments":[{"id":2334,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4534:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2333,"name":"AddedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"4523:10:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4523:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2336,"nodeType":"EmitStatement","src":"4518:25:7"}]},"functionSelector":"e318b52b","id":2338,"implemented":true,"kind":"function","modifiers":[{"id":2244,"modifierName":{"id":2243,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"3787:10:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3787:10:7"}],"name":"swapOwner","nodeType":"FunctionDefinition","overrides":{"id":2242,"nodeType":"OverrideSpecifier","overrides":[],"src":"3778:8:7"},"parameters":{"id":2241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2236,"mutability":"mutable","name":"prevOwner","nodeType":"VariableDeclaration","scope":2338,"src":"3716:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2235,"name":"address","nodeType":"ElementaryTypeName","src":"3716:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2238,"mutability":"mutable","name":"oldOwner","nodeType":"VariableDeclaration","scope":2338,"src":"3735:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2237,"name":"address","nodeType":"ElementaryTypeName","src":"3735:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2240,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","scope":2338,"src":"3753:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2239,"name":"address","nodeType":"ElementaryTypeName","src":"3753:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3715:55:7"},"returnParameters":{"id":2245,"nodeType":"ParameterList","parameters":[],"src":"3798:0:7"},"scope":2456,"src":"3697:853:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4041],"body":{"id":2370,"nodeType":"Block","src":"4661:320:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2346,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4744:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2347,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"4757:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4744:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2353,"nodeType":"IfStatement","src":"4740:53:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323031","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4785:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""},"value":"GS201"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""}],"id":2349,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"4769:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4769:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2352,"nodeType":"ExpressionStatement","src":"4769:24:7"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2354,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4859:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4873:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4859:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2361,"nodeType":"IfStatement","src":"4855:45:7","trueBody":{"expression":{"arguments":[{"hexValue":"4753323032","id":2358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4892:7:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""},"value":"GS202"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""}],"id":2357,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"4876:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4876:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2360,"nodeType":"ExpressionStatement","src":"4876:24:7"}},{"expression":{"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2362,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"4910:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2363,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4922:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4910:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2365,"nodeType":"ExpressionStatement","src":"4910:22:7"},{"eventCall":{"arguments":[{"id":2367,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"4964:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2366,"name":"ChangedThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"4947:16:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4947:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2369,"nodeType":"EmitStatement","src":"4942:32:7"}]},"functionSelector":"694e80c3","id":2371,"implemented":true,"kind":"function","modifiers":[{"id":2344,"modifierName":{"id":2343,"name":"authorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"4650:10:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"4650:10:7"}],"name":"changeThreshold","nodeType":"FunctionDefinition","overrides":{"id":2342,"nodeType":"OverrideSpecifier","overrides":[],"src":"4641:8:7"},"parameters":{"id":2341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2340,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":2371,"src":"4614:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"4614:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4613:20:7"},"returnParameters":{"id":2345,"nodeType":"ParameterList","parameters":[],"src":"4661:0:7"},"scope":2456,"src":"4589:392:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4047],"body":{"id":2379,"nodeType":"Block","src":"5083:33:7","statements":[{"expression":{"id":2377,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"5100:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2376,"id":2378,"nodeType":"Return","src":"5093:16:7"}]},"functionSelector":"e75235b8","id":2380,"implemented":true,"kind":"function","modifiers":[],"name":"getThreshold","nodeType":"FunctionDefinition","overrides":{"id":2373,"nodeType":"OverrideSpecifier","overrides":[],"src":"5056:8:7"},"parameters":{"id":2372,"nodeType":"ParameterList","parameters":[],"src":"5041:2:7"},"returnParameters":{"id":2376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2375,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2380,"src":"5074:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2374,"name":"uint256","nodeType":"ElementaryTypeName","src":"5074:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5073:9:7"},"scope":2456,"src":"5020:96:7","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4055],"body":{"id":2403,"nodeType":"Block","src":"5223:82:7","statements":[{"expression":{"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5240:58:7","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2388,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"5242:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2389,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"5251:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5242:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2391,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"5270:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2393,"indexExpression":{"id":2392,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"5277:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5270:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5295:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5287:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2394,"name":"address","nodeType":"ElementaryTypeName","src":"5287:7:7","typeDescriptions":{}}},"id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5287:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"5270:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5242:55:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2400,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5241:57:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2387,"id":2402,"nodeType":"Return","src":"5233:65:7"}]},"functionSelector":"2f54bf6e","id":2404,"implemented":true,"kind":"function","modifiers":[],"name":"isOwner","nodeType":"FunctionDefinition","overrides":{"id":2384,"nodeType":"OverrideSpecifier","overrides":[],"src":"5199:8:7"},"parameters":{"id":2383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":2404,"src":"5172:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2381,"name":"address","nodeType":"ElementaryTypeName","src":"5172:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5171:15:7"},"returnParameters":{"id":2387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2404,"src":"5217:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2385,"name":"bool","nodeType":"ElementaryTypeName","src":"5217:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5216:6:7"},"scope":2456,"src":"5155:150:7","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4062],"body":{"id":2454,"nodeType":"Block","src":"5413:377:7","statements":[{"assignments":[2415],"declarations":[{"constant":false,"id":2415,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":2454,"src":"5423:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2413,"name":"address","nodeType":"ElementaryTypeName","src":"5423:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2414,"nodeType":"ArrayTypeName","src":"5423:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":2421,"initialValue":{"arguments":[{"id":2419,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"5462:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5448:13:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":2416,"name":"address","nodeType":"ElementaryTypeName","src":"5452:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2417,"nodeType":"ArrayTypeName","src":"5452:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5448:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5423:50:7"},{"assignments":[2423],"declarations":[{"constant":false,"id":2423,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":2454,"src":"5517:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2422,"name":"uint256","nodeType":"ElementaryTypeName","src":"5517:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2425,"initialValue":{"hexValue":"30","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5533:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5517:17:7"},{"assignments":[2427],"declarations":[{"constant":false,"id":2427,"mutability":"mutable","name":"currentOwner","nodeType":"VariableDeclaration","scope":2454,"src":"5544:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2426,"name":"address","nodeType":"ElementaryTypeName","src":"5544:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2431,"initialValue":{"baseExpression":{"id":2428,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"5567:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2430,"indexExpression":{"id":2429,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"5574:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5567:23:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5544:46:7"},{"body":{"id":2450,"nodeType":"Block","src":"5640:122:7","statements":[{"expression":{"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2435,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"5654:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2437,"indexExpression":{"id":2436,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"5660:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5654:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2438,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"5669:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5654:27:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2440,"nodeType":"ExpressionStatement","src":"5654:27:7"},{"expression":{"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2441,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"5695:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2442,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"5710:6:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2444,"indexExpression":{"id":2443,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"5717:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5710:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5695:35:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2446,"nodeType":"ExpressionStatement","src":"5695:35:7"},{"expression":{"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5744:7:7","subExpression":{"id":2447,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"5744:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2449,"nodeType":"ExpressionStatement","src":"5744:7:7"}]},"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2432,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"5607:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2433,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"5623:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5607:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2451,"nodeType":"WhileStatement","src":"5600:162:7"},{"expression":{"id":2452,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"5778:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":2410,"id":2453,"nodeType":"Return","src":"5771:12:7"}]},"functionSelector":"a0e67e2b","id":2455,"implemented":true,"kind":"function","modifiers":[],"name":"getOwners","nodeType":"FunctionDefinition","overrides":{"id":2406,"nodeType":"OverrideSpecifier","overrides":[],"src":"5377:8:7"},"parameters":{"id":2405,"nodeType":"ParameterList","parameters":[],"src":"5362:2:7"},"returnParameters":{"id":2410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2409,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2455,"src":"5395:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2407,"name":"address","nodeType":"ElementaryTypeName","src":"5395:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2408,"nodeType":"ArrayTypeName","src":"5395:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"5394:18:7"},"scope":2456,"src":"5344:446:7","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":2457,"src":"525:5267:7"}],"src":"42:5751:7"},"id":7},"contracts/common/NativeCurrencyPaymentFallback.sol":{"ast":{"absolutePath":"contracts/common/NativeCurrencyPaymentFallback.sol","exportedSymbols":{"NativeCurrencyPaymentFallback":[2478]},"id":2479,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2458,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:8"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2459,"nodeType":"StructuredDocumentation","src":"75:157:8","text":" @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2478,"linearizedBaseContracts":[2478],"name":"NativeCurrencyPaymentFallback","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":2465,"name":"SafeReceived","nodeType":"EventDefinition","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2461,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":2465,"src":"306:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2460,"name":"address","nodeType":"ElementaryTypeName","src":"306:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2463,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2465,"src":"330:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"330:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"305:39:8"},"src":"287:58:8"},{"body":{"id":2476,"nodeType":"Block","src":"523:57:8","statements":[{"eventCall":{"arguments":[{"expression":{"id":2470,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"551:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"551:10:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":2472,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"563:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"563:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2469,"name":"SafeReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"538:12:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"538:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2475,"nodeType":"EmitStatement","src":"533:40:8"}]},"documentation":{"id":2466,"nodeType":"StructuredDocumentation","src":"351:140:8","text":" @notice Receive function accepts native currency transactions.\n @dev Emits an event with sender and received value."},"id":2477,"implemented":true,"kind":"receive","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2467,"nodeType":"ParameterList","parameters":[],"src":"503:2:8"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[],"src":"523:0:8"},"scope":2478,"src":"496:84:8","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2479,"src":"233:349:8"}],"src":"42:541:8"},"id":8},"contracts/common/SecuredTokenTransfer.sol":{"ast":{"absolutePath":"contracts/common/SecuredTokenTransfer.sol","exportedSymbols":{"SecuredTokenTransfer":[2505]},"id":2506,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2480,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:9"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2481,"nodeType":"StructuredDocumentation","src":"75:104:9","text":" @title SecuredTokenTransfer - Secure token transfer.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2505,"linearizedBaseContracts":[2505],"name":"SecuredTokenTransfer","nodeType":"ContractDefinition","nodes":[{"body":{"id":2503,"nodeType":"Block","src":"871:880:9","statements":[{"assignments":[2494],"declarations":[{"constant":false,"id":2494,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2503,"src":"942:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2493,"name":"bytes","nodeType":"ElementaryTypeName","src":"942:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2501,"initialValue":{"arguments":[{"hexValue":"30786139303539636262","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"985:10:9","typeDescriptions":{"typeIdentifier":"t_rational_2835717307_by_1","typeString":"int_const 2835717307"},"value":"0xa9059cbb"},{"id":2498,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"997:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2499,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"1007:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2835717307_by_1","typeString":"int_const 2835717307"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2495,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"962:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"962:22:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"962:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"942:72:9"},{"AST":{"nodeType":"YulBlock","src":"1125:572:9","statements":[{"nodeType":"YulVariableDeclaration","src":"1306:87:9","value":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"1330:3:9"},"nodeType":"YulFunctionCall","src":"1330:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"1337:5:9","type":"","value":"10000"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1326:3:9"},"nodeType":"YulFunctionCall","src":"1326:17:9"},{"name":"token","nodeType":"YulIdentifier","src":"1345:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"1352:1:9","type":"","value":"0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1359:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"1365:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1355:3:9"},"nodeType":"YulFunctionCall","src":"1355:15:9"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1378:4:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1372:5:9"},"nodeType":"YulFunctionCall","src":"1372:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"1385:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1388:4:9","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"1321:4:9"},"nodeType":"YulFunctionCall","src":"1321:72:9"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"1310:7:9","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1449:54:9","statements":[{"nodeType":"YulAssignment","src":"1467:22:9","value":{"name":"success","nodeType":"YulIdentifier","src":"1482:7:9"},"variableNames":[{"name":"transferred","nodeType":"YulIdentifier","src":"1467:11:9"}]}]},"nodeType":"YulCase","src":"1442:61:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1447:1:9","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"1526:92:9","statements":[{"nodeType":"YulAssignment","src":"1544:60:9","value":{"arguments":[{"arguments":[{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"1576:7:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1569:6:9"},"nodeType":"YulFunctionCall","src":"1569:15:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1599:1:9","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1593:5:9"},"nodeType":"YulFunctionCall","src":"1593:8:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1586:6:9"},"nodeType":"YulFunctionCall","src":"1586:16:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1566:2:9"},"nodeType":"YulFunctionCall","src":"1566:37:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1559:6:9"},"nodeType":"YulFunctionCall","src":"1559:45:9"},"variableNames":[{"name":"transferred","nodeType":"YulIdentifier","src":"1544:11:9"}]}]},"nodeType":"YulCase","src":"1516:102:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1521:4:9","type":"","value":"0x20"}},{"body":{"nodeType":"YulBlock","src":"1639:48:9","statements":[{"nodeType":"YulAssignment","src":"1657:16:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1672:1:9","type":"","value":"0"},"variableNames":[{"name":"transferred","nodeType":"YulIdentifier","src":"1657:11:9"}]}]},"nodeType":"YulCase","src":"1631:56:9","value":"default"}],"expression":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1413:14:9"},"nodeType":"YulFunctionCall","src":"1413:16:9"},"nodeType":"YulSwitch","src":"1406:281:9"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2494,"isOffset":false,"isSlot":false,"src":"1359:4:9","valueSize":1},{"declaration":2494,"isOffset":false,"isSlot":false,"src":"1378:4:9","valueSize":1},{"declaration":2484,"isOffset":false,"isSlot":false,"src":"1345:5:9","valueSize":1},{"declaration":2491,"isOffset":false,"isSlot":false,"src":"1467:11:9","valueSize":1},{"declaration":2491,"isOffset":false,"isSlot":false,"src":"1544:11:9","valueSize":1},{"declaration":2491,"isOffset":false,"isSlot":false,"src":"1657:11:9","valueSize":1}],"id":2502,"nodeType":"InlineAssembly","src":"1116:581:9"}]},"documentation":{"id":2482,"nodeType":"StructuredDocumentation","src":"225:533:9","text":" @notice Transfers a token and returns a boolean if it was a success\n @dev It checks the return data of the transfer call and returns true if the transfer was successful.\n      It doesn't check if the `token` address is a contract or not.\n @param token Token that should be transferred\n @param receiver Receiver to whom the token should be transferred\n @param amount The amount of tokens that should be transferred\n @return transferred Returns true if the transfer was successful"},"id":2504,"implemented":true,"kind":"function","modifiers":[],"name":"transferToken","nodeType":"FunctionDefinition","parameters":{"id":2489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2484,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":2504,"src":"786:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2483,"name":"address","nodeType":"ElementaryTypeName","src":"786:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2486,"mutability":"mutable","name":"receiver","nodeType":"VariableDeclaration","scope":2504,"src":"801:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2485,"name":"address","nodeType":"ElementaryTypeName","src":"801:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2488,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":2504,"src":"819:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2487,"name":"uint256","nodeType":"ElementaryTypeName","src":"819:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"785:49:9"},"returnParameters":{"id":2492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2491,"mutability":"mutable","name":"transferred","nodeType":"VariableDeclaration","scope":2504,"src":"853:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2490,"name":"bool","nodeType":"ElementaryTypeName","src":"853:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"852:18:9"},"scope":2505,"src":"763:988:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2506,"src":"180:1573:9"}],"src":"42:1712:9"},"id":9},"contracts/common/SelfAuthorized.sol":{"ast":{"absolutePath":"contracts/common/SelfAuthorized.sol","exportedSymbols":{"ErrorMessage":[4299],"SelfAuthorized":[2536]},"id":2537,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2507,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:10"},{"absolutePath":"contracts/libraries/ErrorMessage.sol","file":"../libraries/ErrorMessage.sol","id":2509,"nodeType":"ImportDirective","scope":2537,"sourceUnit":4300,"src":"75:59:10","symbolAliases":[{"foreign":{"id":2508,"name":"ErrorMessage","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:12:10","typeDescriptions":{}}}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2511,"name":"ErrorMessage","nodeType":"UserDefinedTypeName","referencedDeclaration":4299,"src":"306:12:10","typeDescriptions":{"typeIdentifier":"t_contract$_ErrorMessage_$4299","typeString":"contract ErrorMessage"}},"id":2512,"nodeType":"InheritanceSpecifier","src":"306:12:10"}],"contractDependencies":[4299],"contractKind":"contract","documentation":{"id":2510,"nodeType":"StructuredDocumentation","src":"136:133:10","text":" @title SelfAuthorized - Authorizes current contract to perform actions to itself.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2536,"linearizedBaseContracts":[2536,4299],"name":"SelfAuthorized","nodeType":"ContractDefinition","nodes":[{"body":{"id":2527,"nodeType":"Block","src":"365:74:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2515,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"379:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"379:10:10","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2519,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"401:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SelfAuthorized_$2536","typeString":"contract SelfAuthorized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SelfAuthorized_$2536","typeString":"contract SelfAuthorized"}],"id":2518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"393:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2517,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:10","typeDescriptions":{}}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"393:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"379:27:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2526,"nodeType":"IfStatement","src":"375:57:10","trueBody":{"expression":{"arguments":[{"hexValue":"4753303331","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"424:7:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_b7248be3e8887f14d79f63d350787adcdb5e12b47898ebd6ef2aacf660fc9f17","typeString":"literal_string \"GS031\""},"value":"GS031"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b7248be3e8887f14d79f63d350787adcdb5e12b47898ebd6ef2aacf660fc9f17","typeString":"literal_string \"GS031\""}],"id":2522,"name":"revertWithError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"408:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes5_$returns$__$","typeString":"function (bytes5) pure"}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"408:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2525,"nodeType":"ExpressionStatement","src":"408:24:10"}}]},"id":2528,"implemented":true,"kind":"function","modifiers":[],"name":"requireSelfCall","nodeType":"FunctionDefinition","parameters":{"id":2513,"nodeType":"ParameterList","parameters":[],"src":"349:2:10"},"returnParameters":{"id":2514,"nodeType":"ParameterList","parameters":[],"src":"365:0:10"},"scope":2536,"src":"325:114:10","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2534,"nodeType":"Block","src":"467:162:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2530,"name":"requireSelfCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"594:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"594:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2532,"nodeType":"ExpressionStatement","src":"594:17:10"},{"id":2533,"nodeType":"PlaceholderStatement","src":"621:1:10"}]},"id":2535,"name":"authorized","nodeType":"ModifierDefinition","parameters":{"id":2529,"nodeType":"ParameterList","parameters":[],"src":"464:2:10"},"src":"445:184:10","virtual":false,"visibility":"internal"}],"scope":2537,"src":"270:361:10"}],"src":"42:590:10"},"id":10},"contracts/common/SignatureDecoder.sol":{"ast":{"absolutePath":"contracts/common/SignatureDecoder.sol","exportedSymbols":{"SignatureDecoder":[2556]},"id":2557,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2538,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:11"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2539,"nodeType":"StructuredDocumentation","src":"75:113:11","text":" @title SignatureDecoder - Decodes signatures encoded as bytes\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2556,"linearizedBaseContracts":[2556],"name":"SignatureDecoder","nodeType":"ContractDefinition","nodes":[{"body":{"id":2554,"nodeType":"Block","src":"1063:427:11","statements":[{"AST":{"nodeType":"YulBlock","src":"1174:262:11","statements":[{"nodeType":"YulVariableDeclaration","src":"1188:34:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1212:4:11","type":"","value":"0x41"},{"name":"pos","nodeType":"YulIdentifier","src":"1218:3:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1208:3:11"},"nodeType":"YulFunctionCall","src":"1208:14:11"},"variables":[{"name":"signaturePos","nodeType":"YulTypedName","src":"1192:12:11","type":""}]},{"nodeType":"YulAssignment","src":"1235:52:11","value":{"arguments":[{"arguments":[{"name":"signatures","nodeType":"YulIdentifier","src":"1250:10:11"},{"arguments":[{"name":"signaturePos","nodeType":"YulIdentifier","src":"1266:12:11"},{"kind":"number","nodeType":"YulLiteral","src":"1280:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1262:3:11"},"nodeType":"YulFunctionCall","src":"1262:23:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1246:3:11"},"nodeType":"YulFunctionCall","src":"1246:40:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1240:5:11"},"nodeType":"YulFunctionCall","src":"1240:47:11"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"1235:1:11"}]},{"nodeType":"YulAssignment","src":"1300:52:11","value":{"arguments":[{"arguments":[{"name":"signatures","nodeType":"YulIdentifier","src":"1315:10:11"},{"arguments":[{"name":"signaturePos","nodeType":"YulIdentifier","src":"1331:12:11"},{"kind":"number","nodeType":"YulLiteral","src":"1345:4:11","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1327:3:11"},"nodeType":"YulFunctionCall","src":"1327:23:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:11"},"nodeType":"YulFunctionCall","src":"1311:40:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1305:5:11"},"nodeType":"YulFunctionCall","src":"1305:47:11"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"1300:1:11"}]},{"nodeType":"YulAssignment","src":"1365:61:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1375:1:11","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signatures","nodeType":"YulIdentifier","src":"1388:10:11"},{"arguments":[{"name":"signaturePos","nodeType":"YulIdentifier","src":"1404:12:11"},{"kind":"number","nodeType":"YulLiteral","src":"1418:4:11","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1400:3:11"},"nodeType":"YulFunctionCall","src":"1400:23:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1384:3:11"},"nodeType":"YulFunctionCall","src":"1384:40:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1378:5:11"},"nodeType":"YulFunctionCall","src":"1378:47:11"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1370:4:11"},"nodeType":"YulFunctionCall","src":"1370:56:11"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"1365:1:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2544,"isOffset":false,"isSlot":false,"src":"1218:3:11","valueSize":1},{"declaration":2549,"isOffset":false,"isSlot":false,"src":"1235:1:11","valueSize":1},{"declaration":2551,"isOffset":false,"isSlot":false,"src":"1300:1:11","valueSize":1},{"declaration":2542,"isOffset":false,"isSlot":false,"src":"1250:10:11","valueSize":1},{"declaration":2542,"isOffset":false,"isSlot":false,"src":"1315:10:11","valueSize":1},{"declaration":2542,"isOffset":false,"isSlot":false,"src":"1388:10:11","valueSize":1},{"declaration":2547,"isOffset":false,"isSlot":false,"src":"1365:1:11","valueSize":1}],"id":2553,"nodeType":"InlineAssembly","src":"1165:271:11"}]},"documentation":{"id":2540,"nodeType":"StructuredDocumentation","src":"230:712:11","text":" @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\n @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\n      Compact means uint8 is not padded to 32 bytes.\n @param pos Which signature to read.\n            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\n @param signatures Concatenated {r, s, v} signatures.\n @return v Recovery ID or Safe signature type.\n @return r Output value r of the signature.\n @return s Output value s of the signature."},"id":2555,"implemented":true,"kind":"function","modifiers":[],"name":"signatureSplit","nodeType":"FunctionDefinition","parameters":{"id":2545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":2555,"src":"971:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2541,"name":"bytes","nodeType":"ElementaryTypeName","src":"971:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2544,"mutability":"mutable","name":"pos","nodeType":"VariableDeclaration","scope":2555,"src":"996:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"996:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:38:11"},"returnParameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","scope":2555,"src":"1032:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2546,"name":"uint8","nodeType":"ElementaryTypeName","src":"1032:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2549,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":2555,"src":"1041:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1041:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":2555,"src":"1052:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1052:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1031:31:11"},"scope":2556,"src":"947:543:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2557,"src":"189:1303:11"}],"src":"42:1451:11"},"id":11},"contracts/common/Singleton.sol":{"ast":{"absolutePath":"contracts/common/Singleton.sol","exportedSymbols":{"Singleton":[2562]},"id":2563,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2558,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:12"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2559,"nodeType":"StructuredDocumentation","src":"75:238:12","text":" @title Singleton - Base for singleton contracts (should always be the first super contract)\n        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2562,"linearizedBaseContracts":[2562],"name":"Singleton","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2561,"mutability":"mutable","name":"singleton","nodeType":"VariableDeclaration","scope":2562,"src":"551:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2560,"name":"address","nodeType":"ElementaryTypeName","src":"551:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"}],"scope":2563,"src":"314:265:12"}],"src":"42:538:12"},"id":12},"contracts/common/StorageAccessible.sol":{"ast":{"absolutePath":"contracts/common/StorageAccessible.sol","exportedSymbols":{"StorageAccessible":[2611]},"id":2612,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2564,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:13"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2565,"nodeType":"StructuredDocumentation","src":"75:383:13","text":" @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\n @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n         It removes a method from the original contract not needed for the Safe Smart Account contracts.\n @author Gnosis Developers"},"fullyImplemented":true,"id":2611,"linearizedBaseContracts":[2611],"name":"StorageAccessible","nodeType":"ContractDefinition","nodes":[{"body":{"id":2599,"nodeType":"Block","src":"888:467:13","statements":[{"assignments":[2576],"declarations":[{"constant":false,"id":2576,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","scope":2599,"src":"898:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2575,"name":"bytes","nodeType":"ElementaryTypeName","src":"898:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2583,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2579,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"930:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3332","id":2580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"939:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"930:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"920:9:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2577,"name":"bytes","nodeType":"ElementaryTypeName","src":"924:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"920:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"898:44:13"},{"body":{"id":2595,"nodeType":"Block","src":"1001:325:13","statements":[{"AST":{"nodeType":"YulBlock","src":"1124:140:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1142:37:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1164:6:13"},{"name":"index","nodeType":"YulIdentifier","src":"1172:5:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1160:3:13"},"nodeType":"YulFunctionCall","src":"1160:18:13"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1154:5:13"},"nodeType":"YulFunctionCall","src":"1154:25:13"},"variables":[{"name":"word","nodeType":"YulTypedName","src":"1146:4:13","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1211:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"1219:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1207:3:13"},"nodeType":"YulFunctionCall","src":"1207:17:13"},{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"1230:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"1237:4:13","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1226:3:13"},"nodeType":"YulFunctionCall","src":"1226:16:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1203:3:13"},"nodeType":"YulFunctionCall","src":"1203:40:13"},{"name":"word","nodeType":"YulIdentifier","src":"1245:4:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1196:6:13"},"nodeType":"YulFunctionCall","src":"1196:54:13"},"nodeType":"YulExpressionStatement","src":"1196:54:13"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2585,"isOffset":false,"isSlot":false,"src":"1172:5:13","valueSize":1},{"declaration":2585,"isOffset":false,"isSlot":false,"src":"1230:5:13","valueSize":1},{"declaration":2568,"isOffset":false,"isSlot":false,"src":"1164:6:13","valueSize":1},{"declaration":2576,"isOffset":false,"isSlot":false,"src":"1211:6:13","valueSize":1}],"id":2594,"nodeType":"InlineAssembly","src":"1115:149:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"976:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2589,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"984:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"976:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2596,"initializationExpression":{"assignments":[2585],"declarations":[{"constant":false,"id":2585,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":2596,"src":"957:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2584,"name":"uint256","nodeType":"ElementaryTypeName","src":"957:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2587,"initialValue":{"hexValue":"30","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"973:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"957:17:13"},"loopExpression":{"expression":{"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"992:7:13","subExpression":{"id":2591,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"992:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2593,"nodeType":"ExpressionStatement","src":"992:7:13"},"nodeType":"ForStatement","src":"952:374:13"},{"expression":{"id":2597,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"1342:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2574,"id":2598,"nodeType":"Return","src":"1335:13:13"}]},"documentation":{"id":2566,"nodeType":"StructuredDocumentation","src":"501:293:13","text":" @notice Reads `length` bytes of storage in the currents contract\n @param offset - the offset in the current contract's storage in words to start reading from\n @param length - the number of words (32 bytes) of data to read\n @return the bytes that were read."},"functionSelector":"5624b25b","id":2600,"implemented":true,"kind":"function","modifiers":[],"name":"getStorageAt","nodeType":"FunctionDefinition","parameters":{"id":2571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2568,"mutability":"mutable","name":"offset","nodeType":"VariableDeclaration","scope":2600,"src":"821:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2567,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2570,"mutability":"mutable","name":"length","nodeType":"VariableDeclaration","scope":2600,"src":"837:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2569,"name":"uint256","nodeType":"ElementaryTypeName","src":"837:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:32:13"},"returnParameters":{"id":2574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2573,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2600,"src":"874:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2572,"name":"bytes","nodeType":"ElementaryTypeName","src":"874:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"873:14:13"},"scope":2611,"src":"799:556:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2609,"nodeType":"Block","src":"2078:576:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2189:411:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2203:108:13","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"2231:3:13"},"nodeType":"YulFunctionCall","src":"2231:5:13"},{"name":"targetContract","nodeType":"YulIdentifier","src":"2238:14:13"},{"arguments":[{"name":"calldataPayload","nodeType":"YulIdentifier","src":"2258:15:13"},{"kind":"number","nodeType":"YulLiteral","src":"2275:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2254:3:13"},"nodeType":"YulFunctionCall","src":"2254:26:13"},{"arguments":[{"name":"calldataPayload","nodeType":"YulIdentifier","src":"2288:15:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2282:5:13"},"nodeType":"YulFunctionCall","src":"2282:22:13"},{"kind":"number","nodeType":"YulLiteral","src":"2306:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2309:1:13","type":"","value":"0"}],"functionName":{"name":"delegatecall","nodeType":"YulIdentifier","src":"2218:12:13"},"nodeType":"YulFunctionCall","src":"2218:93:13"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"2207:7:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2365:22:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2382:4:13","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2376:5:13"},"nodeType":"YulFunctionCall","src":"2376:11:13"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"2369:3:13","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2407:3:13"},{"name":"success","nodeType":"YulIdentifier","src":"2412:7:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2400:6:13"},"nodeType":"YulFunctionCall","src":"2400:20:13"},"nodeType":"YulExpressionStatement","src":"2400:20:13"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2444:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"2449:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:13"},"nodeType":"YulFunctionCall","src":"2440:14:13"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2456:14:13"},"nodeType":"YulFunctionCall","src":"2456:16:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2433:6:13"},"nodeType":"YulFunctionCall","src":"2433:40:13"},"nodeType":"YulExpressionStatement","src":"2433:40:13"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2505:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"2510:4:13","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2501:3:13"},"nodeType":"YulFunctionCall","src":"2501:14:13"},{"kind":"number","nodeType":"YulLiteral","src":"2517:1:13","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2520:14:13"},"nodeType":"YulFunctionCall","src":"2520:16:13"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"2486:14:13"},"nodeType":"YulFunctionCall","src":"2486:51:13"},"nodeType":"YulExpressionStatement","src":"2486:51:13"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2557:3:13"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2566:14:13"},"nodeType":"YulFunctionCall","src":"2566:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"2584:4:13","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2562:3:13"},"nodeType":"YulFunctionCall","src":"2562:27:13"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2550:6:13"},"nodeType":"YulFunctionCall","src":"2550:40:13"},"nodeType":"YulExpressionStatement","src":"2550:40:13"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2605,"isOffset":false,"isSlot":false,"src":"2258:15:13","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"2288:15:13","valueSize":1},{"declaration":2603,"isOffset":false,"isSlot":false,"src":"2238:14:13","valueSize":1}],"id":2608,"nodeType":"InlineAssembly","src":"2180:420:13"}]},"documentation":{"id":2601,"nodeType":"StructuredDocumentation","src":"1361:622:13","text":" @dev Performs a delegatecall on a targetContract in the context of self.\n Internally reverts execution to avoid side effects (making it static).\n This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n Specifically, the `returndata` after a call to this method will be:\n `success:bool || response.length:uint256 || response:bytes`.\n @param targetContract Address of the contract containing the code to execute.\n @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments)."},"functionSelector":"b4faba09","id":2610,"implemented":true,"kind":"function","modifiers":[],"name":"simulateAndRevert","nodeType":"FunctionDefinition","parameters":{"id":2606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2603,"mutability":"mutable","name":"targetContract","nodeType":"VariableDeclaration","scope":2610,"src":"2015:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2602,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2605,"mutability":"mutable","name":"calldataPayload","nodeType":"VariableDeclaration","scope":2610,"src":"2039:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2604,"name":"bytes","nodeType":"ElementaryTypeName","src":"2039:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2014:54:13"},"returnParameters":{"id":2607,"nodeType":"ParameterList","parameters":[],"src":"2078:0:13"},"scope":2611,"src":"1988:666:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2612,"src":"459:2197:13"}],"src":"42:2615:13"},"id":13},"contracts/examples/guards/DebugTransactionGuard.sol":{"ast":{"absolutePath":"contracts/examples/guards/DebugTransactionGuard.sol","exportedSymbols":{"BaseGuard":[1337],"DebugTransactionGuard":[2848],"Enum":[4287],"ISafe":[4261]},"id":2849,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2613,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:14"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../../libraries/Enum.sol","id":2615,"nodeType":"ImportDirective","scope":2849,"sourceUnit":4288,"src":"75:46:14","symbolAliases":[{"foreign":{"id":2614,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:4:14","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/GuardManager.sol","file":"../../base/GuardManager.sol","id":2617,"nodeType":"ImportDirective","scope":2849,"sourceUnit":1391,"src":"122:54:14","symbolAliases":[{"foreign":{"id":2616,"name":"BaseGuard","nodeType":"Identifier","overloadedDeclarations":[],"src":"130:9:14","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../../interfaces/ISafe.sol","id":2619,"nodeType":"ImportDirective","scope":2849,"sourceUnit":4262,"src":"177:49:14","symbolAliases":[{"foreign":{"id":2618,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"185:5:14","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2621,"name":"BaseGuard","nodeType":"UserDefinedTypeName","referencedDeclaration":1337,"src":"466:9:14","typeDescriptions":{"typeIdentifier":"t_contract$_BaseGuard_$1337","typeString":"contract BaseGuard"}},"id":2622,"nodeType":"InheritanceSpecifier","src":"466:9:14"}],"contractDependencies":[1311,1337,3873],"contractKind":"contract","documentation":{"id":2620,"nodeType":"StructuredDocumentation","src":"228:203:14","text":" @title Debug Transaction Guard - Emits transaction events with extended information.\n @dev This guard is only meant as a development tool and example\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2848,"linearizedBaseContracts":[2848,1337,1311,3873],"name":"DebugTransactionGuard","nodeType":"ContractDefinition","nodes":[{"body":{"id":2625,"nodeType":"Block","src":"552:178:14","statements":[]},"id":2626,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2623,"nodeType":"ParameterList","parameters":[],"src":"540:2:14"},"returnParameters":{"id":2624,"nodeType":"ParameterList","parameters":[],"src":"552:0:14"},"scope":2848,"src":"532:198:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"id":2650,"name":"TransactionDetails","nodeType":"EventDefinition","parameters":{"id":2649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2628,"indexed":true,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":2650,"src":"770:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2627,"name":"address","nodeType":"ElementaryTypeName","src":"770:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2630,"indexed":true,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":2650,"src":"800:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"800:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2632,"indexed":false,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2650,"src":"832:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2631,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2634,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2650,"src":"852:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2633,"name":"uint256","nodeType":"ElementaryTypeName","src":"852:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2636,"indexed":false,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2650,"src":"875:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2635,"name":"bytes","nodeType":"ElementaryTypeName","src":"875:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2638,"indexed":false,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":2650,"src":"895:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":2637,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"895:14:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":2640,"indexed":false,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":2650,"src":"929:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"929:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2642,"indexed":false,"mutability":"mutable","name":"usesRefund","nodeType":"VariableDeclaration","scope":2650,"src":"956:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2641,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2644,"indexed":false,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":2650,"src":"981:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"981:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2646,"indexed":false,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":2650,"src":"1004:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2645,"name":"bytes","nodeType":"ElementaryTypeName","src":"1004:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2648,"indexed":false,"mutability":"mutable","name":"executor","nodeType":"VariableDeclaration","scope":2650,"src":"1030:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2647,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"760:292:14"},"src":"736:317:14"},{"anonymous":false,"id":2664,"name":"ModuleTransasctionDetails","nodeType":"EventDefinition","parameters":{"id":2663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2652,"indexed":true,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":2664,"src":"1100:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1100:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2654,"indexed":false,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2664,"src":"1132:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2653,"name":"address","nodeType":"ElementaryTypeName","src":"1132:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2656,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2664,"src":"1152:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2655,"name":"uint256","nodeType":"ElementaryTypeName","src":"1152:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2658,"indexed":false,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2664,"src":"1175:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2657,"name":"bytes","nodeType":"ElementaryTypeName","src":"1175:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2660,"indexed":false,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":2664,"src":"1195:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":2659,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1195:14:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":2662,"indexed":false,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":2664,"src":"1229:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2661,"name":"address","nodeType":"ElementaryTypeName","src":"1229:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1090:159:14"},"src":"1059:191:14"},{"anonymous":false,"id":2674,"name":"GasUsage","nodeType":"EventDefinition","parameters":{"id":2673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2666,"indexed":true,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":2674,"src":"1271:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2665,"name":"address","nodeType":"ElementaryTypeName","src":"1271:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2668,"indexed":true,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":2674,"src":"1293:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1293:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2670,"indexed":true,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":2674,"src":"1317:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1317:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2672,"indexed":false,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":2674,"src":"1340:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2671,"name":"bool","nodeType":"ElementaryTypeName","src":"1340:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1270:83:14"},"src":"1256:98:14"},{"constant":false,"functionSelector":"ddbdba63","id":2678,"mutability":"mutable","name":"txNonces","nodeType":"VariableDeclaration","scope":2848,"src":"1360:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":2677,"keyType":{"id":2675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1368:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1360:27:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":2676,"name":"uint256","nodeType":"ElementaryTypeName","src":"1379:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"baseFunctions":[1286],"body":{"id":2769,"nodeType":"Block","src":"2844:471:14","statements":[{"assignments":[2706],"declarations":[{"constant":false,"id":2706,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":2769,"src":"2854:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"2854:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2707,"nodeType":"VariableDeclarationStatement","src":"2854:13:14"},{"assignments":[2709],"declarations":[{"constant":false,"id":2709,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":2769,"src":"2877:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2708,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2710,"nodeType":"VariableDeclarationStatement","src":"2877:14:14"},{"id":2745,"nodeType":"Block","src":"2901:239:14","statements":[{"assignments":[2712],"declarations":[{"constant":false,"id":2712,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":2745,"src":"2915:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},"typeName":{"id":2711,"name":"ISafe","nodeType":"UserDefinedTypeName","referencedDeclaration":4261,"src":"2915:5:14","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"visibility":"internal"}],"id":2720,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":2716,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2942:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2942:10:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2934:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2714,"name":"address","nodeType":"ElementaryTypeName","src":"2934:8:14","stateMutability":"payable","typeDescriptions":{}}},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2934:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2713,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"2928:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2928:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"nodeType":"VariableDeclarationStatement","src":"2915:39:14"},{"expression":{"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2721,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"2968:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2722,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"2976:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":4242,"src":"2976:10:14","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2976:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2991:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2976:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2968:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2728,"nodeType":"ExpressionStatement","src":"2968:24:14"},{"expression":{"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2729,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"3006:6:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2732,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"3039:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"3043:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2734,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"3050:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2735,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"3056:9:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":2736,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"3067:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2737,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"3078:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2738,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"3087:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2739,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"3097:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2740,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"3107:14:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2741,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"3123:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2730,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"3015:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getTransactionHash","nodeType":"MemberAccess","referencedDeclaration":4230,"src":"3015:23:14","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256,uint256,uint256,address,address,uint256) view external returns (bytes32)"}},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3015:114:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3006:123:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2744,"nodeType":"ExpressionStatement","src":"3006:123:14"}]},{"eventCall":{"arguments":[{"expression":{"id":2747,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3173:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3173:10:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2749,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"3185:6:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2750,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"3193:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2751,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"3197:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2752,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"3204:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2753,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"3210:9:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":2754,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"3221:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2755,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"3232:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3243:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3232:12:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2758,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"3246:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2759,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"3253:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2760,"name":"executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"3265:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2746,"name":"TransactionDetails","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"3154:18:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_bool_$_t_uint256_$_t_bytes_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,bytes32,address,uint256,bytes memory,enum Enum.Operation,uint256,bool,uint256,bytes memory,address)"}},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3154:120:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2762,"nodeType":"EmitStatement","src":"3149:125:14"},{"expression":{"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2763,"name":"txNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"3284:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2765,"indexExpression":{"id":2764,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"3293:6:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3284:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2766,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"3303:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3284:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2768,"nodeType":"ExpressionStatement","src":"3284:24:14"}]},"documentation":{"id":2679,"nodeType":"StructuredDocumentation","src":"1410:1020:14","text":" @notice Called by the Safe contract before a transaction is executed.\n @param to Destination address of Safe transaction.\n @param value Ether value of Safe transaction.\n @param data Data payload of Safe transaction.\n @param operation Operation type of Safe transaction.\n @param safeTxGas Gas that should be used for the Safe transaction.\n @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)\n @param gasPrice Gas price that should be used for the payment calculation.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n @param signatures Signature data that should be verified. Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n @param executor Account executing the transaction."},"functionSelector":"75f0bb52","id":2770,"implemented":true,"kind":"function","modifiers":[],"name":"checkTransaction","nodeType":"FunctionDefinition","overrides":{"id":2703,"nodeType":"OverrideSpecifier","overrides":[],"src":"2835:8:14"},"parameters":{"id":2702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2681,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2770,"src":"2470:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2680,"name":"address","nodeType":"ElementaryTypeName","src":"2470:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2683,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2770,"src":"2490:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2682,"name":"uint256","nodeType":"ElementaryTypeName","src":"2490:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2685,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2770,"src":"2513:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2684,"name":"bytes","nodeType":"ElementaryTypeName","src":"2513:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2687,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":2770,"src":"2540:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":2686,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2540:14:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":2689,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":2770,"src":"2574:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"2574:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2691,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":2770,"src":"2601:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2693,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":2770,"src":"2626:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2692,"name":"uint256","nodeType":"ElementaryTypeName","src":"2626:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2695,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":2770,"src":"2652:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2694,"name":"address","nodeType":"ElementaryTypeName","src":"2652:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2697,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":2770,"src":"2730:30:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2696,"name":"address","nodeType":"ElementaryTypeName","src":"2730:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2699,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":2770,"src":"2770:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2698,"name":"bytes","nodeType":"ElementaryTypeName","src":"2770:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2701,"mutability":"mutable","name":"executor","nodeType":"VariableDeclaration","scope":2770,"src":"2803:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2700,"name":"address","nodeType":"ElementaryTypeName","src":"2803:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:365:14"},"returnParameters":{"id":2704,"nodeType":"ParameterList","parameters":[],"src":"2844:0:14"},"scope":2848,"src":"2435:880:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1310],"body":{"id":2806,"nodeType":"Block","src":"3607:190:14","statements":[{"assignments":[2780],"declarations":[{"constant":false,"id":2780,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":2806,"src":"3617:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2779,"name":"uint256","nodeType":"ElementaryTypeName","src":"3617:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2784,"initialValue":{"baseExpression":{"id":2781,"name":"txNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"3633:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2783,"indexExpression":{"id":2782,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"3642:6:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3633:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3617:32:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2786,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"3667:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3676:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3667:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756c64206e6f7420676574206e6f6e6365","id":2789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3679:21:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_4465555eb326d80dfbea9df4f78d5b38cf118b91fac359478b4073ba30ef3f2d","typeString":"literal_string \"Could not get nonce\""},"value":"Could not get nonce"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4465555eb326d80dfbea9df4f78d5b38cf118b91fac359478b4073ba30ef3f2d","typeString":"literal_string \"Could not get nonce\""}],"id":2785,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3659:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3659:42:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2791,"nodeType":"ExpressionStatement","src":"3659:42:14"},{"expression":{"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2792,"name":"txNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"3711:8:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2794,"indexExpression":{"id":2793,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"3720:6:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3711:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3730:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3711:20:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2797,"nodeType":"ExpressionStatement","src":"3711:20:14"},{"eventCall":{"arguments":[{"expression":{"id":2799,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3755:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3755:10:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2801,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"3767:6:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2802,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"3775:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2803,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"3782:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2798,"name":"GasUsage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"3746:8:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,bytes32,uint256,bool)"}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3746:44:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2805,"nodeType":"EmitStatement","src":"3741:49:14"}]},"documentation":{"id":2771,"nodeType":"StructuredDocumentation","src":"3321:204:14","text":" @notice Called by the Safe contract after a transaction is executed.\n @param txHash Hash of the executed transaction.\n @param success True if the transaction was successful."},"functionSelector":"93271368","id":2807,"implemented":true,"kind":"function","modifiers":[],"name":"checkAfterExecution","nodeType":"FunctionDefinition","overrides":{"id":2777,"nodeType":"OverrideSpecifier","overrides":[],"src":"3598:8:14"},"parameters":{"id":2776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2773,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":2807,"src":"3559:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3559:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2775,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":2807,"src":"3575:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2774,"name":"bool","nodeType":"ElementaryTypeName","src":"3575:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3558:30:14"},"returnParameters":{"id":2778,"nodeType":"ParameterList","parameters":[],"src":"3607:0:14"},"scope":2848,"src":"3530:267:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1302],"body":{"id":2846,"nodeType":"Block","src":"4464:186:14","statements":[{"expression":{"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2824,"name":"moduleTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"4474:12:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2828,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"4516:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"4520:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2830,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"4527:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2831,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"4533:9:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":2832,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"4544:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2826,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4499:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4499:16:14","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4499:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2825,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4489:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4489:63:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4474:78:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2836,"nodeType":"ExpressionStatement","src":"4474:78:14"},{"eventCall":{"arguments":[{"id":2838,"name":"moduleTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"4594:12:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2839,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"4608:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"4612:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2841,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"4619:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2842,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"4625:9:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":2843,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"4636:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2837,"name":"ModuleTransasctionDetails","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"4568:25:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_address_$returns$__$","typeString":"function (bytes32,address,uint256,bytes memory,enum Enum.Operation,address)"}},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4568:75:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2845,"nodeType":"EmitStatement","src":"4563:80:14"}]},"documentation":{"id":2808,"nodeType":"StructuredDocumentation","src":"3803:441:14","text":" @notice Called by the Safe contract before a transaction is executed via a module.\n @param to Destination address of Safe transaction.\n @param value Ether value of Safe transaction.\n @param data Data payload of Safe transaction.\n @param operation Operation type of Safe transaction.\n @param module Account executing the transaction.\n @return moduleTxHash Hash of the module transaction."},"functionSelector":"728c2972","id":2847,"implemented":true,"kind":"function","modifiers":[],"name":"checkModuleTransaction","nodeType":"FunctionDefinition","overrides":{"id":2820,"nodeType":"OverrideSpecifier","overrides":[],"src":"4424:8:14"},"parameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2847,"src":"4290:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2809,"name":"address","nodeType":"ElementaryTypeName","src":"4290:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2812,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2847,"src":"4310:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2811,"name":"uint256","nodeType":"ElementaryTypeName","src":"4310:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2814,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2847,"src":"4333:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2813,"name":"bytes","nodeType":"ElementaryTypeName","src":"4333:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":2847,"src":"4360:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":2815,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"4360:14:14","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":2847,"src":"4394:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2817,"name":"address","nodeType":"ElementaryTypeName","src":"4394:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4280:134:14"},"returnParameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2822,"mutability":"mutable","name":"moduleTxHash","nodeType":"VariableDeclaration","scope":2847,"src":"4442:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2821,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4442:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4441:22:14"},"scope":2848,"src":"4249:401:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2849,"src":"432:4220:14"}],"src":"42:4611:14"},"id":14},"contracts/examples/guards/DelegateCallTransactionGuard.sol":{"ast":{"absolutePath":"contracts/examples/guards/DelegateCallTransactionGuard.sol","exportedSymbols":{"BaseGuard":[1337],"DelegateCallTransactionGuard":[2968],"Enum":[4287]},"id":2969,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2850,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:15"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../../libraries/Enum.sol","id":2852,"nodeType":"ImportDirective","scope":2969,"sourceUnit":4288,"src":"75:46:15","symbolAliases":[{"foreign":{"id":2851,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:4:15","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/GuardManager.sol","file":"../../base/GuardManager.sol","id":2854,"nodeType":"ImportDirective","scope":2969,"sourceUnit":1391,"src":"122:54:15","symbolAliases":[{"foreign":{"id":2853,"name":"BaseGuard","nodeType":"Identifier","overloadedDeclarations":[],"src":"130:9:15","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2856,"name":"BaseGuard","nodeType":"UserDefinedTypeName","referencedDeclaration":1337,"src":"353:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_BaseGuard_$1337","typeString":"contract BaseGuard"}},"id":2857,"nodeType":"InheritanceSpecifier","src":"353:9:15"}],"contractDependencies":[1311,1337,3873],"contractKind":"contract","documentation":{"id":2855,"nodeType":"StructuredDocumentation","src":"178:133:15","text":" @title DelegateCallTransactionGuard - Limits delegate calls to a specific target.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2968,"linearizedBaseContracts":[2968,1337,1311,3873],"name":"DelegateCallTransactionGuard","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"250d6a91","id":2859,"mutability":"immutable","name":"ALLOWED_TARGET","nodeType":"VariableDeclaration","scope":2968,"src":"369:39:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2858,"name":"address","nodeType":"ElementaryTypeName","src":"369:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":2868,"nodeType":"Block","src":"443:40:15","statements":[{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2864,"name":"ALLOWED_TARGET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"453:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2865,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"470:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"453:23:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2867,"nodeType":"ExpressionStatement","src":"453:23:15"}]},"id":2869,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","scope":2869,"src":"427:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2860,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"426:16:15"},"returnParameters":{"id":2863,"nodeType":"ParameterList","parameters":[],"src":"443:0:15"},"scope":2968,"src":"415:68:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2872,"nodeType":"Block","src":"559:178:15","statements":[]},"id":2873,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2870,"nodeType":"ParameterList","parameters":[],"src":"547:2:15"},"returnParameters":{"id":2871,"nodeType":"ParameterList","parameters":[],"src":"559:0:15"},"scope":2968,"src":"539:198:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1286],"body":{"id":2913,"nodeType":"Block","src":"1385:117:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2901,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"1403:9:15","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":2902,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"1416:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$4287_$","typeString":"type(library Enum)"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":4286,"src":"1416:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$4286_$","typeString":"type(enum Enum.Operation)"}},"id":2904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"DelegateCall","nodeType":"MemberAccess","src":"1416:27:15","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"src":"1403:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2906,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2876,"src":"1447:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2907,"name":"ALLOWED_TARGET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"1453:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1447:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1403:64:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546869732063616c6c2069732072657374726963746564","id":2910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1469:25:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b64f407a05e4a43de8b61938039b12fe0d8874fbf2d7e5d6e6149ee1426140b","typeString":"literal_string \"This call is restricted\""},"value":"This call is restricted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9b64f407a05e4a43de8b61938039b12fe0d8874fbf2d7e5d6e6149ee1426140b","typeString":"literal_string \"This call is restricted\""}],"id":2900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1395:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1395:100:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2912,"nodeType":"ExpressionStatement","src":"1395:100:15"}]},"documentation":{"id":2874,"nodeType":"StructuredDocumentation","src":"743:305:15","text":" @notice Called by the Safe contract before a transaction is executed.\n @dev  Reverts if the transaction is a delegate call to contract other than the allowed one.\n @param to Destination address of Safe transaction.\n @param operation Operation type of Safe transaction."},"functionSelector":"75f0bb52","id":2914,"implemented":true,"kind":"function","modifiers":[],"name":"checkTransaction","nodeType":"FunctionDefinition","overrides":{"id":2898,"nodeType":"OverrideSpecifier","overrides":[],"src":"1376:8:15"},"parameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2876,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2914,"src":"1088:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2875,"name":"address","nodeType":"ElementaryTypeName","src":"1088:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2878,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1108:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2877,"name":"uint256","nodeType":"ElementaryTypeName","src":"1108:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2880,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1125:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2879,"name":"bytes","nodeType":"ElementaryTypeName","src":"1125:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2882,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":2914,"src":"1147:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":2881,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1147:14:15","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1181:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2886,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1198:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1198:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2888,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1215:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1215:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2890,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1232:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2889,"name":"address","nodeType":"ElementaryTypeName","src":"1232:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2892,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1301:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2891,"name":"address","nodeType":"ElementaryTypeName","src":"1301:15:15","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2894,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1326:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2893,"name":"bytes","nodeType":"ElementaryTypeName","src":"1326:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2896,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2914,"src":"1348:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2895,"name":"address","nodeType":"ElementaryTypeName","src":"1348:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1078:283:15"},"returnParameters":{"id":2899,"nodeType":"ParameterList","parameters":[],"src":"1385:0:15"},"scope":2968,"src":"1053:449:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1310],"body":{"id":2922,"nodeType":"Block","src":"1575:2:15","statements":[]},"functionSelector":"93271368","id":2923,"implemented":true,"kind":"function","modifiers":[],"name":"checkAfterExecution","nodeType":"FunctionDefinition","overrides":{"id":2920,"nodeType":"OverrideSpecifier","overrides":[],"src":"1566:8:15"},"parameters":{"id":2919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2923,"src":"1537:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1537:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2918,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2923,"src":"1546:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2917,"name":"bool","nodeType":"ElementaryTypeName","src":"1546:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1536:15:15"},"returnParameters":{"id":2921,"nodeType":"ParameterList","parameters":[],"src":"1575:0:15"},"scope":2968,"src":"1508:69:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1302],"body":{"id":2966,"nodeType":"Block","src":"2188:205:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2941,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"2206:9:15","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":2942,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"2219:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$4287_$","typeString":"type(library Enum)"}},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":4286,"src":"2219:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$4286_$","typeString":"type(enum Enum.Operation)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"DelegateCall","nodeType":"MemberAccess","src":"2219:27:15","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"src":"2206:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2946,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"2250:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2947,"name":"ALLOWED_TARGET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"2256:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2250:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2206:64:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546869732063616c6c2069732072657374726963746564","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2272:25:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b64f407a05e4a43de8b61938039b12fe0d8874fbf2d7e5d6e6149ee1426140b","typeString":"literal_string \"This call is restricted\""},"value":"This call is restricted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9b64f407a05e4a43de8b61938039b12fe0d8874fbf2d7e5d6e6149ee1426140b","typeString":"literal_string \"This call is restricted\""}],"id":2940,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2198:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2198:100:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2952,"nodeType":"ExpressionStatement","src":"2198:100:15"},{"expression":{"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2953,"name":"moduleTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"2308:12:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2957,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"2350:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"2354:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2959,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"2361:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2960,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"2367:9:15","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":2961,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"2378:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2955,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2333:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"2333:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2333:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2954,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2323:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2323:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2308:78:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2965,"nodeType":"ExpressionStatement","src":"2308:78:15"}]},"documentation":{"id":2924,"nodeType":"StructuredDocumentation","src":"1583:380:15","text":" @notice Called by the Safe contract before a transaction is executed via a module.\n @param to Destination address of Safe transaction.\n @param value Ether value of Safe transaction.\n @param data Data payload of Safe transaction.\n @param operation Operation type of Safe transaction.\n @param module Module executing the transaction."},"functionSelector":"728c2972","id":2967,"implemented":true,"kind":"function","modifiers":[],"name":"checkModuleTransaction","nodeType":"FunctionDefinition","overrides":{"id":2936,"nodeType":"OverrideSpecifier","overrides":[],"src":"2148:8:15"},"parameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":2967,"src":"2009:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2925,"name":"address","nodeType":"ElementaryTypeName","src":"2009:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2928,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":2967,"src":"2029:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2927,"name":"uint256","nodeType":"ElementaryTypeName","src":"2029:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2930,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":2967,"src":"2052:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2929,"name":"bytes","nodeType":"ElementaryTypeName","src":"2052:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2932,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":2967,"src":"2079:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":2931,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2079:14:15","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":2967,"src":"2113:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2933,"name":"address","nodeType":"ElementaryTypeName","src":"2113:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1999:134:15"},"returnParameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"moduleTxHash","nodeType":"VariableDeclaration","scope":2967,"src":"2166:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2937,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2166:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2165:22:15"},"scope":2968,"src":"1968:425:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2969,"src":"312:2083:15"}],"src":"42:2354:15"},"id":15},"contracts/examples/guards/OnlyOwnersGuard.sol":{"ast":{"absolutePath":"contracts/examples/guards/OnlyOwnersGuard.sol","exportedSymbols":{"BaseGuard":[1337],"Enum":[4287],"ISafe":[4261],"OnlyOwnersGuard":[3054]},"id":3055,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2970,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"86:31:16"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../../libraries/Enum.sol","id":2972,"nodeType":"ImportDirective","scope":3055,"sourceUnit":4288,"src":"119:46:16","symbolAliases":[{"foreign":{"id":2971,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"127:4:16","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/GuardManager.sol","file":"../../base/GuardManager.sol","id":2974,"nodeType":"ImportDirective","scope":3055,"sourceUnit":1391,"src":"166:54:16","symbolAliases":[{"foreign":{"id":2973,"name":"BaseGuard","nodeType":"Identifier","overloadedDeclarations":[],"src":"174:9:16","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../../interfaces/ISafe.sol","id":2976,"nodeType":"ImportDirective","scope":3055,"sourceUnit":4262,"src":"221:49:16","symbolAliases":[{"foreign":{"id":2975,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"229:5:16","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2978,"name":"BaseGuard","nodeType":"UserDefinedTypeName","referencedDeclaration":1337,"src":"421:9:16","typeDescriptions":{"typeIdentifier":"t_contract$_BaseGuard_$1337","typeString":"contract BaseGuard"}},"id":2979,"nodeType":"InheritanceSpecifier","src":"421:9:16"}],"contractDependencies":[1311,1337,3873],"contractKind":"contract","documentation":{"id":2977,"nodeType":"StructuredDocumentation","src":"272:120:16","text":" @title OnlyOwnersGuard - Only allows owners to execute transactions.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3054,"linearizedBaseContracts":[3054,1337,1311,3873],"name":"OnlyOwnersGuard","nodeType":"ContractDefinition","nodes":[{"body":{"id":2982,"nodeType":"Block","src":"451:2:16","statements":[]},"id":2983,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2980,"nodeType":"ParameterList","parameters":[],"src":"448:2:16"},"returnParameters":{"id":2981,"nodeType":"ParameterList","parameters":[],"src":"451:0:16"},"scope":3054,"src":"437:16:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2986,"nodeType":"Block","src":"529:178:16","statements":[]},"id":2987,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2984,"nodeType":"ParameterList","parameters":[],"src":"517:2:16"},"returnParameters":{"id":2985,"nodeType":"ParameterList","parameters":[],"src":"529:0:16"},"scope":3054,"src":"509:198:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1286],"body":{"id":3025,"nodeType":"Block","src":"1256:99:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":3020,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"1300:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":3016,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1280:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1280:10:16","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3015,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"1274:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1274:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isOwner","nodeType":"MemberAccess","referencedDeclaration":4055,"src":"1274:25:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1274:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6d73672073656e646572206973206e6f7420616c6c6f77656420746f2065786563","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1312:35:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_77385b8adfe587513f250afd36e7d7418b9f6a2179e96dc862ec72b7ae8e6c75","typeString":"literal_string \"msg sender is not allowed to exec\""},"value":"msg sender is not allowed to exec"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77385b8adfe587513f250afd36e7d7418b9f6a2179e96dc862ec72b7ae8e6c75","typeString":"literal_string \"msg sender is not allowed to exec\""}],"id":3014,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1266:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1266:82:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3024,"nodeType":"ExpressionStatement","src":"1266:82:16"}]},"documentation":{"id":2988,"nodeType":"StructuredDocumentation","src":"713:209:16","text":" @notice Called by the Safe contract before a transaction is executed.\n @dev Reverts if the transaction is not executed by an owner.\n @param msgSender Executor of the transaction."},"functionSelector":"75f0bb52","id":3026,"implemented":true,"kind":"function","modifiers":[],"name":"checkTransaction","nodeType":"FunctionDefinition","overrides":{"id":3012,"nodeType":"OverrideSpecifier","overrides":[],"src":"1247:8:16"},"parameters":{"id":3011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"962:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2989,"name":"address","nodeType":"ElementaryTypeName","src":"962:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2992,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"979:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2991,"name":"uint256","nodeType":"ElementaryTypeName","src":"979:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2994,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"996:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2993,"name":"bytes","nodeType":"ElementaryTypeName","src":"996:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2996,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"1018:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":2995,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1018:14:16","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":2998,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"1042:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2997,"name":"uint256","nodeType":"ElementaryTypeName","src":"1042:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3000,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"1059:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2999,"name":"uint256","nodeType":"ElementaryTypeName","src":"1059:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3002,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"1076:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3001,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3004,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"1093:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3003,"name":"address","nodeType":"ElementaryTypeName","src":"1093:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3006,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"1162:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3005,"name":"address","nodeType":"ElementaryTypeName","src":"1162:15:16","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3008,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3026,"src":"1187:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3007,"name":"bytes","nodeType":"ElementaryTypeName","src":"1187:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3010,"mutability":"mutable","name":"msgSender","nodeType":"VariableDeclaration","scope":3026,"src":"1209:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3009,"name":"address","nodeType":"ElementaryTypeName","src":"1209:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"952:280:16"},"returnParameters":{"id":3013,"nodeType":"ParameterList","parameters":[],"src":"1256:0:16"},"scope":3054,"src":"927:428:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1310],"body":{"id":3034,"nodeType":"Block","src":"1428:2:16","statements":[]},"functionSelector":"93271368","id":3035,"implemented":true,"kind":"function","modifiers":[],"name":"checkAfterExecution","nodeType":"FunctionDefinition","overrides":{"id":3032,"nodeType":"OverrideSpecifier","overrides":[],"src":"1419:8:16"},"parameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3035,"src":"1390:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1390:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3030,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3035,"src":"1399:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3029,"name":"bool","nodeType":"ElementaryTypeName","src":"1399:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1389:15:16"},"returnParameters":{"id":3033,"nodeType":"ParameterList","parameters":[],"src":"1428:0:16"},"scope":3054,"src":"1361:69:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1302],"body":{"id":3052,"nodeType":"Block","src":"2023:2:16","statements":[]},"documentation":{"id":3036,"nodeType":"StructuredDocumentation","src":"1436:380:16","text":" @notice Called by the Safe contract before a transaction is executed via a module.\n @param to Destination address of Safe transaction.\n @param value Ether value of Safe transaction.\n @param data Data payload of Safe transaction.\n @param operation Operation type of Safe transaction.\n @param module Module executing the transaction."},"functionSelector":"728c2972","id":3053,"implemented":true,"kind":"function","modifiers":[],"name":"checkModuleTransaction","nodeType":"FunctionDefinition","overrides":{"id":3048,"nodeType":"OverrideSpecifier","overrides":[],"src":"1996:8:16"},"parameters":{"id":3047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3038,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3053,"src":"1862:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3037,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3040,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":3053,"src":"1882:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3039,"name":"uint256","nodeType":"ElementaryTypeName","src":"1882:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3042,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":3053,"src":"1905:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3041,"name":"bytes","nodeType":"ElementaryTypeName","src":"1905:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3044,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":3053,"src":"1932:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":3043,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1932:14:16","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":3046,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3053,"src":"1966:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3045,"name":"address","nodeType":"ElementaryTypeName","src":"1966:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1852:134:16"},"returnParameters":{"id":3051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3050,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3053,"src":"2014:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2014:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2013:9:16"},"scope":3054,"src":"1821:204:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3055,"src":"393:1634:16"}],"src":"86:1942:16"},"id":16},"contracts/examples/guards/ReentrancyTransactionGuard.sol":{"ast":{"absolutePath":"contracts/examples/guards/ReentrancyTransactionGuard.sol","exportedSymbols":{"BaseGuard":[1337],"Enum":[4287],"ReentrancyTransactionGuard":[3199]},"id":3200,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3056,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:17"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../../libraries/Enum.sol","id":3058,"nodeType":"ImportDirective","scope":3200,"sourceUnit":4288,"src":"75:46:17","symbolAliases":[{"foreign":{"id":3057,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:4:17","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/GuardManager.sol","file":"../../base/GuardManager.sol","id":3060,"nodeType":"ImportDirective","scope":3200,"sourceUnit":1391,"src":"122:54:17","symbolAliases":[{"foreign":{"id":3059,"name":"BaseGuard","nodeType":"Identifier","overloadedDeclarations":[],"src":"130:9:17","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3062,"name":"BaseGuard","nodeType":"UserDefinedTypeName","referencedDeclaration":1337,"src":"366:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_BaseGuard_$1337","typeString":"contract BaseGuard"}},"id":3063,"nodeType":"InheritanceSpecifier","src":"366:9:17"}],"contractDependencies":[1311,1337,3873],"contractKind":"contract","documentation":{"id":3061,"nodeType":"StructuredDocumentation","src":"178:148:17","text":" @title ReentrancyTransactionGuard - Prevents reentrancy into the transaction execution function.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3199,"linearizedBaseContracts":[3199,1337,1311,3873],"name":"ReentrancyTransactionGuard","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3068,"mutability":"constant","name":"GUARD_STORAGE_SLOT","nodeType":"VariableDeclaration","scope":3199,"src":"382:89:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3064,"name":"bytes32","nodeType":"ElementaryTypeName","src":"382:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"7265656e7472616e63795f67756172642e67756172642e737472756374","id":3066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"439:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_7c1d45961c2d0298f999d2c3d4a7a5e0f688d137f4c32466e3056a97e673b83a","typeString":"literal_string \"reentrancy_guard.guard.struct\""},"value":"reentrancy_guard.guard.struct"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7c1d45961c2d0298f999d2c3d4a7a5e0f688d137f4c32466e3056a97e673b83a","typeString":"literal_string \"reentrancy_guard.guard.struct\""}],"id":3065,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"429:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"429:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"canonicalName":"ReentrancyTransactionGuard.GuardValue","id":3071,"members":[{"constant":false,"id":3070,"mutability":"mutable","name":"active","nodeType":"VariableDeclaration","scope":3071,"src":"506:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3069,"name":"bool","nodeType":"ElementaryTypeName","src":"506:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"GuardValue","nodeType":"StructDefinition","scope":3199,"src":"478:46:17","visibility":"public"},{"body":{"id":3074,"nodeType":"Block","src":"600:178:17","statements":[]},"id":3075,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":3072,"nodeType":"ParameterList","parameters":[],"src":"588:2:17"},"returnParameters":{"id":3073,"nodeType":"ParameterList","parameters":[],"src":"600:0:17"},"scope":3199,"src":"580:198:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3086,"nodeType":"Block","src":"1099:250:17","statements":[{"assignments":[3082],"declarations":[{"constant":false,"id":3082,"mutability":"mutable","name":"slot","nodeType":"VariableDeclaration","scope":3086,"src":"1109:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1109:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3084,"initialValue":{"id":3083,"name":"GUARD_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"1124:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1109:33:17"},{"AST":{"nodeType":"YulBlock","src":"1253:42:17","statements":[{"nodeType":"YulAssignment","src":"1267:18:17","value":{"name":"slot","nodeType":"YulIdentifier","src":"1281:4:17"},"variableNames":[{"name":"guard.slot","nodeType":"YulIdentifier","src":"1267:10:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":3079,"isOffset":false,"isSlot":true,"src":"1267:10:17","suffix":"slot","valueSize":1},{"declaration":3082,"isOffset":false,"isSlot":false,"src":"1281:4:17","valueSize":1}],"id":3085,"nodeType":"InlineAssembly","src":"1244:51:17"}]},"documentation":{"id":3076,"nodeType":"StructuredDocumentation","src":"784:241:17","text":" @notice Returns the guard value for the current context.\n @dev The guard value is stored in a slot that is unique to the contract instance and the function in which it is called.\n @return guard The guard value."},"id":3087,"implemented":true,"kind":"function","modifiers":[],"name":"getGuard","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[],"src":"1047:2:17"},"returnParameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":3087,"src":"1073:24:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue"},"typeName":{"id":3078,"name":"GuardValue","nodeType":"UserDefinedTypeName","referencedDeclaration":3071,"src":"1073:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue"}},"visibility":"internal"}],"src":"1072:26:17"},"scope":3199,"src":"1030:319:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"baseFunctions":[1286],"body":{"id":3132,"nodeType":"Block","src":"1809:138:17","statements":[{"assignments":[3115],"declarations":[{"constant":false,"id":3115,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":3132,"src":"1819:24:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue"},"typeName":{"id":3114,"name":"GuardValue","nodeType":"UserDefinedTypeName","referencedDeclaration":3071,"src":"1819:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue"}},"visibility":"internal"}],"id":3118,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3116,"name":"getGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"1846:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_GuardValue_$3071_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyTransactionGuard.GuardValue storage pointer)"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1846:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1819:37:17"},{"expression":{"arguments":[{"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1874:13:17","subExpression":{"expression":{"id":3120,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"1875:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue storage pointer"}},"id":3121,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"1875:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e6379206465746563746564","id":3123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1889:21:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_097111f1c92e46e29a577d28ac0e81cbf88f0d28257c526422b538f03d0c3b86","typeString":"literal_string \"Reentrancy detected\""},"value":"Reentrancy detected"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_097111f1c92e46e29a577d28ac0e81cbf88f0d28257c526422b538f03d0c3b86","typeString":"literal_string \"Reentrancy detected\""}],"id":3119,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1866:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1866:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3125,"nodeType":"ExpressionStatement","src":"1866:45:17"},{"expression":{"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3126,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"1921:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue storage pointer"}},"id":3128,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"1921:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1936:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1921:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3131,"nodeType":"ExpressionStatement","src":"1921:19:17"}]},"documentation":{"id":3088,"nodeType":"StructuredDocumentation","src":"1355:135:17","text":" @notice Called by the Safe contract before a transaction is executed.\n @dev Reverts if reentrancy is detected."},"functionSelector":"75f0bb52","id":3133,"implemented":true,"kind":"function","modifiers":[],"name":"checkTransaction","nodeType":"FunctionDefinition","overrides":{"id":3112,"nodeType":"OverrideSpecifier","overrides":[],"src":"1800:8:17"},"parameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3090,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1530:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3089,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3092,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1547:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3091,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3094,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1564:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3093,"name":"bytes","nodeType":"ElementaryTypeName","src":"1564:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1586:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":3095,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1586:14:17","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":3098,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1610:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3097,"name":"uint256","nodeType":"ElementaryTypeName","src":"1610:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3100,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1627:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3099,"name":"uint256","nodeType":"ElementaryTypeName","src":"1627:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3102,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1644:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3101,"name":"uint256","nodeType":"ElementaryTypeName","src":"1644:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3104,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1661:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3103,"name":"address","nodeType":"ElementaryTypeName","src":"1661:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3106,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1730:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3105,"name":"address","nodeType":"ElementaryTypeName","src":"1730:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3108,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1755:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3107,"name":"bytes","nodeType":"ElementaryTypeName","src":"1755:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3110,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3133,"src":"1777:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3109,"name":"address","nodeType":"ElementaryTypeName","src":"1777:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1520:270:17"},"returnParameters":{"id":3113,"nodeType":"ParameterList","parameters":[],"src":"1809:0:17"},"scope":3199,"src":"1495:452:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1310],"body":{"id":3148,"nodeType":"Block","src":"2143:42:17","statements":[{"expression":{"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3142,"name":"getGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"2153:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_GuardValue_$3071_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyTransactionGuard.GuardValue storage pointer)"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2153:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue storage pointer"}},"id":3144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"2153:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2173:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2153:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3147,"nodeType":"ExpressionStatement","src":"2153:25:17"}]},"documentation":{"id":3134,"nodeType":"StructuredDocumentation","src":"1953:123:17","text":" @notice Called by the Safe contract after a transaction is executed.\n @dev Resets the guard value."},"functionSelector":"93271368","id":3149,"implemented":true,"kind":"function","modifiers":[],"name":"checkAfterExecution","nodeType":"FunctionDefinition","overrides":{"id":3140,"nodeType":"OverrideSpecifier","overrides":[],"src":"2134:8:17"},"parameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3149,"src":"2110:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2110:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3149,"src":"2119:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3137,"name":"bool","nodeType":"ElementaryTypeName","src":"2119:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2109:15:17"},"returnParameters":{"id":3141,"nodeType":"ParameterList","parameters":[],"src":"2143:0:17"},"scope":3199,"src":"2081:104:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1302],"body":{"id":3197,"nodeType":"Block","src":"2792:227:17","statements":[{"expression":{"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3166,"name":"moduleTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"2802:12:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3170,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"2844:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2848:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3172,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"2855:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3173,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"2861:9:17","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"id":3174,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"2872:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3168,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2827:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"2827:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2827:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3167,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2817:63:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2802:78:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3178,"nodeType":"ExpressionStatement","src":"2802:78:17"},{"assignments":[3180],"declarations":[{"constant":false,"id":3180,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":3197,"src":"2891:24:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue"},"typeName":{"id":3179,"name":"GuardValue","nodeType":"UserDefinedTypeName","referencedDeclaration":3071,"src":"2891:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue"}},"visibility":"internal"}],"id":3183,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3181,"name":"getGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"2918:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_GuardValue_$3071_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyTransactionGuard.GuardValue storage pointer)"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2918:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2891:37:17"},{"expression":{"arguments":[{"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2946:13:17","subExpression":{"expression":{"id":3185,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"2947:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue storage pointer"}},"id":3186,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"2947:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e6379206465746563746564","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2961:21:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_097111f1c92e46e29a577d28ac0e81cbf88f0d28257c526422b538f03d0c3b86","typeString":"literal_string \"Reentrancy detected\""},"value":"Reentrancy detected"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_097111f1c92e46e29a577d28ac0e81cbf88f0d28257c526422b538f03d0c3b86","typeString":"literal_string \"Reentrancy detected\""}],"id":3184,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2938:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2938:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3190,"nodeType":"ExpressionStatement","src":"2938:45:17"},{"expression":{"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3191,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"2993:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_GuardValue_$3071_storage_ptr","typeString":"struct ReentrancyTransactionGuard.GuardValue storage pointer"}},"id":3193,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"2993:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3008:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2993:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3196,"nodeType":"ExpressionStatement","src":"2993:19:17"}]},"documentation":{"id":3150,"nodeType":"StructuredDocumentation","src":"2191:381:17","text":" @notice Called by the Safe contract before a transaction is executed via a module.\n @param to Destination address of Safe transaction.\n @param value Ether value of Safe transaction.\n @param data Data payload of Safe transaction.\n @param operation Operation type of Safe transaction.\n @param module Account executing the transaction."},"functionSelector":"728c2972","id":3198,"implemented":true,"kind":"function","modifiers":[],"name":"checkModuleTransaction","nodeType":"FunctionDefinition","overrides":{"id":3162,"nodeType":"OverrideSpecifier","overrides":[],"src":"2752:8:17"},"parameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3152,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3198,"src":"2618:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3151,"name":"address","nodeType":"ElementaryTypeName","src":"2618:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3154,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":3198,"src":"2638:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3153,"name":"uint256","nodeType":"ElementaryTypeName","src":"2638:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3156,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":3198,"src":"2661:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3155,"name":"bytes","nodeType":"ElementaryTypeName","src":"2661:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3158,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":3198,"src":"2688:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":3157,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2688:14:17","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":3160,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3198,"src":"2722:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3159,"name":"address","nodeType":"ElementaryTypeName","src":"2722:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2608:134:17"},"returnParameters":{"id":3165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3164,"mutability":"mutable","name":"moduleTxHash","nodeType":"VariableDeclaration","scope":3198,"src":"2770:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2770:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2769:22:17"},"scope":3199,"src":"2577:442:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3200,"src":"327:2694:17"}],"src":"42:2980:17"},"id":17},"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol":{"ast":{"absolutePath":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol","exportedSymbols":{"Migration":[3278],"SafeStorage":[4811]},"id":3279,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3201,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:18"},{"absolutePath":"contracts/libraries/SafeStorage.sol","file":"../../libraries/SafeStorage.sol","id":3203,"nodeType":"ImportDirective","scope":3279,"sourceUnit":4812,"src":"74:60:18","symbolAliases":[{"foreign":{"id":3202,"name":"SafeStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"82:11:18","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3205,"name":"SafeStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":4811,"src":"274:11:18","typeDescriptions":{"typeIdentifier":"t_contract$_SafeStorage_$4811","typeString":"contract SafeStorage"}},"id":3206,"nodeType":"InheritanceSpecifier","src":"274:11:18"}],"contractDependencies":[4811],"contractKind":"contract","documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"136:115:18","text":" @title Migration - Migrates a Safe contract from 1.3.0 to 1.2.0\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3278,"linearizedBaseContracts":[3278,4811],"name":"Migration","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3209,"mutability":"constant","name":"DOMAIN_SEPARATOR_TYPEHASH","nodeType":"VariableDeclaration","scope":3278,"src":"292:119:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"292:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830333561666638336438363933376433356233326530346630646463366666343639323930656566326631623639326438613831356338393430346434373439","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"345:66:18","typeDescriptions":{"typeIdentifier":"t_rational_1517718281442037948617199096126532355110765202990829672390711201829802035017_by_1","typeString":"int_const 1517...(68 digits omitted)...5017"},"value":"0x035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749"},"visibility":"private"},{"constant":false,"functionSelector":"72f7a956","id":3211,"mutability":"immutable","name":"MIGRATION_SINGLETON","nodeType":"VariableDeclaration","scope":3278,"src":"418:44:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3210,"name":"address","nodeType":"ElementaryTypeName","src":"418:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"10dfd506","id":3213,"mutability":"immutable","name":"SAFE_120_SINGLETON","nodeType":"VariableDeclaration","scope":3278,"src":"468:43:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3212,"name":"address","nodeType":"ElementaryTypeName","src":"468:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":3239,"nodeType":"Block","src":"555:237:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3219,"name":"targetSingleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"626:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"653:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"645:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3220,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:18","typeDescriptions":{}}},"id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"645:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"626:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642073696e676c65746f6e20616464726573732070726f7669646564","id":3225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"657:36:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_f4a46125d24bcf992f3a005546c0f3eafebe1847b2ccd7a103878ded65e88250","typeString":"literal_string \"Invalid singleton address provided\""},"value":"Invalid singleton address provided"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f4a46125d24bcf992f3a005546c0f3eafebe1847b2ccd7a103878ded65e88250","typeString":"literal_string \"Invalid singleton address provided\""}],"id":3218,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"618:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"618:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3227,"nodeType":"ExpressionStatement","src":"618:76:18"},{"expression":{"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3228,"name":"SAFE_120_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"704:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3229,"name":"targetSingleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"725:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"704:36:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3231,"nodeType":"ExpressionStatement","src":"704:36:18"},{"expression":{"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3232,"name":"MIGRATION_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"750:19:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3235,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"780:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_Migration_$3278","typeString":"contract Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Migration_$3278","typeString":"contract Migration"}],"id":3234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"772:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3233,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:18","typeDescriptions":{}}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"772:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"750:35:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3238,"nodeType":"ExpressionStatement","src":"750:35:18"}]},"id":3240,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":3216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3215,"mutability":"mutable","name":"targetSingleton","nodeType":"VariableDeclaration","scope":3240,"src":"530:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3214,"name":"address","nodeType":"ElementaryTypeName","src":"530:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"529:25:18"},"returnParameters":{"id":3217,"nodeType":"ParameterList","parameters":[],"src":"555:0:18"},"scope":3278,"src":"518:274:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"id":3244,"name":"ChangedMasterCopy","nodeType":"EventDefinition","parameters":{"id":3243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3242,"indexed":false,"mutability":"mutable","name":"singleton","nodeType":"VariableDeclaration","scope":3244,"src":"822:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3241,"name":"address","nodeType":"ElementaryTypeName","src":"822:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"821:19:18"},"src":"798:43:18"},{"body":{"id":3276,"nodeType":"Block","src":"1029:291:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3251,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1055:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_Migration_$3278","typeString":"contract Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Migration_$3278","typeString":"contract Migration"}],"id":3250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1047:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3249,"name":"address","nodeType":"ElementaryTypeName","src":"1047:7:18","typeDescriptions":{}}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1047:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3253,"name":"MIGRATION_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"1064:19:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:36:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6967726174696f6e2073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6c","id":3255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1085:50:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_15b78a1f3b6f5ce8c19eea2b0f8fa49566744e4d89b92aecbfade8f18a1e41e8","typeString":"literal_string \"Migration should only be called via delegatecall\""},"value":"Migration should only be called via delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_15b78a1f3b6f5ce8c19eea2b0f8fa49566744e4d89b92aecbfade8f18a1e41e8","typeString":"literal_string \"Migration should only be called via delegatecall\""}],"id":3248,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1039:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1039:97:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3257,"nodeType":"ExpressionStatement","src":"1039:97:18"},{"expression":{"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3258,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"1147:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3259,"name":"SAFE_120_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"1159:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1147:30:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3261,"nodeType":"ExpressionStatement","src":"1147:30:18"},{"expression":{"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3262,"name":"_deprecatedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"1187:26:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3266,"name":"DOMAIN_SEPARATOR_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"1237:25:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3267,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1264:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_Migration_$3278","typeString":"contract Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_contract$_Migration_$3278","typeString":"contract Migration"}],"expression":{"id":3264,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1226:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1226:10:18","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1226:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3263,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1216:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1216:54:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1187:83:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3271,"nodeType":"ExpressionStatement","src":"1187:83:18"},{"eventCall":{"arguments":[{"id":3273,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"1303:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3272,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"1285:17:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1285:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3275,"nodeType":"EmitStatement","src":"1280:33:18"}]},"documentation":{"id":3245,"nodeType":"StructuredDocumentation","src":"847:151:18","text":" @notice Migrates the Safe to the Singleton contract at `migrationSingleton`.\n @dev This can only be called via a delegatecall."},"functionSelector":"8fd3ab80","id":3277,"implemented":true,"kind":"function","modifiers":[],"name":"migrate","nodeType":"FunctionDefinition","parameters":{"id":3246,"nodeType":"ParameterList","parameters":[],"src":"1019:2:18"},"returnParameters":{"id":3247,"nodeType":"ParameterList","parameters":[],"src":"1029:0:18"},"scope":3278,"src":"1003:317:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3279,"src":"252:1070:18"}],"src":"42:1281:18"},"id":18},"contracts/external/SafeMath.sol":{"ast":{"absolutePath":"contracts/external/SafeMath.sol","exportedSymbols":{"SafeMath":[3384]},"id":3385,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3280,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:19"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":3281,"nodeType":"StructuredDocumentation","src":"75:114:19","text":" @title SafeMath\n @notice Math operations with safety checks that revert on error (overflow/underflow)"},"fullyImplemented":true,"id":3384,"linearizedBaseContracts":[3384],"name":"SafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":3314,"nodeType":"Block","src":"449:354:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3291,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"680:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"685:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"680:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3297,"nodeType":"IfStatement","src":"676:45:19","trueBody":{"id":3296,"nodeType":"Block","src":"688:33:19","statements":[{"expression":{"hexValue":"30","id":3294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"709:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3290,"id":3295,"nodeType":"Return","src":"702:8:19"}]}},{"assignments":[3299],"declarations":[{"constant":false,"id":3299,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":3314,"src":"731:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3298,"name":"uint256","nodeType":"ElementaryTypeName","src":"731:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3303,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3300,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"743:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3301,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"747:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"743:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"731:17:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3305,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"766:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3306,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"770:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"766:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3308,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"775:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"766:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3304,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"758:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"758:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3311,"nodeType":"ExpressionStatement","src":"758:19:19"},{"expression":{"id":3312,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"795:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3290,"id":3313,"nodeType":"Return","src":"788:8:19"}]},"documentation":{"id":3282,"nodeType":"StructuredDocumentation","src":"213:164:19","text":" @notice Multiplies two numbers, reverts on overflow.\n @param a First number\n @param b Second number\n @return Product of a and b"},"id":3315,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","parameters":{"id":3287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":3315,"src":"395:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3283,"name":"uint256","nodeType":"ElementaryTypeName","src":"395:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3286,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":3315,"src":"406:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3285,"name":"uint256","nodeType":"ElementaryTypeName","src":"406:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"394:22:19"},"returnParameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3315,"src":"440:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3288,"name":"uint256","nodeType":"ElementaryTypeName","src":"440:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"439:9:19"},"scope":3384,"src":"382:421:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3339,"nodeType":"Block","src":"1092:78:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"1110:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3327,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"1115:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1110:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3325,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1102:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1102:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3330,"nodeType":"ExpressionStatement","src":"1102:15:19"},{"assignments":[3332],"declarations":[{"constant":false,"id":3332,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":3339,"src":"1127:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3331,"name":"uint256","nodeType":"ElementaryTypeName","src":"1127:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3336,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3333,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"1139:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3334,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"1143:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1139:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1127:17:19"},{"expression":{"id":3337,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"1162:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3324,"id":3338,"nodeType":"Return","src":"1155:8:19"}]},"documentation":{"id":3316,"nodeType":"StructuredDocumentation","src":"809:211:19","text":" @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n @param a First number\n @param b Second number\n @return Difference of a and b"},"id":3340,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":3321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3318,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":3340,"src":"1038:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3317,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3320,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":3340,"src":"1049:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3319,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1037:22:19"},"returnParameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3340,"src":"1083:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3322,"name":"uint256","nodeType":"ElementaryTypeName","src":"1083:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1082:9:19"},"scope":3384,"src":"1025:145:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3364,"nodeType":"Block","src":"1402:78:19","statements":[{"assignments":[3351],"declarations":[{"constant":false,"id":3351,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":3364,"src":"1412:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3350,"name":"uint256","nodeType":"ElementaryTypeName","src":"1412:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3355,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3352,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"1424:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3353,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"1428:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1424:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1412:17:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3357,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3351,"src":"1447:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3358,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"1452:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1447:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3356,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1439:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1439:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3361,"nodeType":"ExpressionStatement","src":"1439:15:19"},{"expression":{"id":3362,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3351,"src":"1472:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3349,"id":3363,"nodeType":"Return","src":"1465:8:19"}]},"documentation":{"id":3341,"nodeType":"StructuredDocumentation","src":"1176:154:19","text":" @notice Adds two numbers, reverts on overflow.\n @param a First number\n @param b Second number\n @return Sum of a and b"},"id":3365,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3343,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":3365,"src":"1348:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3342,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3345,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":3365,"src":"1359:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3344,"name":"uint256","nodeType":"ElementaryTypeName","src":"1359:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1347:22:19"},"returnParameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3365,"src":"1393:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3347,"name":"uint256","nodeType":"ElementaryTypeName","src":"1393:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1392:9:19"},"scope":3384,"src":"1335:145:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3382,"nodeType":"Block","src":"1713:38:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3375,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"1730:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3376,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"1735:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1730:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3379,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"1743:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1730:14:19","trueExpression":{"id":3378,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"1739:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3374,"id":3381,"nodeType":"Return","src":"1723:21:19"}]},"documentation":{"id":3366,"nodeType":"StructuredDocumentation","src":"1486:155:19","text":" @notice Returns the largest of two numbers.\n @param a First number\n @param b Second number\n @return Largest of a and b"},"id":3383,"implemented":true,"kind":"function","modifiers":[],"name":"max","nodeType":"FunctionDefinition","parameters":{"id":3371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3368,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":3383,"src":"1659:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3367,"name":"uint256","nodeType":"ElementaryTypeName","src":"1659:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3370,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":3383,"src":"1670:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3369,"name":"uint256","nodeType":"ElementaryTypeName","src":"1670:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1658:22:19"},"returnParameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3373,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3383,"src":"1704:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1704:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1703:9:19"},"scope":3384,"src":"1646:105:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3385,"src":"190:1563:19"}],"src":"42:1712:19"},"id":19},"contracts/handler/CompatibilityFallbackHandler.sol":{"ast":{"absolutePath":"contracts/handler/CompatibilityFallbackHandler.sol","exportedSymbols":{"CompatibilityFallbackHandler":[3635],"HandlerContext":[3657],"ISafe":[4261],"ISignatureValidator":[4280],"TokenCallbackHandler":[3786]},"id":3636,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3386,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:20"},{"absolutePath":"contracts/handler/TokenCallbackHandler.sol","file":"./TokenCallbackHandler.sol","id":3388,"nodeType":"ImportDirective","scope":3636,"sourceUnit":3787,"src":"75:64:20","symbolAliases":[{"foreign":{"id":3387,"name":"TokenCallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:20:20","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISignatureValidator.sol","file":"../interfaces/ISignatureValidator.sol","id":3390,"nodeType":"ImportDirective","scope":3636,"sourceUnit":4281,"src":"140:74:20","symbolAliases":[{"foreign":{"id":3389,"name":"ISignatureValidator","nodeType":"Identifier","overloadedDeclarations":[],"src":"148:19:20","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../interfaces/ISafe.sol","id":3392,"nodeType":"ImportDirective","scope":3636,"sourceUnit":4262,"src":"215:46:20","symbolAliases":[{"foreign":{"id":3391,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"223:5:20","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/handler/HandlerContext.sol","file":"./HandlerContext.sol","id":3394,"nodeType":"ImportDirective","scope":3636,"sourceUnit":3658,"src":"262:52:20","symbolAliases":[{"foreign":{"id":3393,"name":"HandlerContext","nodeType":"Identifier","overloadedDeclarations":[],"src":"270:14:20","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3396,"name":"TokenCallbackHandler","nodeType":"UserDefinedTypeName","referencedDeclaration":3786,"src":"531:20:20","typeDescriptions":{"typeIdentifier":"t_contract$_TokenCallbackHandler_$3786","typeString":"contract TokenCallbackHandler"}},"id":3397,"nodeType":"InheritanceSpecifier","src":"531:20:20"},{"baseName":{"id":3398,"name":"ISignatureValidator","nodeType":"UserDefinedTypeName","referencedDeclaration":4280,"src":"553:19:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidator_$4280","typeString":"contract ISignatureValidator"}},"id":3399,"nodeType":"InheritanceSpecifier","src":"553:19:20"},{"baseName":{"id":3400,"name":"HandlerContext","nodeType":"UserDefinedTypeName","referencedDeclaration":3657,"src":"574:14:20","typeDescriptions":{"typeIdentifier":"t_contract$_HandlerContext_$3657","typeString":"contract HandlerContext"}},"id":3401,"nodeType":"InheritanceSpecifier","src":"574:14:20"}],"contractDependencies":[3657,3786,3823,3841,3861,3873,4267,4280],"contractKind":"contract","documentation":{"id":3395,"nodeType":"StructuredDocumentation","src":"316:173:20","text":" @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe Smart Account contracts.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3635,"linearizedBaseContracts":[3635,3657,4280,4267,3786,3873,3841,3861,3823],"name":"CompatibilityFallbackHandler","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3404,"mutability":"constant","name":"SAFE_MSG_TYPEHASH","nodeType":"VariableDeclaration","scope":3635,"src":"643:111:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"643:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307836306233636266386234613232336436386436343162336236646466396132393865376633333731306366336433613964313134366235613631353066626361","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"688:66:20","typeDescriptions":{"typeIdentifier":"t_rational_43739706848186989041152069077571617734008543096732098246335109361212071148490_by_1","typeString":"int_const 4373...(69 digits omitted)...8490"},"value":"0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca"},"visibility":"private"},{"constant":true,"id":3412,"mutability":"constant","name":"SIMULATE_SELECTOR","nodeType":"VariableDeclaration","scope":3635,"src":"761:89:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3405,"name":"bytes4","nodeType":"ElementaryTypeName","src":"761:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"arguments":[{"hexValue":"73696d756c61746528616464726573732c627974657329","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"823:25:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd61951d7ffb6a339250a21db4422ea103eaa0c60f484ea3bbdd746b2e87bbd6","typeString":"literal_string \"simulate(address,bytes)\""},"value":"simulate(address,bytes)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bd61951d7ffb6a339250a21db4422ea103eaa0c60f484ea3bbdd746b2e87bbd6","typeString":"literal_string \"simulate(address,bytes)\""}],"id":3408,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"813:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"813:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"806:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":3406,"name":"bytes4","nodeType":"ElementaryTypeName","src":"806:6:20","typeDescriptions":{}}},"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"806:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"id":3418,"mutability":"constant","name":"SENTINEL_MODULES","nodeType":"VariableDeclaration","scope":3635,"src":"857:57:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3413,"name":"address","nodeType":"ElementaryTypeName","src":"857:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307831","id":3416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"910:3:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"902:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3414,"name":"address","nodeType":"ElementaryTypeName","src":"902:7:20","typeDescriptions":{}}},"id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"902:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"body":{"id":3437,"nodeType":"Block","src":"1149:82:20","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3430,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1202:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1202:10:20","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1194:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3428,"name":"address","nodeType":"ElementaryTypeName","src":"1194:8:20","stateMutability":"payable","typeDescriptions":{}}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1194:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3427,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"1188:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1188:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},{"id":3434,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"1216:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3426,"name":"getMessageHashForSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"1166:21:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_ISafe_$4261_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (contract ISafe,bytes memory) view returns (bytes32)"}},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1166:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3425,"id":3436,"nodeType":"Return","src":"1159:65:20"}]},"documentation":{"id":3419,"nodeType":"StructuredDocumentation","src":"921:147:20","text":" @dev Returns the hash of a message to be signed by owners.\n @param message Raw message bytes.\n @return Message hash."},"functionSelector":"0a1028c4","id":3438,"implemented":true,"kind":"function","modifiers":[],"name":"getMessageHash","nodeType":"FunctionDefinition","parameters":{"id":3422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3421,"mutability":"mutable","name":"message","nodeType":"VariableDeclaration","scope":3438,"src":"1097:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3420,"name":"bytes","nodeType":"ElementaryTypeName","src":"1097:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1096:22:20"},"returnParameters":{"id":3425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3424,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3438,"src":"1140:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3423,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1140:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1139:9:20"},"scope":3635,"src":"1073:158:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3476,"nodeType":"Block","src":"1583:205:20","statements":[{"assignments":[3449],"declarations":[{"constant":false,"id":3449,"mutability":"mutable","name":"safeMessageHash","nodeType":"VariableDeclaration","scope":3476,"src":"1593:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3459,"initialValue":{"arguments":[{"arguments":[{"id":3453,"name":"SAFE_MSG_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"1640:17:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3455,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3443,"src":"1669:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3454,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1659:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1659:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3451,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1629:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1629:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1629:49:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3450,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1619:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1619:60:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1593:86:20"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30783139","id":3464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1720:4:20","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"0x19"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"}],"id":3463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1713:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3462,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1713:6:20","typeDescriptions":{}}},"id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1713:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[{"hexValue":"30783031","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1734:4:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1727:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3466,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1727:6:20","typeDescriptions":{}}},"id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1727:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3470,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3441,"src":"1741:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"domainSeparator","nodeType":"MemberAccess","referencedDeclaration":4204,"src":"1741:20:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1741:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3473,"name":"safeMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"1765:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3460,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1696:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1696:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1696:85:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3447,"id":3475,"nodeType":"Return","src":"1689:92:20"}]},"documentation":{"id":3439,"nodeType":"StructuredDocumentation","src":"1237:238:20","text":" @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\n @param safe Safe to which the message is targeted.\n @param message Message that should be encoded.\n @return Encoded message."},"functionSelector":"23031640","id":3477,"implemented":true,"kind":"function","modifiers":[],"name":"encodeMessageDataForSafe","nodeType":"FunctionDefinition","parameters":{"id":3444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3441,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":3477,"src":"1514:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},"typeName":{"id":3440,"name":"ISafe","nodeType":"UserDefinedTypeName","referencedDeclaration":4261,"src":"1514:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":3443,"mutability":"mutable","name":"message","nodeType":"VariableDeclaration","scope":3477,"src":"1526:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3442,"name":"bytes","nodeType":"ElementaryTypeName","src":"1526:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1513:34:20"},"returnParameters":{"id":3447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3446,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3477,"src":"1569:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3445,"name":"bytes","nodeType":"ElementaryTypeName","src":"1569:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1568:14:20"},"scope":3635,"src":"1480:308:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3494,"nodeType":"Block","src":"2113:74:20","statements":[{"expression":{"arguments":[{"arguments":[{"id":3489,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"2165:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},{"id":3490,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"2171:7:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3488,"name":"encodeMessageDataForSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"2140:24:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_ISafe_$4261_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (contract ISafe,bytes memory) view returns (bytes memory)"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2140:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3487,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2130:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2130:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3486,"id":3493,"nodeType":"Return","src":"2123:57:20"}]},"documentation":{"id":3478,"nodeType":"StructuredDocumentation","src":"1794:219:20","text":" @dev Returns hash of a message that can be signed by owners.\n @param safe Safe to which the message is targeted.\n @param message Message that should be hashed.\n @return Message hash."},"functionSelector":"6ac24784","id":3495,"implemented":true,"kind":"function","modifiers":[],"name":"getMessageHashForSafe","nodeType":"FunctionDefinition","parameters":{"id":3483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":3495,"src":"2049:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},"typeName":{"id":3479,"name":"ISafe","nodeType":"UserDefinedTypeName","referencedDeclaration":4261,"src":"2049:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"visibility":"internal"},{"constant":false,"id":3482,"mutability":"mutable","name":"message","nodeType":"VariableDeclaration","scope":3495,"src":"2061:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3481,"name":"bytes","nodeType":"ElementaryTypeName","src":"2061:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2048:34:20"},"returnParameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3485,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3495,"src":"2104:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2104:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2103:9:20"},"scope":3635,"src":"2018:169:20","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4279],"body":{"id":3558,"nodeType":"Block","src":"2635:476:20","statements":[{"assignments":[3507],"declarations":[{"constant":false,"id":3507,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":3558,"src":"2680:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},"typeName":{"id":3506,"name":"ISafe","nodeType":"UserDefinedTypeName","referencedDeclaration":4261,"src":"2680:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"visibility":"internal"}],"id":3515,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":3511,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2707:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2707:10:20","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2699:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3509,"name":"address","nodeType":"ElementaryTypeName","src":"2699:8:20","stateMutability":"payable","typeDescriptions":{}}},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2699:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3508,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"2693:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2693:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"nodeType":"VariableDeclarationStatement","src":"2680:39:20"},{"assignments":[3517],"declarations":[{"constant":false,"id":3517,"mutability":"mutable","name":"messageData","nodeType":"VariableDeclaration","scope":3558,"src":"2729:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3516,"name":"bytes","nodeType":"ElementaryTypeName","src":"2729:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3525,"initialValue":{"arguments":[{"id":3519,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"2781:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},{"arguments":[{"id":3522,"name":"_dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"2798:9:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3520,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2787:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2787:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2787:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3518,"name":"encodeMessageDataForSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"2756:24:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_ISafe_$4261_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (contract ISafe,bytes memory) view returns (bytes memory)"}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2756:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2729:80:20"},{"assignments":[3527],"declarations":[{"constant":false,"id":3527,"mutability":"mutable","name":"messageHash","nodeType":"VariableDeclaration","scope":3558,"src":"2819:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2819:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3531,"initialValue":{"arguments":[{"id":3529,"name":"messageData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"2851:11:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3528,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2841:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2841:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2819:44:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3532,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"2877:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2877:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2898:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2877:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3554,"nodeType":"Block","src":"2999:70:20","statements":[{"expression":{"arguments":[{"id":3550,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"3034:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3551,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"3047:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":3547,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"3013:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"checkSignatures","nodeType":"MemberAccess","referencedDeclaration":4170,"src":"3013:20:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory) view external"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3013:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3553,"nodeType":"ExpressionStatement","src":"3013:45:20"}]},"id":3555,"nodeType":"IfStatement","src":"2873:196:20","trueBody":{"id":3546,"nodeType":"Block","src":"2901:92:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3539,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"2943:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3537,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"2923:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"signedMessages","nodeType":"MemberAccess","referencedDeclaration":4250,"src":"2923:19:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_uint256_$","typeString":"function (bytes32) view external returns (uint256)"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2923:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2959:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2923:37:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"48617368206e6f7420617070726f766564","id":3543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2962:19:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd8211c71ab965565e8a56b84284a02d17d4d89e6f05f14b26449d5de3a8c5b6","typeString":"literal_string \"Hash not approved\""},"value":"Hash not approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fd8211c71ab965565e8a56b84284a02d17d4d89e6f05f14b26449d5de3a8c5b6","typeString":"literal_string \"Hash not approved\""}],"id":3536,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2915:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2915:67:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3545,"nodeType":"ExpressionStatement","src":"2915:67:20"}]}},{"expression":{"id":3556,"name":"EIP1271_MAGIC_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"3085:19:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":3505,"id":3557,"nodeType":"Return","src":"3078:26:20"}]},"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"2193:327:20","text":" @notice Implementation of updated EIP-1271 signature validation method.\n @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\n @param _signature Signature byte array associated with _dataHash\n @return Updated EIP1271 magic value if signature is valid, otherwise 0x0"},"functionSelector":"1626ba7e","id":3559,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nodeType":"FunctionDefinition","overrides":{"id":3502,"nodeType":"OverrideSpecifier","overrides":[],"src":"2609:8:20"},"parameters":{"id":3501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"_dataHash","nodeType":"VariableDeclaration","scope":3559,"src":"2551:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2551:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3500,"mutability":"mutable","name":"_signature","nodeType":"VariableDeclaration","scope":3559,"src":"2570:25:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3499,"name":"bytes","nodeType":"ElementaryTypeName","src":"2570:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2550:46:20"},"returnParameters":{"id":3505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3504,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3559,"src":"2627:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3503,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2627:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2626:8:20"},"scope":3635,"src":"2525:586:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3589,"nodeType":"Block","src":"3276:198:20","statements":[{"assignments":[3567],"declarations":[{"constant":false,"id":3567,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":3589,"src":"3321:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},"typeName":{"id":3566,"name":"ISafe","nodeType":"UserDefinedTypeName","referencedDeclaration":4261,"src":"3321:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"visibility":"internal"}],"id":3575,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":3571,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3348:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3348:10:20","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3340:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3569,"name":"address","nodeType":"ElementaryTypeName","src":"3340:8:20","stateMutability":"payable","typeDescriptions":{}}},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3340:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3568,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"3334:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3334:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"nodeType":"VariableDeclarationStatement","src":"3321:39:20"},{"assignments":[3580,null],"declarations":[{"constant":false,"id":3580,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":3589,"src":"3371:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3578,"name":"address","nodeType":"ElementaryTypeName","src":"3371:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3579,"nodeType":"ArrayTypeName","src":"3371:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},null],"id":3586,"initialValue":{"arguments":[{"id":3583,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"3424:16:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"3130","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3442:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}],"expression":{"id":3581,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"3399:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getModulesPaginated","nodeType":"MemberAccess","referencedDeclaration":3991,"src":"3399:24:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$","typeString":"function (address,uint256) view external returns (address[] memory,address)"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3399:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$","typeString":"tuple(address[] memory,address)"}},"nodeType":"VariableDeclarationStatement","src":"3370:75:20"},{"expression":{"id":3587,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"3462:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3565,"id":3588,"nodeType":"Return","src":"3455:12:20"}]},"documentation":{"id":3560,"nodeType":"StructuredDocumentation","src":"3117:91:20","text":" @dev Returns array of first 10 modules.\n @return Array of modules."},"functionSelector":"b2494df3","id":3590,"implemented":true,"kind":"function","modifiers":[],"name":"getModules","nodeType":"FunctionDefinition","parameters":{"id":3561,"nodeType":"ParameterList","parameters":[],"src":"3232:2:20"},"returnParameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3564,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3590,"src":"3258:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3562,"name":"address","nodeType":"ElementaryTypeName","src":"3258:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3563,"nodeType":"ArrayTypeName","src":"3258:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3257:18:20"},"scope":3635,"src":"3213:261:20","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3605,"nodeType":"Block","src":"4168:2980:20","statements":[{"expression":{"id":3600,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4387:14:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3601,"nodeType":"ExpressionStatement","src":"4387:14:20"},{"expression":{"id":3602,"name":"calldataPayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"4411:15:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":3603,"nodeType":"ExpressionStatement","src":"4411:15:20"},{"AST":{"nodeType":"YulBlock","src":"4538:2556:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4552:22:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4569:4:20","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4563:5:20"},"nodeType":"YulFunctionCall","src":"4563:11:20"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"4556:3:20","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"4745:3:20"},{"kind":"string","nodeType":"YulLiteral","src":"4750:18:20","type":"","value":"Ժډ"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4738:6:20"},"nodeType":"YulFunctionCall","src":"4738:31:20"},"nodeType":"YulExpressionStatement","src":"4738:31:20"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"5184:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"5189:4:20","type":"","value":"0x04"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5180:3:20"},"nodeType":"YulFunctionCall","src":"5180:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"5196:4:20","type":"","value":"0x04"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5206:12:20"},"nodeType":"YulFunctionCall","src":"5206:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"5222:4:20","type":"","value":"0x04"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5202:3:20"},"nodeType":"YulFunctionCall","src":"5202:25:20"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"5167:12:20"},"nodeType":"YulFunctionCall","src":"5167:61:20"},"nodeType":"YulExpressionStatement","src":"5167:61:20"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"5635:3:20"},"nodeType":"YulFunctionCall","src":"5635:5:20"},{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"5762:6:20"},"nodeType":"YulFunctionCall","src":"5762:8:20"},{"kind":"number","nodeType":"YulLiteral","src":"5792:1:20","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"5815:3:20"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5840:12:20"},"nodeType":"YulFunctionCall","src":"5840:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"6322:4:20","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"6348:4:20","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"5609:4:20"},"nodeType":"YulFunctionCall","src":"5609:761:20"}],"functionName":{"name":"pop","nodeType":"YulIdentifier","src":"5588:3:20"},"nodeType":"YulFunctionCall","src":"5588:796:20"},"nodeType":"YulExpressionStatement","src":"5588:796:20"},{"nodeType":"YulVariableDeclaration","src":"6777:47:20","value":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"6801:14:20"},"nodeType":"YulFunctionCall","src":"6801:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"6819:4:20","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6797:3:20"},"nodeType":"YulFunctionCall","src":"6797:27:20"},"variables":[{"name":"responseSize","nodeType":"YulTypedName","src":"6781:12:20","type":""}]},{"nodeType":"YulAssignment","src":"6837:23:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6855:4:20","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6849:5:20"},"nodeType":"YulFunctionCall","src":"6849:11:20"},"variableNames":[{"name":"response","nodeType":"YulIdentifier","src":"6837:8:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6880:4:20","type":"","value":"0x40"},{"arguments":[{"name":"response","nodeType":"YulIdentifier","src":"6890:8:20"},{"name":"responseSize","nodeType":"YulIdentifier","src":"6900:12:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6886:3:20"},"nodeType":"YulFunctionCall","src":"6886:27:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6873:6:20"},"nodeType":"YulFunctionCall","src":"6873:41:20"},"nodeType":"YulExpressionStatement","src":"6873:41:20"},{"expression":{"arguments":[{"name":"response","nodeType":"YulIdentifier","src":"6942:8:20"},{"kind":"number","nodeType":"YulLiteral","src":"6952:4:20","type":"","value":"0x20"},{"name":"responseSize","nodeType":"YulIdentifier","src":"6958:12:20"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"6927:14:20"},"nodeType":"YulFunctionCall","src":"6927:44:20"},"nodeType":"YulExpressionStatement","src":"6927:44:20"},{"body":{"nodeType":"YulBlock","src":"7008:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"response","nodeType":"YulIdentifier","src":"7037:8:20"},{"kind":"number","nodeType":"YulLiteral","src":"7047:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:20"},"nodeType":"YulFunctionCall","src":"7033:19:20"},{"arguments":[{"name":"response","nodeType":"YulIdentifier","src":"7060:8:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7054:5:20"},"nodeType":"YulFunctionCall","src":"7054:15:20"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7026:6:20"},"nodeType":"YulFunctionCall","src":"7026:44:20"},"nodeType":"YulExpressionStatement","src":"7026:44:20"}]},"condition":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7001:4:20","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6995:5:20"},"nodeType":"YulFunctionCall","src":"6995:11:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6988:6:20"},"nodeType":"YulFunctionCall","src":"6988:19:20"},"nodeType":"YulIf","src":"6985:2:20"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":3598,"isOffset":false,"isSlot":false,"src":"6837:8:20","valueSize":1},{"declaration":3598,"isOffset":false,"isSlot":false,"src":"6890:8:20","valueSize":1},{"declaration":3598,"isOffset":false,"isSlot":false,"src":"6942:8:20","valueSize":1},{"declaration":3598,"isOffset":false,"isSlot":false,"src":"7037:8:20","valueSize":1},{"declaration":3598,"isOffset":false,"isSlot":false,"src":"7060:8:20","valueSize":1}],"id":3604,"nodeType":"InlineAssembly","src":"4529:2565:20"}]},"documentation":{"id":3591,"nodeType":"StructuredDocumentation","src":"3480:568:20","text":" @dev Performs a delegatecall on a targetContract in the context of self.\n Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\n @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n @param targetContract Address of the contract containing the code to execute.\n @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments)."},"functionSelector":"bd61951d","id":3606,"implemented":true,"kind":"function","modifiers":[],"name":"simulate","nodeType":"FunctionDefinition","parameters":{"id":3596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3593,"mutability":"mutable","name":"targetContract","nodeType":"VariableDeclaration","scope":3606,"src":"4071:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3592,"name":"address","nodeType":"ElementaryTypeName","src":"4071:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3595,"mutability":"mutable","name":"calldataPayload","nodeType":"VariableDeclaration","scope":3606,"src":"4095:30:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3594,"name":"bytes","nodeType":"ElementaryTypeName","src":"4095:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4070:56:20"},"returnParameters":{"id":3599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3598,"mutability":"mutable","name":"response","nodeType":"VariableDeclaration","scope":3606,"src":"4145:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3597,"name":"bytes","nodeType":"ElementaryTypeName","src":"4145:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4144:23:20"},"scope":3635,"src":"4053:3095:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3633,"nodeType":"Block","src":"8157:116:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3626,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"8211:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8211:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3628,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"8225:8:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3629,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"8235:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3630,"name":"requiredSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"8247:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3621,"name":"_manager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"8181:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8181:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8173:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3619,"name":"address","nodeType":"ElementaryTypeName","src":"8173:8:20","stateMutability":"payable","typeDescriptions":{}}},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8173:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3618,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"8167:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8167:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"checkNSignatures","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"8167:43:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,bytes memory,uint256) view external"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8167:99:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3632,"nodeType":"ExpressionStatement","src":"8167:99:20"}]},"documentation":{"id":3607,"nodeType":"StructuredDocumentation","src":"7154:823:20","text":" @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\n      The function was moved to the fallback handler as a part of\n      1.5.0 contract upgrade. It used to be a part of the Safe core contract, but\n      was replaced by the same function that also accepts an executor address.\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n @param requiredSignatures Amount of required valid signatures."},"functionSelector":"12fb68e0","id":3634,"implemented":true,"kind":"function","modifiers":[],"name":"checkNSignatures","nodeType":"FunctionDefinition","parameters":{"id":3616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3609,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":3634,"src":"8017:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8017:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3611,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3634,"src":"8043:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3610,"name":"bytes","nodeType":"ElementaryTypeName","src":"8043:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3613,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":3634,"src":"8079:23:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3612,"name":"bytes","nodeType":"ElementaryTypeName","src":"8079:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3615,"mutability":"mutable","name":"requiredSignatures","nodeType":"VariableDeclaration","scope":3634,"src":"8112:26:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3614,"name":"uint256","nodeType":"ElementaryTypeName","src":"8112:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8007:137:20"},"returnParameters":{"id":3617,"nodeType":"ParameterList","parameters":[],"src":"8157:0:20"},"scope":3635,"src":"7982:291:20","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3636,"src":"490:7785:20"}],"src":"42:8234:20"},"id":20},"contracts/handler/HandlerContext.sol":{"ast":{"absolutePath":"contracts/handler/HandlerContext.sol","exportedSymbols":{"HandlerContext":[3657]},"id":3658,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3637,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:21"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3638,"nodeType":"StructuredDocumentation","src":"75:431:21","text":" @title Handler Context - Allows the fallback handler to extract addition context from the calldata\n @dev The fallback manager appends the following context to the calldata:\n      1. Fallback manager caller address (non-padded)\n based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3657,"linearizedBaseContracts":[3657],"name":"HandlerContext","nodeType":"ContractDefinition","nodes":[{"body":{"id":3645,"nodeType":"Block","src":"1114:335:21","statements":[{"AST":{"nodeType":"YulBlock","src":"1315:80:21","statements":[{"nodeType":"YulAssignment","src":"1329:56:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1343:2:21","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1364:12:21"},"nodeType":"YulFunctionCall","src":"1364:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"1380:2:21","type":"","value":"20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1360:3:21"},"nodeType":"YulFunctionCall","src":"1360:23:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1347:12:21"},"nodeType":"YulFunctionCall","src":"1347:37:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1339:3:21"},"nodeType":"YulFunctionCall","src":"1339:46:21"},"variableNames":[{"name":"sender","nodeType":"YulIdentifier","src":"1329:6:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":3642,"isOffset":false,"isSlot":false,"src":"1329:6:21","valueSize":1}],"id":3644,"nodeType":"InlineAssembly","src":"1306:89:21"}]},"documentation":{"id":3639,"nodeType":"StructuredDocumentation","src":"546:502:21","text":" @notice Allows fetching the original caller address.\n @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\n      This function does not rely on a trusted forwarder. Use the returned value only to\n      check information against the calling manager.\n @return sender Original caller address."},"id":3646,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nodeType":"FunctionDefinition","parameters":{"id":3640,"nodeType":"ParameterList","parameters":[],"src":"1072:2:21"},"returnParameters":{"id":3643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3642,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":3646,"src":"1098:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3641,"name":"address","nodeType":"ElementaryTypeName","src":"1098:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1097:16:21"},"scope":3657,"src":"1053:396:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3655,"nodeType":"Block","src":"1614:34:21","statements":[{"expression":{"expression":{"id":3652,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1631:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1631:10:21","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":3651,"id":3654,"nodeType":"Return","src":"1624:17:21"}]},"documentation":{"id":3647,"nodeType":"StructuredDocumentation","src":"1455:102:21","text":" @notice Returns the FallbackManager address\n @return Fallback manager address"},"id":3656,"implemented":true,"kind":"function","modifiers":[],"name":"_manager","nodeType":"FunctionDefinition","parameters":{"id":3648,"nodeType":"ParameterList","parameters":[],"src":"1579:2:21"},"returnParameters":{"id":3651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3650,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3656,"src":"1605:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3649,"name":"address","nodeType":"ElementaryTypeName","src":"1605:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1604:9:21"},"scope":3657,"src":"1562:86:21","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3658,"src":"507:1143:21"}],"src":"42:1609:21"},"id":21},"contracts/handler/TokenCallbackHandler.sol":{"ast":{"absolutePath":"contracts/handler/TokenCallbackHandler.sol","exportedSymbols":{"ERC1155TokenReceiver":[3823],"ERC721TokenReceiver":[3841],"ERC777TokensRecipient":[3861],"IERC165":[3873],"TokenCallbackHandler":[3786]},"id":3787,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3659,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:22"},{"absolutePath":"contracts/interfaces/ERC1155TokenReceiver.sol","file":"../interfaces/ERC1155TokenReceiver.sol","id":3661,"nodeType":"ImportDirective","scope":3787,"sourceUnit":3824,"src":"75:76:22","symbolAliases":[{"foreign":{"id":3660,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:20:22","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ERC721TokenReceiver.sol","file":"../interfaces/ERC721TokenReceiver.sol","id":3663,"nodeType":"ImportDirective","scope":3787,"sourceUnit":3842,"src":"152:74:22","symbolAliases":[{"foreign":{"id":3662,"name":"ERC721TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"src":"160:19:22","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ERC777TokensRecipient.sol","file":"../interfaces/ERC777TokensRecipient.sol","id":3665,"nodeType":"ImportDirective","scope":3787,"sourceUnit":3862,"src":"227:78:22","symbolAliases":[{"foreign":{"id":3664,"name":"ERC777TokensRecipient","nodeType":"Identifier","overloadedDeclarations":[],"src":"235:21:22","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IERC165.sol","file":"../interfaces/IERC165.sol","id":3667,"nodeType":"ImportDirective","scope":3787,"sourceUnit":3874,"src":"306:50:22","symbolAliases":[{"foreign":{"id":3666,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"src":"314:7:22","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3669,"name":"ERC1155TokenReceiver","nodeType":"UserDefinedTypeName","referencedDeclaration":3823,"src":"553:20:22","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1155TokenReceiver_$3823","typeString":"contract ERC1155TokenReceiver"}},"id":3670,"nodeType":"InheritanceSpecifier","src":"553:20:22"},{"baseName":{"id":3671,"name":"ERC777TokensRecipient","nodeType":"UserDefinedTypeName","referencedDeclaration":3861,"src":"575:21:22","typeDescriptions":{"typeIdentifier":"t_contract$_ERC777TokensRecipient_$3861","typeString":"contract ERC777TokensRecipient"}},"id":3672,"nodeType":"InheritanceSpecifier","src":"575:21:22"},{"baseName":{"id":3673,"name":"ERC721TokenReceiver","nodeType":"UserDefinedTypeName","referencedDeclaration":3841,"src":"598:19:22","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721TokenReceiver_$3841","typeString":"contract ERC721TokenReceiver"}},"id":3674,"nodeType":"InheritanceSpecifier","src":"598:19:22"},{"baseName":{"id":3675,"name":"IERC165","nodeType":"UserDefinedTypeName","referencedDeclaration":3873,"src":"619:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC165_$3873","typeString":"contract IERC165"}},"id":3676,"nodeType":"InheritanceSpecifier","src":"619:7:22"}],"contractDependencies":[3823,3841,3861,3873],"contractKind":"contract","documentation":{"id":3668,"nodeType":"StructuredDocumentation","src":"358:161:22","text":" @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3786,"linearizedBaseContracts":[3786,3873,3841,3861,3823],"name":"TokenCallbackHandler","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3804],"body":{"id":3695,"nodeType":"Block","src":"874:34:22","statements":[{"expression":{"hexValue":"30786632336136653631","id":3693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:10:22","typeDescriptions":{"typeIdentifier":"t_rational_4063915617_by_1","typeString":"int_const 4063915617"},"value":"0xf23a6e61"},"functionReturnParameters":3692,"id":3694,"nodeType":"Return","src":"884:17:22"}]},"documentation":{"id":3677,"nodeType":"StructuredDocumentation","src":"633:117:22","text":" @notice Handles ERC1155 Token callback.\n return Standardized onERC1155Received return value."},"functionSelector":"f23a6e61","id":3696,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nodeType":"FunctionDefinition","overrides":{"id":3689,"nodeType":"OverrideSpecifier","overrides":[],"src":"848:8:22"},"parameters":{"id":3688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3679,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3696,"src":"782:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3678,"name":"address","nodeType":"ElementaryTypeName","src":"782:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3681,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3696,"src":"791:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3680,"name":"address","nodeType":"ElementaryTypeName","src":"791:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3683,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3696,"src":"800:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3682,"name":"uint256","nodeType":"ElementaryTypeName","src":"800:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3685,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3696,"src":"809:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3684,"name":"uint256","nodeType":"ElementaryTypeName","src":"809:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3687,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3696,"src":"818:14:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3686,"name":"bytes","nodeType":"ElementaryTypeName","src":"818:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"781:52:22"},"returnParameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3696,"src":"866:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3690,"name":"bytes4","nodeType":"ElementaryTypeName","src":"866:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"865:8:22"},"scope":3786,"src":"755:153:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3822],"body":{"id":3717,"nodeType":"Block","src":"1239:34:22","statements":[{"expression":{"hexValue":"30786263313937633831","id":3715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1256:10:22","typeDescriptions":{"typeIdentifier":"t_rational_3155786881_by_1","typeString":"int_const 3155786881"},"value":"0xbc197c81"},"functionReturnParameters":3714,"id":3716,"nodeType":"Return","src":"1249:17:22"}]},"documentation":{"id":3697,"nodeType":"StructuredDocumentation","src":"914:128:22","text":" @notice Handles ERC1155 Token batch callback.\n return Standardized onERC1155BatchReceived return value."},"functionSelector":"bc197c81","id":3718,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nodeType":"FunctionDefinition","overrides":{"id":3711,"nodeType":"OverrideSpecifier","overrides":[],"src":"1213:8:22"},"parameters":{"id":3710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3699,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3718,"src":"1088:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3698,"name":"address","nodeType":"ElementaryTypeName","src":"1088:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3701,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3718,"src":"1105:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3700,"name":"address","nodeType":"ElementaryTypeName","src":"1105:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3704,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3718,"src":"1122:18:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1122:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3703,"nodeType":"ArrayTypeName","src":"1122:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3707,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3718,"src":"1150:18:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1150:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3706,"nodeType":"ArrayTypeName","src":"1150:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3709,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3718,"src":"1178:14:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3708,"name":"bytes","nodeType":"ElementaryTypeName","src":"1178:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1078:120:22"},"returnParameters":{"id":3714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3713,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3718,"src":"1231:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3712,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1231:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1230:8:22"},"scope":3786,"src":"1047:226:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3840],"body":{"id":3735,"nodeType":"Block","src":"1509:34:22","statements":[{"expression":{"hexValue":"30783135306237613032","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1526:10:22","typeDescriptions":{"typeIdentifier":"t_rational_353073666_by_1","typeString":"int_const 353073666"},"value":"0x150b7a02"},"functionReturnParameters":3732,"id":3734,"nodeType":"Return","src":"1519:17:22"}]},"documentation":{"id":3719,"nodeType":"StructuredDocumentation","src":"1279:116:22","text":" @notice Handles ERC721 Token callback.\n  return Standardized onERC721Received return value."},"functionSelector":"150b7a02","id":3736,"implemented":true,"kind":"function","modifiers":[],"name":"onERC721Received","nodeType":"FunctionDefinition","overrides":{"id":3729,"nodeType":"OverrideSpecifier","overrides":[],"src":"1483:8:22"},"parameters":{"id":3728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3736,"src":"1426:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3720,"name":"address","nodeType":"ElementaryTypeName","src":"1426:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3723,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3736,"src":"1435:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3722,"name":"address","nodeType":"ElementaryTypeName","src":"1435:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3725,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3736,"src":"1444:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1444:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3727,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3736,"src":"1453:14:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3726,"name":"bytes","nodeType":"ElementaryTypeName","src":"1453:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1425:43:22"},"returnParameters":{"id":3732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3731,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3736,"src":"1501:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3730,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1501:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1500:8:22"},"scope":3786,"src":"1400:143:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3860],"body":{"id":3753,"nodeType":"Block","src":"1767:84:22","statements":[]},"documentation":{"id":3737,"nodeType":"StructuredDocumentation","src":"1549:98:22","text":" @notice Handles ERC777 Token callback.\n return nothing (not standardized)"},"functionSelector":"0023de29","id":3754,"implemented":true,"kind":"function","modifiers":[],"name":"tokensReceived","nodeType":"FunctionDefinition","overrides":{"id":3751,"nodeType":"OverrideSpecifier","overrides":[],"src":"1758:8:22"},"parameters":{"id":3750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3739,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3754,"src":"1676:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3738,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3741,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3754,"src":"1685:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3740,"name":"address","nodeType":"ElementaryTypeName","src":"1685:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3743,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3754,"src":"1694:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3742,"name":"address","nodeType":"ElementaryTypeName","src":"1694:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3745,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3754,"src":"1703:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3747,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3754,"src":"1712:14:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3746,"name":"bytes","nodeType":"ElementaryTypeName","src":"1712:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3749,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3754,"src":"1728:14:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3748,"name":"bytes","nodeType":"ElementaryTypeName","src":"1728:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1675:68:22"},"returnParameters":{"id":3752,"nodeType":"ParameterList","parameters":[],"src":"1767:0:22"},"scope":3786,"src":"1652:199:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3872],"body":{"id":3784,"nodeType":"Block","src":"2169:213:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3763,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"2198:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3765,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"2218:20:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155TokenReceiver_$3823_$","typeString":"type(contract ERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ERC1155TokenReceiver_$3823_$","typeString":"type(contract ERC1155TokenReceiver)"}],"id":3764,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2213:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2213:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ERC1155TokenReceiver_$3823","typeString":"type(contract ERC1155TokenReceiver)"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2213:38:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2198:53:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3769,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"2267:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3771,"name":"ERC721TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"2287:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721TokenReceiver_$3841_$","typeString":"type(contract ERC721TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ERC721TokenReceiver_$3841_$","typeString":"type(contract ERC721TokenReceiver)"}],"id":3770,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2282:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2282:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ERC721TokenReceiver_$3841","typeString":"type(contract ERC721TokenReceiver)"}},"id":3773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2282:37:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2267:52:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2198:121:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3776,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"2335:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3778,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"2355:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3873_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3873_$","typeString":"type(contract IERC165)"}],"id":3777,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2350:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2350:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3873","typeString":"type(contract IERC165)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2350:25:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2335:40:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2198:177:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3762,"id":3783,"nodeType":"Return","src":"2179:196:22"}]},"documentation":{"id":3755,"nodeType":"StructuredDocumentation","src":"1857:214:22","text":" @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\n @param interfaceId Id of the interface.\n @return if the interface is supported."},"functionSelector":"01ffc9a7","id":3785,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nodeType":"FunctionDefinition","overrides":{"id":3759,"nodeType":"OverrideSpecifier","overrides":[],"src":"2145:8:22"},"parameters":{"id":3758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3757,"mutability":"mutable","name":"interfaceId","nodeType":"VariableDeclaration","scope":3785,"src":"2103:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3756,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2103:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2102:20:22"},"returnParameters":{"id":3762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3761,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3785,"src":"2163:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3760,"name":"bool","nodeType":"ElementaryTypeName","src":"2163:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2162:6:22"},"scope":3786,"src":"2076:306:22","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":3787,"src":"520:1864:22"}],"src":"42:2343:22"},"id":22},"contracts/interfaces/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"contracts/interfaces/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[3823]},"id":3824,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3788,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:23"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3823,"linearizedBaseContracts":[3823],"name":"ERC1155TokenReceiver","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3789,"nodeType":"StructuredDocumentation","src":"178:1086:23","text":" @notice Handle the receipt of a single ERC1155 token type.\n @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n      This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n      This function MUST revert if it rejects the transfer.\n      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n @param _operator  The address which initiated the transfer (i.e. msg.sender).\n @param _from      The address which previously owned the token.\n @param _id        The ID of the token being transferred.\n @param _value     The amount of tokens being transferred.\n @param _data      Additional data with no specified format.\n @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`."},"functionSelector":"f23a6e61","id":3804,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nodeType":"FunctionDefinition","parameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3791,"mutability":"mutable","name":"_operator","nodeType":"VariableDeclaration","scope":3804,"src":"1305:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3790,"name":"address","nodeType":"ElementaryTypeName","src":"1305:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3793,"mutability":"mutable","name":"_from","nodeType":"VariableDeclaration","scope":3804,"src":"1332:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3792,"name":"address","nodeType":"ElementaryTypeName","src":"1332:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3795,"mutability":"mutable","name":"_id","nodeType":"VariableDeclaration","scope":3804,"src":"1355:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3794,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3797,"mutability":"mutable","name":"_value","nodeType":"VariableDeclaration","scope":3804,"src":"1376:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3796,"name":"uint256","nodeType":"ElementaryTypeName","src":"1376:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3799,"mutability":"mutable","name":"_data","nodeType":"VariableDeclaration","scope":3804,"src":"1400:20:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3798,"name":"bytes","nodeType":"ElementaryTypeName","src":"1400:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1295:131:23"},"returnParameters":{"id":3803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3802,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3804,"src":"1445:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3801,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1445:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1444:8:23"},"scope":3823,"src":"1269:184:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3805,"nodeType":"StructuredDocumentation","src":"1459:1248:23","text":" @notice Handle the receipt of multiple ERC1155 token types.\n @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n      This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n      This function MUST revert if it rejects the transfer(s).\n      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\n @param _from      The address which previously owned the token.\n @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\n @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\n @param _data      Additional data with no specified format.\n @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`."},"functionSelector":"bc197c81","id":3822,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nodeType":"FunctionDefinition","parameters":{"id":3818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3807,"mutability":"mutable","name":"_operator","nodeType":"VariableDeclaration","scope":3822,"src":"2753:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3806,"name":"address","nodeType":"ElementaryTypeName","src":"2753:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3809,"mutability":"mutable","name":"_from","nodeType":"VariableDeclaration","scope":3822,"src":"2780:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3808,"name":"address","nodeType":"ElementaryTypeName","src":"2780:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3812,"mutability":"mutable","name":"_ids","nodeType":"VariableDeclaration","scope":3822,"src":"2803:23:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3810,"name":"uint256","nodeType":"ElementaryTypeName","src":"2803:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3811,"nodeType":"ArrayTypeName","src":"2803:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3815,"mutability":"mutable","name":"_values","nodeType":"VariableDeclaration","scope":3822,"src":"2836:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3813,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3814,"nodeType":"ArrayTypeName","src":"2836:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3817,"mutability":"mutable","name":"_data","nodeType":"VariableDeclaration","scope":3822,"src":"2872:20:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3816,"name":"bytes","nodeType":"ElementaryTypeName","src":"2872:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2743:155:23"},"returnParameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3820,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3822,"src":"2917:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3819,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2917:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2916:8:23"},"scope":3823,"src":"2712:213:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3824,"src":"141:2786:23"}],"src":"42:2886:23"},"id":23},"contracts/interfaces/ERC721TokenReceiver.sol":{"ast":{"absolutePath":"contracts/interfaces/ERC721TokenReceiver.sol","exportedSymbols":{"ERC721TokenReceiver":[3841]},"id":3842,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3825,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:24"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3826,"nodeType":"StructuredDocumentation","src":"75:72:24","text":"@dev Note: the ERC-165 identifier for this interface is 0x150b7a02."},"fullyImplemented":false,"id":3841,"linearizedBaseContracts":[3841],"name":"ERC721TokenReceiver","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3827,"nodeType":"StructuredDocumentation","src":"183:769:24","text":" @notice Handle the receipt of an NFT\n @dev The ERC721 smart contract calls this function on the recipient\n  after a `transfer`. This function MAY throw to revert and reject the\n  transfer. Return of other than the magic value MUST result in the\n  transaction being reverted.\n  Note: the contract address is always the message sender.\n @param _operator The address which called `safeTransferFrom` function.\n @param _from The address which previously owned the token.\n @param _tokenId The NFT identifier which is being transferred.\n @param _data Additional data with no specified format.\n @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n  unless throwing"},"functionSelector":"150b7a02","id":3840,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nodeType":"FunctionDefinition","parameters":{"id":3836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3829,"mutability":"mutable","name":"_operator","nodeType":"VariableDeclaration","scope":3840,"src":"983:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3828,"name":"address","nodeType":"ElementaryTypeName","src":"983:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3831,"mutability":"mutable","name":"_from","nodeType":"VariableDeclaration","scope":3840,"src":"1002:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3830,"name":"address","nodeType":"ElementaryTypeName","src":"1002:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3833,"mutability":"mutable","name":"_tokenId","nodeType":"VariableDeclaration","scope":3840,"src":"1017:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1017:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3835,"mutability":"mutable","name":"_data","nodeType":"VariableDeclaration","scope":3840,"src":"1035:20:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3834,"name":"bytes","nodeType":"ElementaryTypeName","src":"1035:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"982:74:24"},"returnParameters":{"id":3839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3838,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3840,"src":"1075:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3837,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1075:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1074:8:24"},"scope":3841,"src":"957:126:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3842,"src":"147:938:24"}],"src":"42:1044:24"},"id":24},"contracts/interfaces/ERC777TokensRecipient.sol":{"ast":{"absolutePath":"contracts/interfaces/ERC777TokensRecipient.sol","exportedSymbols":{"ERC777TokensRecipient":[3861]},"id":3862,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3843,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:25"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3844,"nodeType":"StructuredDocumentation","src":"75:239:25","text":" @title ERC777TokensRecipient\n @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\n The contract receiving the tokens must implement this interface in order to receive the tokens."},"fullyImplemented":false,"id":3861,"linearizedBaseContracts":[3861],"name":"ERC777TokensRecipient","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3845,"nodeType":"StructuredDocumentation","src":"353:586:25","text":" @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\n @param operator The address of the operator performing the transfer or minting operation.\n @param from The address of the sender.\n @param to The address of the recipient.\n @param amount The amount of tokens that were transferred or minted.\n @param data Additional data that was passed during the transfer or minting operation.\n @param operatorData Additional data that was passed by the operator during the transfer or minting operation."},"functionSelector":"0023de29","id":3860,"implemented":false,"kind":"function","modifiers":[],"name":"tokensReceived","nodeType":"FunctionDefinition","parameters":{"id":3858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","scope":3860,"src":"977:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3846,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3849,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":3860,"src":"1003:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3848,"name":"address","nodeType":"ElementaryTypeName","src":"1003:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3851,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3860,"src":"1025:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3850,"name":"address","nodeType":"ElementaryTypeName","src":"1025:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3853,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3860,"src":"1045:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1045:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3855,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":3860,"src":"1069:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3854,"name":"bytes","nodeType":"ElementaryTypeName","src":"1069:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3857,"mutability":"mutable","name":"operatorData","nodeType":"VariableDeclaration","scope":3860,"src":"1098:27:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3856,"name":"bytes","nodeType":"ElementaryTypeName","src":"1098:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"967:164:25"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[],"src":"1140:0:25"},"scope":3861,"src":"944:197:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3862,"src":"315:828:25"}],"src":"42:1102:25"},"id":25},"contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[3873]},"id":3874,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3863,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:26"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3864,"nodeType":"StructuredDocumentation","src":"75:137:26","text":"@notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol"},"fullyImplemented":false,"id":3873,"linearizedBaseContracts":[3873],"name":"IERC165","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3865,"nodeType":"StructuredDocumentation","src":"236:339:26","text":" @dev Returns true if this contract implements the interface defined by `interfaceId`.\n See the corresponding EIP section\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3872,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nodeType":"FunctionDefinition","parameters":{"id":3868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3867,"mutability":"mutable","name":"interfaceId","nodeType":"VariableDeclaration","scope":3872,"src":"607:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3866,"name":"bytes4","nodeType":"ElementaryTypeName","src":"607:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"606:20:26"},"returnParameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3870,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3872,"src":"650:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3869,"name":"bool","nodeType":"ElementaryTypeName","src":"650:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"649:6:26"},"scope":3873,"src":"580:76:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3874,"src":"212:446:26"}],"src":"42:617:26"},"id":26},"contracts/interfaces/IFallbackManager.sol":{"ast":{"absolutePath":"contracts/interfaces/IFallbackManager.sol","exportedSymbols":{"IFallbackManager":[3887]},"id":3888,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3875,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:27"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3876,"nodeType":"StructuredDocumentation","src":"75:142:27","text":" @title IFallbackManager - A contract interface managing fallback calls made to this contract.\n @author @safe-global/safe-protocol"},"fullyImplemented":false,"id":3887,"linearizedBaseContracts":[3887],"name":"IFallbackManager","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":3880,"name":"ChangedFallbackHandler","nodeType":"EventDefinition","parameters":{"id":3879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3878,"indexed":true,"mutability":"mutable","name":"handler","nodeType":"VariableDeclaration","scope":3880,"src":"280:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3877,"name":"address","nodeType":"ElementaryTypeName","src":"280:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"279:25:27"},"src":"251:54:27"},{"documentation":{"id":3881,"nodeType":"StructuredDocumentation","src":"311:314:27","text":" @notice Set Fallback Handler to `handler` for the Safe.\n @dev Only fallback calls without value and with data will be forwarded.\n      This can only be done via a Safe transaction.\n      Cannot be set to the Safe itself.\n @param handler contract to handle fallback calls."},"functionSelector":"f08a0323","id":3886,"implemented":false,"kind":"function","modifiers":[],"name":"setFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":3884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3883,"mutability":"mutable","name":"handler","nodeType":"VariableDeclaration","scope":3886,"src":"658:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3882,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"657:17:27"},"returnParameters":{"id":3885,"nodeType":"ParameterList","parameters":[],"src":"683:0:27"},"scope":3887,"src":"630:54:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3888,"src":"218:468:27"}],"src":"42:645:27"},"id":27},"contracts/interfaces/IGuardManager.sol":{"ast":{"absolutePath":"contracts/interfaces/IGuardManager.sol","exportedSymbols":{"IGuardManager":[3901]},"id":3902,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3889,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"86:31:28"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3890,"nodeType":"StructuredDocumentation","src":"119:176:28","text":" @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\n @author @safe-global/safe-protocol"},"fullyImplemented":false,"id":3901,"linearizedBaseContracts":[3901],"name":"IGuardManager","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":3894,"name":"ChangedGuard","nodeType":"EventDefinition","parameters":{"id":3893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"indexed":true,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":3894,"src":"345:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3891,"name":"address","nodeType":"ElementaryTypeName","src":"345:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"344:23:28"},"src":"326:42:28"},{"documentation":{"id":3895,"nodeType":"StructuredDocumentation","src":"374:578:28","text":" @dev Set a guard that checks transactions before execution\n      This can only be done via a Safe transaction.\n      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,\n        a broken guard can cause a denial of service for the Safe. Make sure to carefully\n        audit the guard code and design recovery mechanisms.\n @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\n @param guard The address of the guard to be used or the 0 address to disable the guard"},"functionSelector":"e19a9dd9","id":3900,"implemented":false,"kind":"function","modifiers":[],"name":"setGuard","nodeType":"FunctionDefinition","parameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":3900,"src":"975:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3896,"name":"address","nodeType":"ElementaryTypeName","src":"975:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"974:15:28"},"returnParameters":{"id":3899,"nodeType":"ParameterList","parameters":[],"src":"998:0:28"},"scope":3901,"src":"957:42:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3902,"src":"296:705:28"}],"src":"86:916:28"},"id":28},"contracts/interfaces/IModuleManager.sol":{"ast":{"absolutePath":"contracts/interfaces/IModuleManager.sol","exportedSymbols":{"Enum":[4287],"IGuardManager":[3901],"IModuleManager":[3992]},"id":3993,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3903,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:29"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../libraries/Enum.sol","id":3905,"nodeType":"ImportDirective","scope":3993,"sourceUnit":4288,"src":"74:43:29","symbolAliases":[{"foreign":{"id":3904,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"82:4:29","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGuardManager.sol","file":"./IGuardManager.sol","id":3907,"nodeType":"ImportDirective","scope":3993,"sourceUnit":3902,"src":"118:50:29","symbolAliases":[{"foreign":{"id":3906,"name":"IGuardManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"126:13:29","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3909,"name":"IGuardManager","nodeType":"UserDefinedTypeName","referencedDeclaration":3901,"src":"666:13:29","typeDescriptions":{"typeIdentifier":"t_contract$_IGuardManager_$3901","typeString":"contract IGuardManager"}},"id":3910,"nodeType":"InheritanceSpecifier","src":"666:13:29"}],"contractDependencies":[3901],"contractKind":"interface","documentation":{"id":3908,"nodeType":"StructuredDocumentation","src":"170:467:29","text":" @title IModuleManager - An interface of contract managing Safe modules\n @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\n⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \nso only trusted and audited modules should be added to a Safe. A malicious module can\ncompletely takeover a Safe.\n @author @safe-global/safe-protocol"},"fullyImplemented":false,"id":3992,"linearizedBaseContracts":[3992,3901],"name":"IModuleManager","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":3914,"name":"EnabledModule","nodeType":"EventDefinition","parameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"indexed":true,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3914,"src":"706:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3911,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"705:24:29"},"src":"686:44:29"},{"anonymous":false,"id":3918,"name":"DisabledModule","nodeType":"EventDefinition","parameters":{"id":3917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"indexed":true,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3918,"src":"756:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3915,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:24:29"},"src":"735:45:29"},{"anonymous":false,"id":3922,"name":"ExecutionFromModuleSuccess","nodeType":"EventDefinition","parameters":{"id":3921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3920,"indexed":true,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3922,"src":"818:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3919,"name":"address","nodeType":"ElementaryTypeName","src":"818:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"817:24:29"},"src":"785:57:29"},{"anonymous":false,"id":3926,"name":"ExecutionFromModuleFailure","nodeType":"EventDefinition","parameters":{"id":3925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3924,"indexed":true,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3926,"src":"880:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3923,"name":"address","nodeType":"ElementaryTypeName","src":"880:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"879:24:29"},"src":"847:57:29"},{"documentation":{"id":3927,"nodeType":"StructuredDocumentation","src":"910:173:29","text":" @notice Enables the module `module` for the Safe.\n @dev This can only be done via a Safe transaction.\n @param module Module to be whitelisted."},"functionSelector":"610b5925","id":3932,"implemented":false,"kind":"function","modifiers":[],"name":"enableModule","nodeType":"FunctionDefinition","parameters":{"id":3930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3929,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3932,"src":"1110:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3928,"name":"address","nodeType":"ElementaryTypeName","src":"1110:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1109:16:29"},"returnParameters":{"id":3931,"nodeType":"ParameterList","parameters":[],"src":"1134:0:29"},"scope":3992,"src":"1088:47:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3933,"nodeType":"StructuredDocumentation","src":"1141:239:29","text":" @notice Disables the module `module` for the Safe.\n @dev This can only be done via a Safe transaction.\n @param prevModule Previous module in the modules linked list.\n @param module Module to be removed."},"functionSelector":"e009cfde","id":3940,"implemented":false,"kind":"function","modifiers":[],"name":"disableModule","nodeType":"FunctionDefinition","parameters":{"id":3938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3935,"mutability":"mutable","name":"prevModule","nodeType":"VariableDeclaration","scope":3940,"src":"1408:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3934,"name":"address","nodeType":"ElementaryTypeName","src":"1408:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3937,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3940,"src":"1428:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3936,"name":"address","nodeType":"ElementaryTypeName","src":"1428:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1407:36:29"},"returnParameters":{"id":3939,"nodeType":"ParameterList","parameters":[],"src":"1452:0:29"},"scope":3992,"src":"1385:68:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3941,"nodeType":"StructuredDocumentation","src":"1459:511:29","text":" @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\n @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction.\n @return success Boolean flag indicating if the call succeeded."},"functionSelector":"468721a7","id":3954,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nodeType":"FunctionDefinition","parameters":{"id":3950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3954,"src":"2019:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3942,"name":"address","nodeType":"ElementaryTypeName","src":"2019:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3945,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":3954,"src":"2039:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3944,"name":"uint256","nodeType":"ElementaryTypeName","src":"2039:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3947,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":3954,"src":"2062:17:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3946,"name":"bytes","nodeType":"ElementaryTypeName","src":"2062:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3949,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":3954,"src":"2089:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":3948,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2089:14:29","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"2009:110:29"},"returnParameters":{"id":3953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3952,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":3954,"src":"2138:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3951,"name":"bool","nodeType":"ElementaryTypeName","src":"2138:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2137:14:29"},"scope":3992,"src":"1975:177:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3955,"nodeType":"StructuredDocumentation","src":"2158:480:29","text":" @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction.\n @return success Boolean flag indicating if the call succeeded.\n @return returnData Data returned by the call."},"functionSelector":"5229073f","id":3970,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModuleReturnData","nodeType":"FunctionDefinition","parameters":{"id":3964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3957,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":3970,"src":"2697:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3956,"name":"address","nodeType":"ElementaryTypeName","src":"2697:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3959,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":3970,"src":"2717:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2717:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3961,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":3970,"src":"2740:17:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3960,"name":"bytes","nodeType":"ElementaryTypeName","src":"2740:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3963,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":3970,"src":"2767:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":3962,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"2767:14:29","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"2687:110:29"},"returnParameters":{"id":3969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3966,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":3970,"src":"2816:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3965,"name":"bool","nodeType":"ElementaryTypeName","src":"2816:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3968,"mutability":"mutable","name":"returnData","nodeType":"VariableDeclaration","scope":3970,"src":"2830:23:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3967,"name":"bytes","nodeType":"ElementaryTypeName","src":"2830:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2815:39:29"},"scope":3992,"src":"2643:212:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3971,"nodeType":"StructuredDocumentation","src":"2861:103:29","text":" @notice Returns if an module is enabled\n @return True if the module is enabled"},"functionSelector":"2d9ad53d","id":3978,"implemented":false,"kind":"function","modifiers":[],"name":"isModuleEnabled","nodeType":"FunctionDefinition","parameters":{"id":3974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3973,"mutability":"mutable","name":"module","nodeType":"VariableDeclaration","scope":3978,"src":"2994:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3972,"name":"address","nodeType":"ElementaryTypeName","src":"2994:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2993:16:29"},"returnParameters":{"id":3977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3976,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3978,"src":"3033:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3975,"name":"bool","nodeType":"ElementaryTypeName","src":"3033:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3032:6:29"},"scope":3992,"src":"2969:70:29","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3979,"nodeType":"StructuredDocumentation","src":"3045:495:29","text":" @notice Returns an array of modules.\n         If all entries fit into a single page, the next pointer will be 0x1.\n         If another page is present, next will be the last element of the returned array.\n @param start Start of the page. Has to be a module or start pointer (0x1 address)\n @param pageSize Maximum number of modules that should be returned. Has to be > 0\n @return array Array of modules.\n @return next Start of the next page."},"functionSelector":"cc2f8452","id":3991,"implemented":false,"kind":"function","modifiers":[],"name":"getModulesPaginated","nodeType":"FunctionDefinition","parameters":{"id":3984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3981,"mutability":"mutable","name":"start","nodeType":"VariableDeclaration","scope":3991,"src":"3574:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3980,"name":"address","nodeType":"ElementaryTypeName","src":"3574:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3983,"mutability":"mutable","name":"pageSize","nodeType":"VariableDeclaration","scope":3991,"src":"3589:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3982,"name":"uint256","nodeType":"ElementaryTypeName","src":"3589:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3573:33:29"},"returnParameters":{"id":3990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3987,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":3991,"src":"3630:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3985,"name":"address","nodeType":"ElementaryTypeName","src":"3630:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3986,"nodeType":"ArrayTypeName","src":"3630:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3989,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":3991,"src":"3654:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3988,"name":"address","nodeType":"ElementaryTypeName","src":"3654:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3629:38:29"},"scope":3992,"src":"3545:123:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3993,"src":"638:3032:29"}],"src":"42:3629:29"},"id":29},"contracts/interfaces/IOwnerManager.sol":{"ast":{"absolutePath":"contracts/interfaces/IOwnerManager.sol","exportedSymbols":{"IOwnerManager":[4063]},"id":4064,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3994,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:30"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":3995,"nodeType":"StructuredDocumentation","src":"75:163:30","text":" @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\n @author @safe-global/safe-protocol"},"fullyImplemented":false,"id":4063,"linearizedBaseContracts":[4063],"name":"IOwnerManager","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":3999,"name":"AddedOwner","nodeType":"EventDefinition","parameters":{"id":3998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3997,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":3999,"src":"286:21:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3996,"name":"address","nodeType":"ElementaryTypeName","src":"286:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"285:23:30"},"src":"269:40:30"},{"anonymous":false,"id":4003,"name":"RemovedOwner","nodeType":"EventDefinition","parameters":{"id":4002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4001,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":4003,"src":"333:21:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4000,"name":"address","nodeType":"ElementaryTypeName","src":"333:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"332:23:30"},"src":"314:42:30"},{"anonymous":false,"id":4007,"name":"ChangedThreshold","nodeType":"EventDefinition","parameters":{"id":4006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4005,"indexed":false,"mutability":"mutable","name":"threshold","nodeType":"VariableDeclaration","scope":4007,"src":"384:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4004,"name":"uint256","nodeType":"ElementaryTypeName","src":"384:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"383:19:30"},"src":"361:42:30"},{"documentation":{"id":4008,"nodeType":"StructuredDocumentation","src":"409:241:30","text":" @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n @dev This can only be done via a Safe transaction.\n @param owner New owner address.\n @param _threshold New threshold."},"functionSelector":"0d582f13","id":4015,"implemented":false,"kind":"function","modifiers":[],"name":"addOwnerWithThreshold","nodeType":"FunctionDefinition","parameters":{"id":4013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4010,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":4015,"src":"686:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4009,"name":"address","nodeType":"ElementaryTypeName","src":"686:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4012,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":4015,"src":"701:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"701:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"685:35:30"},"returnParameters":{"id":4014,"nodeType":"ParameterList","parameters":[],"src":"729:0:30"},"scope":4063,"src":"655:75:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4016,"nodeType":"StructuredDocumentation","src":"736:345:30","text":" @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n @dev This can only be done via a Safe transaction.\n @param prevOwner Owner that pointed to the owner to be removed in the linked list\n @param owner Owner address to be removed.\n @param _threshold New threshold."},"functionSelector":"f8dc5dd9","id":4025,"implemented":false,"kind":"function","modifiers":[],"name":"removeOwner","nodeType":"FunctionDefinition","parameters":{"id":4023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"prevOwner","nodeType":"VariableDeclaration","scope":4025,"src":"1107:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4017,"name":"address","nodeType":"ElementaryTypeName","src":"1107:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4020,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":4025,"src":"1126:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4019,"name":"address","nodeType":"ElementaryTypeName","src":"1126:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4022,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":4025,"src":"1141:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4021,"name":"uint256","nodeType":"ElementaryTypeName","src":"1141:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1106:54:30"},"returnParameters":{"id":4024,"nodeType":"ParameterList","parameters":[],"src":"1169:0:30"},"scope":4063,"src":"1086:84:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4026,"nodeType":"StructuredDocumentation","src":"1176:328:30","text":" @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n @dev This can only be done via a Safe transaction.\n @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n @param oldOwner Owner address to be replaced.\n @param newOwner New owner address."},"functionSelector":"e318b52b","id":4035,"implemented":false,"kind":"function","modifiers":[],"name":"swapOwner","nodeType":"FunctionDefinition","parameters":{"id":4033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4028,"mutability":"mutable","name":"prevOwner","nodeType":"VariableDeclaration","scope":4035,"src":"1528:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4027,"name":"address","nodeType":"ElementaryTypeName","src":"1528:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4030,"mutability":"mutable","name":"oldOwner","nodeType":"VariableDeclaration","scope":4035,"src":"1547:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4029,"name":"address","nodeType":"ElementaryTypeName","src":"1547:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4032,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","scope":4035,"src":"1565:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4031,"name":"address","nodeType":"ElementaryTypeName","src":"1565:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1527:55:30"},"returnParameters":{"id":4034,"nodeType":"ParameterList","parameters":[],"src":"1591:0:30"},"scope":4063,"src":"1509:83:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4036,"nodeType":"StructuredDocumentation","src":"1598:175:30","text":" @notice Changes the threshold of the Safe to `_threshold`.\n @dev This can only be done via a Safe transaction.\n @param _threshold New threshold."},"functionSelector":"694e80c3","id":4041,"implemented":false,"kind":"function","modifiers":[],"name":"changeThreshold","nodeType":"FunctionDefinition","parameters":{"id":4039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4038,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":4041,"src":"1803:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"1803:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1802:20:30"},"returnParameters":{"id":4040,"nodeType":"ParameterList","parameters":[],"src":"1831:0:30"},"scope":4063,"src":"1778:54:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4042,"nodeType":"StructuredDocumentation","src":"1838:146:30","text":" @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\n @return Threshold number."},"functionSelector":"e75235b8","id":4047,"implemented":false,"kind":"function","modifiers":[],"name":"getThreshold","nodeType":"FunctionDefinition","parameters":{"id":4043,"nodeType":"ParameterList","parameters":[],"src":"2010:2:30"},"returnParameters":{"id":4046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4045,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4047,"src":"2036:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4044,"name":"uint256","nodeType":"ElementaryTypeName","src":"2036:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2035:9:30"},"scope":4063,"src":"1989:56:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4048,"nodeType":"StructuredDocumentation","src":"2051:127:30","text":" @notice Returns if `owner` is an owner of the Safe.\n @return Boolean if owner is an owner of the Safe."},"functionSelector":"2f54bf6e","id":4055,"implemented":false,"kind":"function","modifiers":[],"name":"isOwner","nodeType":"FunctionDefinition","parameters":{"id":4051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4050,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":4055,"src":"2200:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4049,"name":"address","nodeType":"ElementaryTypeName","src":"2200:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2199:15:30"},"returnParameters":{"id":4054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4055,"src":"2238:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4052,"name":"bool","nodeType":"ElementaryTypeName","src":"2238:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2237:6:30"},"scope":4063,"src":"2183:61:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4056,"nodeType":"StructuredDocumentation","src":"2250:94:30","text":" @notice Returns a list of Safe owners.\n @return Array of Safe owners."},"functionSelector":"a0e67e2b","id":4062,"implemented":false,"kind":"function","modifiers":[],"name":"getOwners","nodeType":"FunctionDefinition","parameters":{"id":4057,"nodeType":"ParameterList","parameters":[],"src":"2367:2:30"},"returnParameters":{"id":4061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4060,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4062,"src":"2393:16:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4058,"name":"address","nodeType":"ElementaryTypeName","src":"2393:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4059,"nodeType":"ArrayTypeName","src":"2393:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2392:18:30"},"scope":4063,"src":"2349:62:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4064,"src":"239:2174:30"}],"src":"42:2372:30"},"id":30},"contracts/interfaces/ISafe.sol":{"ast":{"absolutePath":"contracts/interfaces/ISafe.sol","exportedSymbols":{"Enum":[4287],"IFallbackManager":[3887],"IModuleManager":[3992],"IOwnerManager":[4063],"ISafe":[4261]},"id":4262,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4065,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:31"},{"absolutePath":"contracts/libraries/Enum.sol","file":"../libraries/Enum.sol","id":4067,"nodeType":"ImportDirective","scope":4262,"sourceUnit":4288,"src":"75:43:31","symbolAliases":[{"foreign":{"id":4066,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:4:31","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IModuleManager.sol","file":"./IModuleManager.sol","id":4069,"nodeType":"ImportDirective","scope":4262,"sourceUnit":3993,"src":"119:52:31","symbolAliases":[{"foreign":{"id":4068,"name":"IModuleManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"127:14:31","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IOwnerManager.sol","file":"./IOwnerManager.sol","id":4071,"nodeType":"ImportDirective","scope":4262,"sourceUnit":4064,"src":"172:50:31","symbolAliases":[{"foreign":{"id":4070,"name":"IOwnerManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"180:13:31","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IFallbackManager.sol","file":"./IFallbackManager.sol","id":4073,"nodeType":"ImportDirective","scope":4262,"sourceUnit":3888,"src":"223:56:31","symbolAliases":[{"foreign":{"id":4072,"name":"IFallbackManager","nodeType":"Identifier","overloadedDeclarations":[],"src":"231:16:31","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4075,"name":"IModuleManager","nodeType":"UserDefinedTypeName","referencedDeclaration":3992,"src":"469:14:31","typeDescriptions":{"typeIdentifier":"t_contract$_IModuleManager_$3992","typeString":"contract IModuleManager"}},"id":4076,"nodeType":"InheritanceSpecifier","src":"469:14:31"},{"baseName":{"id":4077,"name":"IOwnerManager","nodeType":"UserDefinedTypeName","referencedDeclaration":4063,"src":"485:13:31","typeDescriptions":{"typeIdentifier":"t_contract$_IOwnerManager_$4063","typeString":"contract IOwnerManager"}},"id":4078,"nodeType":"InheritanceSpecifier","src":"485:13:31"},{"baseName":{"id":4079,"name":"IFallbackManager","nodeType":"UserDefinedTypeName","referencedDeclaration":3887,"src":"500:16:31","typeDescriptions":{"typeIdentifier":"t_contract$_IFallbackManager_$3887","typeString":"contract IFallbackManager"}},"id":4080,"nodeType":"InheritanceSpecifier","src":"500:16:31"}],"contractDependencies":[3887,3901,3992,4063],"contractKind":"interface","documentation":{"id":4074,"nodeType":"StructuredDocumentation","src":"281:168:31","text":" @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\n @author @safe-global/safe-protocol"},"fullyImplemented":false,"id":4261,"linearizedBaseContracts":[4261,3887,4063,3992,3901],"name":"ISafe","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":4093,"name":"SafeSetup","nodeType":"EventDefinition","parameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4082,"indexed":true,"mutability":"mutable","name":"initiator","nodeType":"VariableDeclaration","scope":4093,"src":"539:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4081,"name":"address","nodeType":"ElementaryTypeName","src":"539:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4085,"indexed":false,"mutability":"mutable","name":"owners","nodeType":"VariableDeclaration","scope":4093,"src":"566:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4083,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4084,"nodeType":"ArrayTypeName","src":"566:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4087,"indexed":false,"mutability":"mutable","name":"threshold","nodeType":"VariableDeclaration","scope":4093,"src":"584:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4086,"name":"uint256","nodeType":"ElementaryTypeName","src":"584:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4089,"indexed":false,"mutability":"mutable","name":"initializer","nodeType":"VariableDeclaration","scope":4093,"src":"603:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4088,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4091,"indexed":false,"mutability":"mutable","name":"fallbackHandler","nodeType":"VariableDeclaration","scope":4093,"src":"624:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4090,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"538:110:31"},"src":"523:126:31"},{"anonymous":false,"id":4099,"name":"ApproveHash","nodeType":"EventDefinition","parameters":{"id":4098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4095,"indexed":true,"mutability":"mutable","name":"approvedHash","nodeType":"VariableDeclaration","scope":4099,"src":"672:28:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"672:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4097,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":4099,"src":"702:21:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4096,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"671:53:31"},"src":"654:71:31"},{"anonymous":false,"id":4103,"name":"SignMsg","nodeType":"EventDefinition","parameters":{"id":4102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4101,"indexed":true,"mutability":"mutable","name":"msgHash","nodeType":"VariableDeclaration","scope":4103,"src":"744:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"744:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"743:25:31"},"src":"730:39:31"},{"anonymous":false,"id":4109,"name":"ExecutionFailure","nodeType":"EventDefinition","parameters":{"id":4108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4105,"indexed":true,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":4109,"src":"797:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4104,"name":"bytes32","nodeType":"ElementaryTypeName","src":"797:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4107,"indexed":false,"mutability":"mutable","name":"payment","nodeType":"VariableDeclaration","scope":4109,"src":"821:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4106,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"796:41:31"},"src":"774:64:31"},{"anonymous":false,"id":4115,"name":"ExecutionSuccess","nodeType":"EventDefinition","parameters":{"id":4114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4111,"indexed":true,"mutability":"mutable","name":"txHash","nodeType":"VariableDeclaration","scope":4115,"src":"866:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"866:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4113,"indexed":false,"mutability":"mutable","name":"payment","nodeType":"VariableDeclaration","scope":4115,"src":"890:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4112,"name":"uint256","nodeType":"ElementaryTypeName","src":"890:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"865:41:31"},"src":"843:64:31"},{"documentation":{"id":4116,"nodeType":"StructuredDocumentation","src":"913:758:31","text":" @notice Sets an initial storage of the Safe contract.\n @dev This method can only be called once.\n      If a proxy was created without setting up, anyone can call setup and claim the proxy.\n @param _owners List of Safe owners.\n @param _threshold Number of required confirmations for a Safe transaction.\n @param to Contract address for optional delegate call.\n @param data Data payload for optional delegate call.\n @param fallbackHandler Handler for fallback calls to this contract\n @param paymentToken Token that should be used for the payment (0 is ETH)\n @param payment Value that should be paid\n @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)"},"functionSelector":"b63e800d","id":4136,"implemented":false,"kind":"function","modifiers":[],"name":"setup","nodeType":"FunctionDefinition","parameters":{"id":4134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4119,"mutability":"mutable","name":"_owners","nodeType":"VariableDeclaration","scope":4136,"src":"1700:26:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4117,"name":"address","nodeType":"ElementaryTypeName","src":"1700:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4118,"nodeType":"ArrayTypeName","src":"1700:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4121,"mutability":"mutable","name":"_threshold","nodeType":"VariableDeclaration","scope":4136,"src":"1736:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4120,"name":"uint256","nodeType":"ElementaryTypeName","src":"1736:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4123,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":4136,"src":"1764:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4122,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4125,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":4136,"src":"1784:19:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4124,"name":"bytes","nodeType":"ElementaryTypeName","src":"1784:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4127,"mutability":"mutable","name":"fallbackHandler","nodeType":"VariableDeclaration","scope":4136,"src":"1813:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4126,"name":"address","nodeType":"ElementaryTypeName","src":"1813:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4129,"mutability":"mutable","name":"paymentToken","nodeType":"VariableDeclaration","scope":4136,"src":"1846:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4128,"name":"address","nodeType":"ElementaryTypeName","src":"1846:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4131,"mutability":"mutable","name":"payment","nodeType":"VariableDeclaration","scope":4136,"src":"1876:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4130,"name":"uint256","nodeType":"ElementaryTypeName","src":"1876:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4133,"mutability":"mutable","name":"paymentReceiver","nodeType":"VariableDeclaration","scope":4136,"src":"1901:31:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4132,"name":"address","nodeType":"ElementaryTypeName","src":"1901:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1690:248:31"},"returnParameters":{"id":4135,"nodeType":"ParameterList","parameters":[],"src":"1947:0:31"},"scope":4261,"src":"1676:272:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4137,"nodeType":"StructuredDocumentation","src":"1954:1531:31","text":"@notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\n          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\n @dev The fees are always transferred, even if the user transaction fails.\n      This method doesn't perform any sanity check of the transaction, such as:\n      - if the contract at `to` address has code or not\n      - if the `gasToken` is a contract or not\n      It is the responsibility of the caller to perform such checks.\n @param to Destination address of Safe transaction.\n @param value Ether value of Safe transaction.\n @param data Data payload of Safe transaction.\n @param operation Operation type of Safe transaction.\n @param safeTxGas Gas that should be used for the Safe transaction.\n @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n @param gasPrice Gas price that should be used for the payment calculation.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n @return success Boolean indicating transaction's success."},"functionSelector":"6a761202","id":4162,"implemented":false,"kind":"function","modifiers":[],"name":"execTransaction","nodeType":"FunctionDefinition","parameters":{"id":4158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4139,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":4162,"src":"3524:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4138,"name":"address","nodeType":"ElementaryTypeName","src":"3524:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4141,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":4162,"src":"3544:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4140,"name":"uint256","nodeType":"ElementaryTypeName","src":"3544:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4143,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":4162,"src":"3567:19:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4142,"name":"bytes","nodeType":"ElementaryTypeName","src":"3567:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4145,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":4162,"src":"3596:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":4144,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"3596:14:31","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":4147,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":4162,"src":"3630:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4146,"name":"uint256","nodeType":"ElementaryTypeName","src":"3630:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4149,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":4162,"src":"3657:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4148,"name":"uint256","nodeType":"ElementaryTypeName","src":"3657:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4151,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":4162,"src":"3682:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4150,"name":"uint256","nodeType":"ElementaryTypeName","src":"3682:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4153,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":4162,"src":"3708:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4152,"name":"address","nodeType":"ElementaryTypeName","src":"3708:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4155,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":4162,"src":"3734:30:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4154,"name":"address","nodeType":"ElementaryTypeName","src":"3734:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4157,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":4162,"src":"3774:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4156,"name":"bytes","nodeType":"ElementaryTypeName","src":"3774:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3514:289:31"},"returnParameters":{"id":4161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4160,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":4162,"src":"3830:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4159,"name":"bool","nodeType":"ElementaryTypeName","src":"3830:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3829:14:31"},"scope":4261,"src":"3490:354:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":4163,"nodeType":"StructuredDocumentation","src":"3850:420:31","text":" @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."},"functionSelector":"ed516d51","id":4170,"implemented":false,"kind":"function","modifiers":[],"name":"checkSignatures","nodeType":"FunctionDefinition","parameters":{"id":4168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4165,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":4170,"src":"4300:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4300:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4167,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":4170,"src":"4318:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4166,"name":"bytes","nodeType":"ElementaryTypeName","src":"4318:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4299:43:31"},"returnParameters":{"id":4169,"nodeType":"ParameterList","parameters":[],"src":"4356:0:31"},"scope":4261,"src":"4275:82:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4171,"nodeType":"StructuredDocumentation","src":"4363:490:31","text":" @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n @dev This function makes it compatible with previous versions."},"functionSelector":"934f3a11","id":4180,"implemented":false,"kind":"function","modifiers":[],"name":"checkSignatures","nodeType":"FunctionDefinition","parameters":{"id":4178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4173,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":4180,"src":"4883:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4883:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4175,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4180,"src":"4901:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4174,"name":"bytes","nodeType":"ElementaryTypeName","src":"4901:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4177,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":4180,"src":"4929:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4176,"name":"bytes","nodeType":"ElementaryTypeName","src":"4929:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4882:71:31"},"returnParameters":{"id":4179,"nodeType":"ParameterList","parameters":[],"src":"4967:0:31"},"scope":4261,"src":"4858:110:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4181,"nodeType":"StructuredDocumentation","src":"4974:843:31","text":" @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\n @param executor Address that executing the transaction.\n        ⚠️⚠️⚠️ Make sure that the executor address is a legitmate executor.\n        Incorrectly passed the executor might reduce the threshold by 1 signature. ⚠️⚠️⚠️\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n @param requiredSignatures Amount of required valid signatures."},"functionSelector":"1fcac7f3","id":4192,"implemented":false,"kind":"function","modifiers":[],"name":"checkNSignatures","nodeType":"FunctionDefinition","parameters":{"id":4190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4183,"mutability":"mutable","name":"executor","nodeType":"VariableDeclaration","scope":4192,"src":"5848:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4182,"name":"address","nodeType":"ElementaryTypeName","src":"5848:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4185,"mutability":"mutable","name":"dataHash","nodeType":"VariableDeclaration","scope":4192,"src":"5866:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5866:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4187,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":4192,"src":"5884:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4186,"name":"bytes","nodeType":"ElementaryTypeName","src":"5884:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4189,"mutability":"mutable","name":"requiredSignatures","nodeType":"VariableDeclaration","scope":4192,"src":"5909:26:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4188,"name":"uint256","nodeType":"ElementaryTypeName","src":"5909:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5847:89:31"},"returnParameters":{"id":4191,"nodeType":"ParameterList","parameters":[],"src":"5950:0:31"},"scope":4261,"src":"5822:129:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4193,"nodeType":"StructuredDocumentation","src":"5957:393:31","text":" @notice Marks hash `hashToApprove` as approved.\n @dev This can be used with a pre-approved hash transaction signature.\n      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\n @param hashToApprove The hash to mark as approved for signatures that are verified by this contract."},"functionSelector":"d4d9bdcd","id":4198,"implemented":false,"kind":"function","modifiers":[],"name":"approveHash","nodeType":"FunctionDefinition","parameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"mutability":"mutable","name":"hashToApprove","nodeType":"VariableDeclaration","scope":4198,"src":"6376:21:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6376:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6375:23:31"},"returnParameters":{"id":4197,"nodeType":"ParameterList","parameters":[],"src":"6407:0:31"},"scope":4261,"src":"6355:53:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4199,"nodeType":"StructuredDocumentation","src":"6414:157:31","text":" @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\n @return bytes32 The domain separator hash."},"functionSelector":"f698da25","id":4204,"implemented":false,"kind":"function","modifiers":[],"name":"domainSeparator","nodeType":"FunctionDefinition","parameters":{"id":4200,"nodeType":"ParameterList","parameters":[],"src":"6600:2:31"},"returnParameters":{"id":4203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4202,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4204,"src":"6626:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4201,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6626:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6625:9:31"},"scope":4261,"src":"6576:59:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4205,"nodeType":"StructuredDocumentation","src":"6641:694:31","text":" @notice Returns transaction hash to be signed by owners.\n @param to Destination address.\n @param value Ether value.\n @param data Data payload.\n @param operation Operation type.\n @param safeTxGas Gas that should be used for the safe transaction.\n @param baseGas Gas costs for data used to trigger the safe transaction.\n @param gasPrice Maximum gas price that should be used for this transaction.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n @param _nonce Transaction nonce.\n @return Transaction hash."},"functionSelector":"d8d11f78","id":4230,"implemented":false,"kind":"function","modifiers":[],"name":"getTransactionHash","nodeType":"FunctionDefinition","parameters":{"id":4226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4207,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":4230,"src":"7377:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4206,"name":"address","nodeType":"ElementaryTypeName","src":"7377:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4209,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":4230,"src":"7397:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4208,"name":"uint256","nodeType":"ElementaryTypeName","src":"7397:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4211,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":4230,"src":"7420:19:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4210,"name":"bytes","nodeType":"ElementaryTypeName","src":"7420:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4213,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":4230,"src":"7449:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":4212,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"7449:14:31","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":4215,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":4230,"src":"7483:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4214,"name":"uint256","nodeType":"ElementaryTypeName","src":"7483:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4217,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":4230,"src":"7510:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4216,"name":"uint256","nodeType":"ElementaryTypeName","src":"7510:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4219,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":4230,"src":"7535:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4218,"name":"uint256","nodeType":"ElementaryTypeName","src":"7535:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4221,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":4230,"src":"7561:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4220,"name":"address","nodeType":"ElementaryTypeName","src":"7561:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4223,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":4230,"src":"7587:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4222,"name":"address","nodeType":"ElementaryTypeName","src":"7587:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4225,"mutability":"mutable","name":"_nonce","nodeType":"VariableDeclaration","scope":4230,"src":"7619:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4224,"name":"uint256","nodeType":"ElementaryTypeName","src":"7619:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7367:272:31"},"returnParameters":{"id":4229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4228,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4230,"src":"7663:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7663:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7662:9:31"},"scope":4261,"src":"7340:332:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4231,"nodeType":"StructuredDocumentation","src":"7748:99:31","text":" @notice Returns the version of the Safe contract.\n @return Version string."},"functionSelector":"ffa1ad74","id":4236,"implemented":false,"kind":"function","modifiers":[],"name":"VERSION","nodeType":"FunctionDefinition","parameters":{"id":4232,"nodeType":"ParameterList","parameters":[],"src":"7901:2:31"},"returnParameters":{"id":4235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4234,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4236,"src":"7927:13:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4233,"name":"string","nodeType":"ElementaryTypeName","src":"7927:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7926:15:31"},"scope":4261,"src":"7885:57:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4237,"nodeType":"StructuredDocumentation","src":"7948:88:31","text":" @notice Returns the nonce of the Safe contract.\n @return Nonce."},"functionSelector":"affed0e0","id":4242,"implemented":false,"kind":"function","modifiers":[],"name":"nonce","nodeType":"FunctionDefinition","parameters":{"id":4238,"nodeType":"ParameterList","parameters":[],"src":"8055:2:31"},"returnParameters":{"id":4241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4240,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4242,"src":"8081:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4239,"name":"uint256","nodeType":"ElementaryTypeName","src":"8081:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8080:9:31"},"scope":4261,"src":"8041:49:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4243,"nodeType":"StructuredDocumentation","src":"8096:210:31","text":" @notice Returns a uint if the messageHash is signed by the owner.\n @param messageHash Hash of message that should be checked.\n @return Number denoting if an owner signed the hash."},"functionSelector":"5ae6bd37","id":4250,"implemented":false,"kind":"function","modifiers":[],"name":"signedMessages","nodeType":"FunctionDefinition","parameters":{"id":4246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4245,"mutability":"mutable","name":"messageHash","nodeType":"VariableDeclaration","scope":4250,"src":"8335:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8335:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8334:21:31"},"returnParameters":{"id":4249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4248,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4250,"src":"8379:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4247,"name":"uint256","nodeType":"ElementaryTypeName","src":"8379:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8378:9:31"},"scope":4261,"src":"8311:77:31","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4251,"nodeType":"StructuredDocumentation","src":"8394:272:31","text":" @notice Returns a uint if the messageHash is approved by the owner.\n @param owner Owner address that should be checked.\n @param messageHash Hash of message that should be checked.\n @return Number denoting if an owner approved the hash."},"functionSelector":"7d832974","id":4260,"implemented":false,"kind":"function","modifiers":[],"name":"approvedHashes","nodeType":"FunctionDefinition","parameters":{"id":4256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4253,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":4260,"src":"8695:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4252,"name":"address","nodeType":"ElementaryTypeName","src":"8695:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4255,"mutability":"mutable","name":"messageHash","nodeType":"VariableDeclaration","scope":4260,"src":"8710:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8710:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8694:36:31"},"returnParameters":{"id":4259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4258,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4260,"src":"8754:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4257,"name":"uint256","nodeType":"ElementaryTypeName","src":"8754:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8753:9:31"},"scope":4261,"src":"8671:92:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4262,"src":"450:8315:31"}],"src":"42:8724:31"},"id":31},"contracts/interfaces/ISignatureValidator.sol":{"ast":{"absolutePath":"contracts/interfaces/ISignatureValidator.sol","exportedSymbols":{"ISignatureValidator":[4280],"ISignatureValidatorConstants":[4267]},"id":4281,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4263,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"86:31:32"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4267,"linearizedBaseContracts":[4267],"name":"ISignatureValidatorConstants","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4266,"mutability":"constant","name":"EIP1271_MAGIC_VALUE","nodeType":"VariableDeclaration","scope":4267,"src":"222:57:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4264,"name":"bytes4","nodeType":"ElementaryTypeName","src":"222:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783136323662613765","id":4265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"269:10:32","typeDescriptions":{"typeIdentifier":"t_rational_371636862_by_1","typeString":"int_const 371636862"},"value":"0x1626ba7e"},"visibility":"internal"}],"scope":4281,"src":"119:163:32"},{"abstract":true,"baseContracts":[{"baseName":{"id":4268,"name":"ISignatureValidatorConstants","nodeType":"UserDefinedTypeName","referencedDeclaration":4267,"src":"325:28:32","typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidatorConstants_$4267","typeString":"contract ISignatureValidatorConstants"}},"id":4269,"nodeType":"InheritanceSpecifier","src":"325:28:32"}],"contractDependencies":[4267],"contractKind":"contract","fullyImplemented":false,"id":4280,"linearizedBaseContracts":[4280,4267],"name":"ISignatureValidator","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4270,"nodeType":"StructuredDocumentation","src":"360:419:32","text":" @notice EIP1271 method to validate a signature.\n @param _hash Hash of the data signed on the behalf of address(this).\n @param _signature Signature byte array associated with _data.\n MUST return the bytes4 magic value 0x1626ba7e when function passes.\n MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n MUST allow external calls"},"functionSelector":"1626ba7e","id":4279,"implemented":false,"kind":"function","modifiers":[],"name":"isValidSignature","nodeType":"FunctionDefinition","parameters":{"id":4275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4272,"mutability":"mutable","name":"_hash","nodeType":"VariableDeclaration","scope":4279,"src":"810:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4271,"name":"bytes32","nodeType":"ElementaryTypeName","src":"810:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4274,"mutability":"mutable","name":"_signature","nodeType":"VariableDeclaration","scope":4279,"src":"825:23:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4273,"name":"bytes","nodeType":"ElementaryTypeName","src":"825:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"809:40:32"},"returnParameters":{"id":4278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4277,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4279,"src":"881:6:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4276,"name":"bytes4","nodeType":"ElementaryTypeName","src":"881:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"880:8:32"},"scope":4280,"src":"784:105:32","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":4281,"src":"284:607:32"}],"src":"86:806:32"},"id":32},"contracts/libraries/Enum.sol":{"ast":{"absolutePath":"contracts/libraries/Enum.sol","exportedSymbols":{"Enum":[4287]},"id":4288,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4282,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:33"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":4283,"nodeType":"StructuredDocumentation","src":"75:120:33","text":" @title Enum - Collection of enums used in Safe Smart Account contracts.\n @author @safe-global/safe-protocol"},"fullyImplemented":true,"id":4287,"linearizedBaseContracts":[4287],"name":"Enum","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Enum.Operation","id":4286,"members":[{"id":4284,"name":"Call","nodeType":"EnumValue","src":"240:4:33"},{"id":4285,"name":"DelegateCall","nodeType":"EnumValue","src":"254:12:33"}],"name":"Operation","nodeType":"EnumDefinition","src":"215:57:33"}],"scope":4288,"src":"196:78:33"}],"src":"42:233:33"},"id":33},"contracts/libraries/ErrorMessage.sol":{"ast":{"absolutePath":"contracts/libraries/ErrorMessage.sol","exportedSymbols":{"ErrorMessage":[4299]},"id":4300,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4289,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"43:31:34"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":4290,"nodeType":"StructuredDocumentation","src":"76:221:34","text":" @title Error Message - Contract which uses assembly to revert with a custom error message.\n @author Shebin John - @remedcu\n @notice The aim is to save gas using assembly to revert with custom error message."},"fullyImplemented":true,"id":4299,"linearizedBaseContracts":[4299],"name":"ErrorMessage","nodeType":"ContractDefinition","nodes":[{"body":{"id":4297,"nodeType":"Block","src":"644:654:34","statements":[{"AST":{"nodeType":"YulBlock","src":"755:489:34","statements":[{"nodeType":"YulVariableDeclaration","src":"769:22:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"786:4:34","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"780:5:34"},"nodeType":"YulFunctionCall","src":"780:11:34"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"773:3:34","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"811:3:34"},{"kind":"number","nodeType":"YulLiteral","src":"816:66:34","type":"","value":"0x08c379a000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"804:6:34"},"nodeType":"YulFunctionCall","src":"804:79:34"},"nodeType":"YulExpressionStatement","src":"804:79:34"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"946:3:34"},{"kind":"number","nodeType":"YulLiteral","src":"951:4:34","type":"","value":"0x04"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"942:3:34"},"nodeType":"YulFunctionCall","src":"942:14:34"},{"kind":"number","nodeType":"YulLiteral","src":"958:4:34","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"935:6:34"},"nodeType":"YulFunctionCall","src":"935:28:34"},"nodeType":"YulExpressionStatement","src":"935:28:34"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1004:3:34"},{"kind":"number","nodeType":"YulLiteral","src":"1009:4:34","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:34"},"nodeType":"YulFunctionCall","src":"1000:14:34"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:34","type":"","value":"0x05"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"993:6:34"},"nodeType":"YulFunctionCall","src":"993:28:34"},"nodeType":"YulExpressionStatement","src":"993:28:34"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1090:3:34"},{"kind":"number","nodeType":"YulLiteral","src":"1095:4:34","type":"","value":"0x44"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1086:3:34"},"nodeType":"YulFunctionCall","src":"1086:14:34"},{"name":"error","nodeType":"YulIdentifier","src":"1102:5:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1079:6:34"},"nodeType":"YulFunctionCall","src":"1079:29:34"},"nodeType":"YulExpressionStatement","src":"1079:29:34"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1145:3:34"},{"kind":"number","nodeType":"YulLiteral","src":"1150:4:34","type":"","value":"0x64"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1138:6:34"},"nodeType":"YulFunctionCall","src":"1138:17:34"},"nodeType":"YulExpressionStatement","src":"1138:17:34"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":4293,"isOffset":false,"isSlot":false,"src":"1102:5:34","valueSize":1}],"id":4296,"nodeType":"InlineAssembly","src":"746:498:34"}]},"documentation":{"id":4291,"nodeType":"StructuredDocumentation","src":"335:251:34","text":" @notice Function which uses assembly to revert with the passed error message.\n @param error The error string to revert with.\n @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \"GSXXX\""},"id":4298,"implemented":true,"kind":"function","modifiers":[],"name":"revertWithError","nodeType":"FunctionDefinition","parameters":{"id":4294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4293,"mutability":"mutable","name":"error","nodeType":"VariableDeclaration","scope":4298,"src":"616:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes5","typeString":"bytes5"},"typeName":{"id":4292,"name":"bytes5","nodeType":"ElementaryTypeName","src":"616:6:34","typeDescriptions":{"typeIdentifier":"t_bytes5","typeString":"bytes5"}},"visibility":"internal"}],"src":"615:14:34"},"returnParameters":{"id":4295,"nodeType":"ParameterList","parameters":[],"src":"644:0:34"},"scope":4299,"src":"591:707:34","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4300,"src":"298:1002:34"}],"src":"43:1258:34"},"id":34},"contracts/libraries/Safe130To141Migration.sol":{"ast":{"absolutePath":"contracts/libraries/Safe130To141Migration.sol","exportedSymbols":{"ISafe":[4261],"Safe130To141Migration":[4461],"SafeStorage":[4811]},"id":4462,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4301,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"86:31:35"},{"absolutePath":"contracts/libraries/SafeStorage.sol","file":"../libraries/SafeStorage.sol","id":4303,"nodeType":"ImportDirective","scope":4462,"sourceUnit":4812,"src":"119:57:35","symbolAliases":[{"foreign":{"id":4302,"name":"SafeStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"127:11:35","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../interfaces/ISafe.sol","id":4305,"nodeType":"ImportDirective","scope":4462,"sourceUnit":4262,"src":"177:46:35","symbolAliases":[{"foreign":{"id":4304,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"185:5:35","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4307,"name":"SafeStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":4811,"src":"849:11:35","typeDescriptions":{"typeIdentifier":"t_contract$_SafeStorage_$4811","typeString":"contract SafeStorage"}},"id":4308,"nodeType":"InheritanceSpecifier","src":"849:11:35"}],"contractDependencies":[4811],"contractKind":"contract","documentation":{"id":4306,"nodeType":"StructuredDocumentation","src":"225:589:35","text":" @title Migration Contract for Safe Upgrade\n @notice This contract facilitates the migration of a Safe contract from version 1.3.0 to 1.4.1.\n         The older versions should use built-in upgrade methods.\n @dev IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address\n      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls\n      if the address stored at the storage slot 0 is not a contract. The check is implemented in the `checkCurrentSingleton` function."},"fullyImplemented":true,"id":4461,"linearizedBaseContracts":[4461,4811],"name":"Safe130To141Migration","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"6253390f","id":4314,"mutability":"constant","name":"SAFE_141_SINGLETON","nodeType":"VariableDeclaration","scope":4461,"src":"923:96:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4309,"name":"address","nodeType":"ElementaryTypeName","src":"923:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307834313637354330393946333233343162663834424663353338326146353334646635433734363161","id":4312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"976:42:35","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"value":"0x41675C099F32341bf84BFc5382aF534df5C7461a"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"968:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4310,"name":"address","nodeType":"ElementaryTypeName","src":"968:7:35","typeDescriptions":{}}},"id":4313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"968:51:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":true,"functionSelector":"6ca63244","id":4320,"mutability":"constant","name":"SAFE_141_SINGLETON_L2","nodeType":"VariableDeclaration","scope":4461,"src":"1087:99:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4315,"name":"address","nodeType":"ElementaryTypeName","src":"1087:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307832396663423433623436353331426341303033646443384643423637464645393139303043373632","id":4318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1143:42:35","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"value":"0x29fcB43b46531BcA003ddC8FCB67FFE91900C762"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1135:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4316,"name":"address","nodeType":"ElementaryTypeName","src":"1135:7:35","typeDescriptions":{}}},"id":4319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1135:51:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":true,"functionSelector":"92b501b7","id":4326,"mutability":"constant","name":"SAFE_141_FALLBACK_HANDLER","nodeType":"VariableDeclaration","scope":4461,"src":"1270:103:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4321,"name":"address","nodeType":"ElementaryTypeName","src":"1270:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307866643037333244633945333033663039664345663361373338384164313041383334353945633939","id":4324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1330:42:35","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"value":"0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1322:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4322,"name":"address","nodeType":"ElementaryTypeName","src":"1322:7:35","typeDescriptions":{}}},"id":4325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1322:51:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":4351,"nodeType":"Block","src":"1517:296:35","statements":[{"expression":{"arguments":[{"arguments":[{"id":4332,"name":"SAFE_141_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"1546:18:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4331,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4460,"src":"1535:10:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1535:30:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520312e342e312053696e676c65746f6e206973206e6f74206465706c6f796564","id":4334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1567:38:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_5567b0b1e04c75b4e4ed514d4d2297b42fc5b2f3cb30d56706fd7316339acd59","typeString":"literal_string \"Safe 1.4.1 Singleton is not deployed\""},"value":"Safe 1.4.1 Singleton is not deployed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5567b0b1e04c75b4e4ed514d4d2297b42fc5b2f3cb30d56706fd7316339acd59","typeString":"literal_string \"Safe 1.4.1 Singleton is not deployed\""}],"id":4330,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1527:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1527:79:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4336,"nodeType":"ExpressionStatement","src":"1527:79:35"},{"expression":{"arguments":[{"arguments":[{"id":4339,"name":"SAFE_141_SINGLETON_L2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4320,"src":"1635:21:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4338,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4460,"src":"1624:10:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1624:33:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520312e342e312053696e676c65746f6e20284c3229206973206e6f74206465706c6f796564","id":4341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1659:43:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_c56b15de682b3a991398ba00c9c33d10e9bf09c848c744db465374ed10709bfa","typeString":"literal_string \"Safe 1.4.1 Singleton (L2) is not deployed\""},"value":"Safe 1.4.1 Singleton (L2) is not deployed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c56b15de682b3a991398ba00c9c33d10e9bf09c848c744db465374ed10709bfa","typeString":"literal_string \"Safe 1.4.1 Singleton (L2) is not deployed\""}],"id":4337,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1616:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1616:87:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4343,"nodeType":"ExpressionStatement","src":"1616:87:35"},{"expression":{"arguments":[{"arguments":[{"id":4346,"name":"SAFE_141_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"1732:25:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4345,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4460,"src":"1721:10:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1721:37:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520312e342e312046616c6c6261636b2048616e646c6572206973206e6f74206465706c6f796564","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1760:45:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_c7f585286dbc8feabd2c09692bbbbd5c0c3a93ea1499b7502e0284b05883fe0f","typeString":"literal_string \"Safe 1.4.1 Fallback Handler is not deployed\""},"value":"Safe 1.4.1 Fallback Handler is not deployed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c7f585286dbc8feabd2c09692bbbbd5c0c3a93ea1499b7502e0284b05883fe0f","typeString":"literal_string \"Safe 1.4.1 Fallback Handler is not deployed\""}],"id":4344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1713:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1713:93:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4350,"nodeType":"ExpressionStatement","src":"1713:93:35"}]},"documentation":{"id":4327,"nodeType":"StructuredDocumentation","src":"1380:118:35","text":" @notice Constructor\n @dev Initializes the migrationSingleton with the contract's own address."},"id":4352,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":4328,"nodeType":"ParameterList","parameters":[],"src":"1514:2:35"},"returnParameters":{"id":4329,"nodeType":"ParameterList","parameters":[],"src":"1517:0:35"},"scope":4461,"src":"1503:310:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4363,"nodeType":"Block","src":"2247:77:35","statements":[{"expression":{"arguments":[{"arguments":[{"id":4358,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"2276:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4357,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4460,"src":"2265:10:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2265:21:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e737570706f727465642070726f787920636f6e7472616374","id":4360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2288:28:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a3399c7dcdb138b3e0c38e14525fc34bf5c112cb1feb36f3da0ca1d3802dd0a","typeString":"literal_string \"Unsupported proxy contract\""},"value":"Unsupported proxy contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a3399c7dcdb138b3e0c38e14525fc34bf5c112cb1feb36f3da0ca1d3802dd0a","typeString":"literal_string \"Unsupported proxy contract\""}],"id":4356,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2257:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2257:60:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4362,"nodeType":"ExpressionStatement","src":"2257:60:35"}]},"documentation":{"id":4353,"nodeType":"StructuredDocumentation","src":"1819:376:35","text":" @dev Checks whether the current singleton address is a contract.\n      The canonical Safe proxy stores the singleton address at the storage slot 0.\n      This migration contract doesn't define it's own storage, so the fact that the storage slot 0 is defined\n      and is a contract ensures that the contract was called with a DELEGATECALL."},"id":4364,"implemented":true,"kind":"function","modifiers":[],"name":"checkCurrentSingleton","nodeType":"FunctionDefinition","parameters":{"id":4354,"nodeType":"ParameterList","parameters":[],"src":"2230:2:35"},"returnParameters":{"id":4355,"nodeType":"ParameterList","parameters":[],"src":"2247:0:35"},"scope":4461,"src":"2200:124:35","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4371,"nodeType":"Block","src":"2447:51:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4367,"name":"checkCurrentSingleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"2457:21:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2457:23:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4369,"nodeType":"ExpressionStatement","src":"2457:23:35"},{"id":4370,"nodeType":"PlaceholderStatement","src":"2490:1:35"}]},"documentation":{"id":4365,"nodeType":"StructuredDocumentation","src":"2330:82:35","text":"@dev Modifier that checks whether the current singleton address is a contract."},"id":4372,"name":"validSingletonOnly","nodeType":"ModifierDefinition","parameters":{"id":4366,"nodeType":"ParameterList","parameters":[],"src":"2444:2:35"},"src":"2417:81:35","virtual":false,"visibility":"internal"},{"anonymous":false,"documentation":{"id":4373,"nodeType":"StructuredDocumentation","src":"2504:124:35","text":" @notice Event indicating a change of master copy address.\n @param singleton New master copy address"},"id":4377,"name":"ChangedMasterCopy","nodeType":"EventDefinition","parameters":{"id":4376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4375,"indexed":false,"mutability":"mutable","name":"singleton","nodeType":"VariableDeclaration","scope":4377,"src":"2657:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4374,"name":"address","nodeType":"ElementaryTypeName","src":"2657:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2656:19:35"},"src":"2633:43:35"},{"body":{"id":4391,"nodeType":"Block","src":"2910:91:35","statements":[{"expression":{"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4383,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"2920:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4384,"name":"SAFE_141_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"2932:18:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2920:30:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4386,"nodeType":"ExpressionStatement","src":"2920:30:35"},{"eventCall":{"arguments":[{"id":4388,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"2984:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4387,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"2966:17:35","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2966:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4390,"nodeType":"EmitStatement","src":"2961:33:35"}]},"documentation":{"id":4378,"nodeType":"StructuredDocumentation","src":"2682:178:35","text":" @notice Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON`\n @dev This function should only be called via a delegatecall to perform the upgrade."},"functionSelector":"8fd3ab80","id":4392,"implemented":true,"kind":"function","modifiers":[{"id":4381,"modifierName":{"id":4380,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"2891:18:35","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2891:18:35"}],"name":"migrate","nodeType":"FunctionDefinition","parameters":{"id":4379,"nodeType":"ParameterList","parameters":[],"src":"2881:2:35"},"returnParameters":{"id":4382,"nodeType":"ParameterList","parameters":[],"src":"2910:0:35"},"scope":4461,"src":"2865:136:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4409,"nodeType":"Block","src":"3289:178:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4396,"name":"migrate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4392,"src":"3374:7:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3374:9:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4398,"nodeType":"ExpressionStatement","src":"3374:9:35"},{"expression":{"arguments":[{"id":4406,"name":"SAFE_141_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"3434:25:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4402,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3408:4:35","typeDescriptions":{"typeIdentifier":"t_contract$_Safe130To141Migration_$4461","typeString":"contract Safe130To141Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe130To141Migration_$4461","typeString":"contract Safe130To141Migration"}],"id":4401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3400:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4400,"name":"address","nodeType":"ElementaryTypeName","src":"3400:7:35","typeDescriptions":{}}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3400:13:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4399,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"3394:5:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3394:20:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setFallbackHandler","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"3394:39:35","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3394:66:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4408,"nodeType":"ExpressionStatement","src":"3394:66:35"}]},"documentation":{"id":4393,"nodeType":"StructuredDocumentation","src":"3007:232:35","text":"@notice Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\n @dev This function should only be called via a delegatecall to perform the upgrade."},"functionSelector":"ed007fc6","id":4410,"implemented":true,"kind":"function","modifiers":[],"name":"migrateWithFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":4394,"nodeType":"ParameterList","parameters":[],"src":"3279:2:35"},"returnParameters":{"id":4395,"nodeType":"ParameterList","parameters":[],"src":"3289:0:35"},"scope":4461,"src":"3244:223:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4424,"nodeType":"Block","src":"3706:94:35","statements":[{"expression":{"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4416,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3716:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4417,"name":"SAFE_141_SINGLETON_L2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4320,"src":"3728:21:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3716:33:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4419,"nodeType":"ExpressionStatement","src":"3716:33:35"},{"eventCall":{"arguments":[{"id":4421,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3783:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4420,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"3765:17:35","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3765:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4423,"nodeType":"EmitStatement","src":"3760:33:35"}]},"documentation":{"id":4411,"nodeType":"StructuredDocumentation","src":"3473:181:35","text":" @notice Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2`\n @dev This function should only be called via a delegatecall to perform the upgrade."},"functionSelector":"fdd09756","id":4425,"implemented":true,"kind":"function","modifiers":[{"id":4414,"modifierName":{"id":4413,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"3687:18:35","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3687:18:35"}],"name":"migrateL2","nodeType":"FunctionDefinition","parameters":{"id":4412,"nodeType":"ParameterList","parameters":[],"src":"3677:2:35"},"returnParameters":{"id":4415,"nodeType":"ParameterList","parameters":[],"src":"3706:0:35"},"scope":4461,"src":"3659:141:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4442,"nodeType":"Block","src":"4093:182:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4429,"name":"migrateL2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4425,"src":"4180:9:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4180:11:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4431,"nodeType":"ExpressionStatement","src":"4180:11:35"},{"expression":{"arguments":[{"id":4439,"name":"SAFE_141_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"4242:25:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4435,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4216:4:35","typeDescriptions":{"typeIdentifier":"t_contract$_Safe130To141Migration_$4461","typeString":"contract Safe130To141Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe130To141Migration_$4461","typeString":"contract Safe130To141Migration"}],"id":4434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4208:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4433,"name":"address","nodeType":"ElementaryTypeName","src":"4208:7:35","typeDescriptions":{}}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4208:13:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4432,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"4202:5:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4202:20:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setFallbackHandler","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"4202:39:35","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4202:66:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4441,"nodeType":"ExpressionStatement","src":"4202:66:35"}]},"documentation":{"id":4426,"nodeType":"StructuredDocumentation","src":"3806:235:35","text":"@notice Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\n @dev This function should only be called via a delegatecall to perform the upgrade."},"functionSelector":"68cb3d94","id":4443,"implemented":true,"kind":"function","modifiers":[],"name":"migrateL2WithFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":4427,"nodeType":"ParameterList","parameters":[],"src":"4083:2:35"},"returnParameters":{"id":4428,"nodeType":"ParameterList","parameters":[],"src":"4093:0:35"},"scope":4461,"src":"4046:229:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4459,"nodeType":"Block","src":"5907:355:35","statements":[{"assignments":[4452],"declarations":[{"constant":false,"id":4452,"mutability":"mutable","name":"size","nodeType":"VariableDeclaration","scope":4459,"src":"5917:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"5917:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4453,"nodeType":"VariableDeclarationStatement","src":"5917:12:35"},{"AST":{"nodeType":"YulBlock","src":"6040:52:35","statements":[{"nodeType":"YulAssignment","src":"6054:28:35","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"6074:7:35"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"6062:11:35"},"nodeType":"YulFunctionCall","src":"6062:20:35"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6054:4:35"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":4446,"isOffset":false,"isSlot":false,"src":"6074:7:35","valueSize":1},{"declaration":4452,"isOffset":false,"isSlot":false,"src":"6054:4:35","valueSize":1}],"id":4454,"nodeType":"InlineAssembly","src":"6031:61:35"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4455,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"6247:4:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6247:8:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4450,"id":4458,"nodeType":"Return","src":"6240:15:35"}]},"documentation":{"id":4444,"nodeType":"StructuredDocumentation","src":"4281:1555:35","text":" @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\n @param account The Ethereum address to be checked.\n @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\n @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\n It may return incorrect results in some edge cases:\n - During the contract deployment process, including the constructor, this function may incorrectly identify the\n   contract's own address as an EOA, as the code is not yet deployed.\n - If a contract performs a self-destruct operation (using `selfdestruct`) after deployment, this function may\n   incorrectly identify the address as an EOA once the contract is destroyed, as its code will be removed.\n - When interacting with external contracts that use delegatecall or other mechanisms to execute code from\n   different contracts, this function may not accurately distinguish between a contract and an EOA, as it only\n   checks the code size at the specified address.\n - Contracts that are created using the CREATE2 opcode may not be accurately identified as contracts by this\n   function, especially if the code is not deployed until after the creation.\n Developers should use caution when relying on the results of this function for critical decision-making."},"id":4460,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","parameters":{"id":4447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4446,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":4460,"src":"5861:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4445,"name":"address","nodeType":"ElementaryTypeName","src":"5861:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5860:17:35"},"returnParameters":{"id":4450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4449,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4460,"src":"5901:4:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4448,"name":"bool","nodeType":"ElementaryTypeName","src":"5901:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5900:6:35"},"scope":4461,"src":"5841:421:35","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4462,"src":"815:5449:35"}],"src":"86:6179:35"},"id":35},"contracts/libraries/Safe150Migration.sol":{"ast":{"absolutePath":"contracts/libraries/Safe150Migration.sol","exportedSymbols":{"Guard":[1311],"ISafe":[4261],"Safe150Migration":[4779],"SafeStorage":[4811]},"id":4780,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4463,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"86:31:36"},{"absolutePath":"contracts/libraries/SafeStorage.sol","file":"../libraries/SafeStorage.sol","id":4465,"nodeType":"ImportDirective","scope":4780,"sourceUnit":4812,"src":"119:57:36","symbolAliases":[{"foreign":{"id":4464,"name":"SafeStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"127:11:36","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/base/GuardManager.sol","file":"../base/GuardManager.sol","id":4467,"nodeType":"ImportDirective","scope":4780,"sourceUnit":1391,"src":"177:47:36","symbolAliases":[{"foreign":{"id":4466,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"src":"185:5:36","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../interfaces/ISafe.sol","id":4469,"nodeType":"ImportDirective","scope":4780,"sourceUnit":4262,"src":"225:46:36","symbolAliases":[{"foreign":{"id":4468,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"233:5:36","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4471,"name":"SafeStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":4811,"src":"765:11:36","typeDescriptions":{"typeIdentifier":"t_contract$_SafeStorage_$4811","typeString":"contract SafeStorage"}},"id":4472,"nodeType":"InheritanceSpecifier","src":"765:11:36"}],"contractDependencies":[4811],"contractKind":"contract","documentation":{"id":4470,"nodeType":"StructuredDocumentation","src":"273:462:36","text":" @title Migration Contract for Safe Upgrade\n @notice This contract facilitates the migration of a Safe contract from version 1.3.0/1.4.1 to 1.5.0.\n @dev IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address\n      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls\n      if the address stored at the storage slot 0 is not a contract."},"fullyImplemented":true,"id":4779,"linearizedBaseContracts":[4779,4811],"name":"Safe150Migration","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"a5e2eedc","id":4478,"mutability":"constant","name":"SAFE_150_SINGLETON","nodeType":"VariableDeclaration","scope":4779,"src":"919:96:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4473,"name":"address","nodeType":"ElementaryTypeName","src":"919:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307838383632376338393034654364394446393641353732456633324137666631336231393945643844","id":4476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"972:42:36","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"value":"0x88627c8904eCd9DF96A572Ef32A7ff13b199Ed8D"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"964:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4474,"name":"address","nodeType":"ElementaryTypeName","src":"964:7:36","typeDescriptions":{}}},"id":4477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"964:51:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":true,"functionSelector":"0db9ceab","id":4484,"mutability":"constant","name":"SAFE_150_SINGLETON_L2","nodeType":"VariableDeclaration","scope":4779,"src":"1163:99:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4479,"name":"address","nodeType":"ElementaryTypeName","src":"1163:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307830456533373531343634343638336637454239373435613537323643373232446542613737653532","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1219:42:36","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"value":"0x0Ee37514644683f7EB9745a5726C722DeBa77e52"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1211:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4480,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:36","typeDescriptions":{}}},"id":4483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1211:51:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":true,"functionSelector":"1e98bdc9","id":4490,"mutability":"constant","name":"SAFE_150_FALLBACK_HANDLER","nodeType":"VariableDeclaration","scope":4779,"src":"1442:103:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4485,"name":"address","nodeType":"ElementaryTypeName","src":"1442:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307838616137353563423136393939316645444333453330363735316443623731393634413034316337","id":4488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1502:42:36","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"value":"0x8aa755cB169991fEDC3E306751dCb71964A041c7"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1494:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4486,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:36","typeDescriptions":{}}},"id":4489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1494:51:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":true,"id":4493,"mutability":"constant","name":"GUARD_STORAGE_SLOT","nodeType":"VariableDeclaration","scope":4779,"src":"1808:113:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1808:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834613230346636323063386335636364636133666435346430303362616464383562613530303433366134333166306362646134663535386339336333346338","id":4492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1855:66:36","typeDescriptions":{"typeIdentifier":"t_rational_33528237782592280163068556224972516439282563014722366175641814928123294921928_by_1","typeString":"int_const 3352...(69 digits omitted)...1928"},"value":"0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8"},"visibility":"internal"},{"body":{"id":4518,"nodeType":"Block","src":"2065:296:36","statements":[{"expression":{"arguments":[{"arguments":[{"id":4499,"name":"SAFE_150_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"2094:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4498,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"2083:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2083:30:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520312e342e312053696e676c65746f6e206973206e6f74206465706c6f796564","id":4501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2115:38:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_5567b0b1e04c75b4e4ed514d4d2297b42fc5b2f3cb30d56706fd7316339acd59","typeString":"literal_string \"Safe 1.4.1 Singleton is not deployed\""},"value":"Safe 1.4.1 Singleton is not deployed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5567b0b1e04c75b4e4ed514d4d2297b42fc5b2f3cb30d56706fd7316339acd59","typeString":"literal_string \"Safe 1.4.1 Singleton is not deployed\""}],"id":4497,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2075:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2075:79:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4503,"nodeType":"ExpressionStatement","src":"2075:79:36"},{"expression":{"arguments":[{"arguments":[{"id":4506,"name":"SAFE_150_SINGLETON_L2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"2183:21:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4505,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"2172:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2172:33:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520312e342e312053696e676c65746f6e20284c3229206973206e6f74206465706c6f796564","id":4508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2207:43:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_c56b15de682b3a991398ba00c9c33d10e9bf09c848c744db465374ed10709bfa","typeString":"literal_string \"Safe 1.4.1 Singleton (L2) is not deployed\""},"value":"Safe 1.4.1 Singleton (L2) is not deployed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c56b15de682b3a991398ba00c9c33d10e9bf09c848c744db465374ed10709bfa","typeString":"literal_string \"Safe 1.4.1 Singleton (L2) is not deployed\""}],"id":4504,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2164:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2164:87:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4510,"nodeType":"ExpressionStatement","src":"2164:87:36"},{"expression":{"arguments":[{"arguments":[{"id":4513,"name":"SAFE_150_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"2280:25:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4512,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"2269:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2269:37:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520312e342e312046616c6c6261636b2048616e646c6572206973206e6f74206465706c6f796564","id":4515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2308:45:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_c7f585286dbc8feabd2c09692bbbbd5c0c3a93ea1499b7502e0284b05883fe0f","typeString":"literal_string \"Safe 1.4.1 Fallback Handler is not deployed\""},"value":"Safe 1.4.1 Fallback Handler is not deployed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c7f585286dbc8feabd2c09692bbbbd5c0c3a93ea1499b7502e0284b05883fe0f","typeString":"literal_string \"Safe 1.4.1 Fallback Handler is not deployed\""}],"id":4511,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2261:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:93:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4517,"nodeType":"ExpressionStatement","src":"2261:93:36"}]},"documentation":{"id":4494,"nodeType":"StructuredDocumentation","src":"1928:118:36","text":" @notice Constructor\n @dev Initializes the migrationSingleton with the contract's own address."},"id":4519,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":4495,"nodeType":"ParameterList","parameters":[],"src":"2062:2:36"},"returnParameters":{"id":4496,"nodeType":"ParameterList","parameters":[],"src":"2065:0:36"},"scope":4779,"src":"2051:310:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"documentation":{"id":4520,"nodeType":"StructuredDocumentation","src":"2367:124:36","text":" @notice Event indicating a change of master copy address.\n @param singleton New master copy address"},"id":4524,"name":"ChangedMasterCopy","nodeType":"EventDefinition","parameters":{"id":4523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4522,"indexed":false,"mutability":"mutable","name":"singleton","nodeType":"VariableDeclaration","scope":4524,"src":"2520:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4521,"name":"address","nodeType":"ElementaryTypeName","src":"2520:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2519:19:36"},"src":"2496:43:36"},{"body":{"id":4554,"nodeType":"Block","src":"2659:176:36","statements":[{"assignments":[4529],"declarations":[{"constant":false,"id":4529,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":4554,"src":"2669:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4528,"name":"address","nodeType":"ElementaryTypeName","src":"2669:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4532,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4530,"name":"getGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4761,"src":"2685:8:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2685:10:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2669:26:36"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4533,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"2710:5:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2727:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2719:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4534,"name":"address","nodeType":"ElementaryTypeName","src":"2719:7:36","typeDescriptions":{}}},"id":4537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2719:10:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2710:19:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4553,"nodeType":"IfStatement","src":"2706:123:36","trueBody":{"id":4552,"nodeType":"Block","src":"2731:98:36","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"arguments":[{"id":4545,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"2789:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}],"id":4544,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2784:4:36","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2784:11:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_Guard_$1311","typeString":"type(contract Guard)"}},"id":4547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"2784:23:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"id":4541,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"2759:5:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4540,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"2753:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1311_$","typeString":"type(contract Guard)"}},"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2753:12:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1311","typeString":"contract Guard"}},"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3872,"src":"2753:30:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2753:55:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753333030","id":4549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2810:7:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0","typeString":"literal_string \"GS300\""},"value":"GS300"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0","typeString":"literal_string \"GS300\""}],"id":4539,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2745:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2745:73:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4551,"nodeType":"ExpressionStatement","src":"2745:73:36"}]}}]},"documentation":{"id":4525,"nodeType":"StructuredDocumentation","src":"2545:74:36","text":" @dev Private function to check if a guard is supported."},"id":4555,"implemented":true,"kind":"function","modifiers":[],"name":"checkGuard","nodeType":"FunctionDefinition","parameters":{"id":4526,"nodeType":"ParameterList","parameters":[],"src":"2643:2:36"},"returnParameters":{"id":4527,"nodeType":"ParameterList","parameters":[],"src":"2659:0:36"},"scope":4779,"src":"2624:211:36","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4565,"nodeType":"Block","src":"2888:84:36","statements":[{"expression":{"arguments":[{"arguments":[{"id":4560,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"2917:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4559,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"2906:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2906:21:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"547279696e6720746f206d69677261746520616e20696e76616c69642053616665","id":4562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2929:35:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_465ba82c15e57cb7be6a65526d28ef0493a27fa908f0c4c235804aeeefa6df03","typeString":"literal_string \"Trying to migrate an invalid Safe\""},"value":"Trying to migrate an invalid Safe"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_465ba82c15e57cb7be6a65526d28ef0493a27fa908f0c4c235804aeeefa6df03","typeString":"literal_string \"Trying to migrate an invalid Safe\""}],"id":4558,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2898:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2898:67:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4564,"nodeType":"ExpressionStatement","src":"2898:67:36"}]},"id":4566,"implemented":true,"kind":"function","modifiers":[],"name":"checkCurrentSingleton","nodeType":"FunctionDefinition","parameters":{"id":4556,"nodeType":"ParameterList","parameters":[],"src":"2871:2:36"},"returnParameters":{"id":4557,"nodeType":"ParameterList","parameters":[],"src":"2888:0:36"},"scope":4779,"src":"2841:131:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4572,"nodeType":"Block","src":"3008:51:36","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4568,"name":"checkCurrentSingleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4566,"src":"3018:21:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3018:23:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4570,"nodeType":"ExpressionStatement","src":"3018:23:36"},{"id":4571,"nodeType":"PlaceholderStatement","src":"3051:1:36"}]},"id":4573,"name":"validSingletonOnly","nodeType":"ModifierDefinition","parameters":{"id":4567,"nodeType":"ParameterList","parameters":[],"src":"3005:2:36"},"src":"2978:81:36","virtual":false,"visibility":"internal"},{"body":{"id":4590,"nodeType":"Block","src":"3302:113:36","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4579,"name":"checkGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4555,"src":"3312:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3312:12:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4581,"nodeType":"ExpressionStatement","src":"3312:12:36"},{"expression":{"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4582,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3335:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4583,"name":"SAFE_150_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"3347:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3335:30:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4585,"nodeType":"ExpressionStatement","src":"3335:30:36"},{"eventCall":{"arguments":[{"id":4587,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3398:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4586,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"3380:17:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3380:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4589,"nodeType":"EmitStatement","src":"3375:33:36"}]},"documentation":{"id":4574,"nodeType":"StructuredDocumentation","src":"3065:178:36","text":" @notice Migrate to Safe 1.5.0 Singleton (L1) at `SAFE_150_SINGLETON`\n @dev This function should only be called via a delegatecall to perform the upgrade."},"functionSelector":"f6682ab0","id":4591,"implemented":true,"kind":"function","modifiers":[{"id":4577,"modifierName":{"id":4576,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"3283:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3283:18:36"}],"name":"migrateSingleton","nodeType":"FunctionDefinition","parameters":{"id":4575,"nodeType":"ParameterList","parameters":[],"src":"3273:2:36"},"returnParameters":{"id":4578,"nodeType":"ParameterList","parameters":[],"src":"3302:0:36"},"scope":4779,"src":"3248:167:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4610,"nodeType":"Block","src":"3599:112:36","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4597,"name":"migrateSingleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4591,"src":"3609:16:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3609:18:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4599,"nodeType":"ExpressionStatement","src":"3609:18:36"},{"expression":{"arguments":[{"id":4607,"name":"SAFE_150_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"3678:25:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4603,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3652:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}],"id":4602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3644:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4601,"name":"address","nodeType":"ElementaryTypeName","src":"3644:7:36","typeDescriptions":{}}},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3644:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4600,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"3638:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3638:20:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setFallbackHandler","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"3638:39:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3638:66:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4609,"nodeType":"ExpressionStatement","src":"3638:66:36"}]},"documentation":{"id":4592,"nodeType":"StructuredDocumentation","src":"3421:109:36","text":" @notice Migrate and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler."},"functionSelector":"ed007fc6","id":4611,"implemented":true,"kind":"function","modifiers":[{"id":4595,"modifierName":{"id":4594,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"3580:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3580:18:36"}],"name":"migrateWithFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":4593,"nodeType":"ParameterList","parameters":[],"src":"3570:2:36"},"returnParameters":{"id":4596,"nodeType":"ParameterList","parameters":[],"src":"3599:0:36"},"scope":4779,"src":"3535:176:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4637,"nodeType":"Block","src":"3929:137:36","statements":[{"expression":{"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4619,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3939:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4620,"name":"SAFE_150_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4478,"src":"3951:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3939:30:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4622,"nodeType":"ExpressionStatement","src":"3939:30:36"},{"eventCall":{"arguments":[{"id":4624,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"4002:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4623,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"3984:17:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3984:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4626,"nodeType":"EmitStatement","src":"3979:33:36"},{"expression":{"arguments":[{"id":4634,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"4053:5:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4630,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4037:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}],"id":4629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4029:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4628,"name":"address","nodeType":"ElementaryTypeName","src":"4029:7:36","typeDescriptions":{}}},"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4029:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4627,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"4023:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4023:20:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setGuard","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"4023:29:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4023:36:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4636,"nodeType":"ExpressionStatement","src":"4023:36:36"}]},"documentation":{"id":4612,"nodeType":"StructuredDocumentation","src":"3717:137:36","text":" @notice Migrate and set the guard to the specified address.\n @param guard The address of the new guard contract."},"functionSelector":"b7a446f3","id":4638,"implemented":true,"kind":"function","modifiers":[{"id":4617,"modifierName":{"id":4616,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"3910:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3910:18:36"}],"name":"migrateWithSetGuard","nodeType":"FunctionDefinition","parameters":{"id":4615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4614,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":4638,"src":"3888:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4613,"name":"address","nodeType":"ElementaryTypeName","src":"3888:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3887:15:36"},"returnParameters":{"id":4618,"nodeType":"ParameterList","parameters":[],"src":"3929:0:36"},"scope":4779,"src":"3859:207:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4660,"nodeType":"Block","src":"4374:120:36","statements":[{"expression":{"arguments":[{"id":4647,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4641,"src":"4404:5:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4646,"name":"migrateWithSetGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4638,"src":"4384:19:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4384:26:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4649,"nodeType":"ExpressionStatement","src":"4384:26:36"},{"expression":{"arguments":[{"id":4657,"name":"SAFE_150_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"4461:25:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4653,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4435:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}],"id":4652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4427:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4651,"name":"address","nodeType":"ElementaryTypeName","src":"4427:7:36","typeDescriptions":{}}},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4427:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4650,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"4421:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4421:20:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setFallbackHandler","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"4421:39:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4421:66:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4659,"nodeType":"ExpressionStatement","src":"4421:66:36"}]},"documentation":{"id":4639,"nodeType":"StructuredDocumentation","src":"4072:209:36","text":" @notice Migrate, set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\n @param guard The address of the new guard contract."},"functionSelector":"807b56d7","id":4661,"implemented":true,"kind":"function","modifiers":[{"id":4644,"modifierName":{"id":4643,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"4355:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"4355:18:36"}],"name":"migrateWithSetGuardAndFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":4642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4641,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":4661,"src":"4333:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4640,"name":"address","nodeType":"ElementaryTypeName","src":"4333:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4332:15:36"},"returnParameters":{"id":4645,"nodeType":"ParameterList","parameters":[],"src":"4374:0:36"},"scope":4779,"src":"4286:208:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4678,"nodeType":"Block","src":"4742:116:36","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4667,"name":"checkGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4555,"src":"4752:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4752:12:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4669,"nodeType":"ExpressionStatement","src":"4752:12:36"},{"expression":{"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4670,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"4775:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4671,"name":"SAFE_150_SINGLETON_L2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"4787:21:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4775:33:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4673,"nodeType":"ExpressionStatement","src":"4775:33:36"},{"eventCall":{"arguments":[{"id":4675,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"4841:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4674,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"4823:17:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4823:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4677,"nodeType":"EmitStatement","src":"4818:33:36"}]},"documentation":{"id":4662,"nodeType":"StructuredDocumentation","src":"4500:181:36","text":" @notice Migrate to Safe 1.5.0 Singleton (L2) at `SAFE_150_SINGLETON_L2`\n @dev This function should only be called via a delegatecall to perform the upgrade."},"functionSelector":"07f464a4","id":4679,"implemented":true,"kind":"function","modifiers":[{"id":4665,"modifierName":{"id":4664,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"4723:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"4723:18:36"}],"name":"migrateL2Singleton","nodeType":"FunctionDefinition","parameters":{"id":4663,"nodeType":"ParameterList","parameters":[],"src":"4713:2:36"},"returnParameters":{"id":4666,"nodeType":"ParameterList","parameters":[],"src":"4742:0:36"},"scope":4779,"src":"4686:172:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4698,"nodeType":"Block","src":"5073:114:36","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4685,"name":"migrateL2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"5083:18:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5083:20:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4687,"nodeType":"ExpressionStatement","src":"5083:20:36"},{"expression":{"arguments":[{"id":4695,"name":"SAFE_150_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"5154:25:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4691,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5128:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}],"id":4690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5120:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4689,"name":"address","nodeType":"ElementaryTypeName","src":"5120:7:36","typeDescriptions":{}}},"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5120:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4688,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"5114:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5114:20:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setFallbackHandler","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"5114:39:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5114:66:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4697,"nodeType":"ExpressionStatement","src":"5114:66:36"}]},"documentation":{"id":4680,"nodeType":"StructuredDocumentation","src":"4864:138:36","text":" @notice Migrate to Safe 1.5.0 Singleton (L2) and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler."},"functionSelector":"68cb3d94","id":4699,"implemented":true,"kind":"function","modifiers":[{"id":4683,"modifierName":{"id":4682,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"5054:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5054:18:36"}],"name":"migrateL2WithFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":4681,"nodeType":"ParameterList","parameters":[],"src":"5044:2:36"},"returnParameters":{"id":4684,"nodeType":"ParameterList","parameters":[],"src":"5073:0:36"},"scope":4779,"src":"5007:180:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4725,"nodeType":"Block","src":"5436:140:36","statements":[{"expression":{"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4707,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"5446:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4708,"name":"SAFE_150_SINGLETON_L2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"5458:21:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5446:33:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4710,"nodeType":"ExpressionStatement","src":"5446:33:36"},{"eventCall":{"arguments":[{"id":4712,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"5512:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4711,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"5494:17:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5494:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4714,"nodeType":"EmitStatement","src":"5489:33:36"},{"expression":{"arguments":[{"id":4722,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4702,"src":"5563:5:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4718,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5547:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}],"id":4717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5539:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4716,"name":"address","nodeType":"ElementaryTypeName","src":"5539:7:36","typeDescriptions":{}}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5539:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4715,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"5533:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5533:20:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setGuard","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"5533:29:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5533:36:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4724,"nodeType":"ExpressionStatement","src":"5533:36:36"}]},"documentation":{"id":4700,"nodeType":"StructuredDocumentation","src":"5193:166:36","text":" @notice Migrate to Safe 1.5.0 Singleton (L2) and set the guard to the specified address.\n @param guard The address of the new guard contract."},"functionSelector":"dc162932","id":4726,"implemented":true,"kind":"function","modifiers":[{"id":4705,"modifierName":{"id":4704,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"5417:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5417:18:36"}],"name":"migrateL2WithSetGuard","nodeType":"FunctionDefinition","parameters":{"id":4703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4702,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":4726,"src":"5395:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4701,"name":"address","nodeType":"ElementaryTypeName","src":"5395:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5394:15:36"},"returnParameters":{"id":4706,"nodeType":"ParameterList","parameters":[],"src":"5436:0:36"},"scope":4779,"src":"5364:212:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4748,"nodeType":"Block","src":"5915:122:36","statements":[{"expression":{"arguments":[{"id":4735,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"5947:5:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4734,"name":"migrateL2WithSetGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"5925:21:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5925:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4737,"nodeType":"ExpressionStatement","src":"5925:28:36"},{"expression":{"arguments":[{"id":4745,"name":"SAFE_150_FALLBACK_HANDLER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"6004:25:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":4741,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5978:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe150Migration_$4779","typeString":"contract Safe150Migration"}],"id":4740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5970:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4739,"name":"address","nodeType":"ElementaryTypeName","src":"5970:7:36","typeDescriptions":{}}},"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5970:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4738,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"5964:5:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5964:20:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setFallbackHandler","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"5964:39:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5964:66:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4747,"nodeType":"ExpressionStatement","src":"5964:66:36"}]},"documentation":{"id":4727,"nodeType":"StructuredDocumentation","src":"5582:238:36","text":" @notice Migrate to Safe 1.5.0 Singleton (L2), set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\n @param guard The address of the new guard contract."},"functionSelector":"ec7b48c9","id":4749,"implemented":true,"kind":"function","modifiers":[{"id":4732,"modifierName":{"id":4731,"name":"validSingletonOnly","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"5896:18:36","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5896:18:36"}],"name":"migrateL2WithSetGuardAndFallbackHandler","nodeType":"FunctionDefinition","parameters":{"id":4730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4729,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":4749,"src":"5874:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4728,"name":"address","nodeType":"ElementaryTypeName","src":"5874:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5873:15:36"},"returnParameters":{"id":4733,"nodeType":"ParameterList","parameters":[],"src":"5915:0:36"},"scope":4779,"src":"5825:212:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4760,"nodeType":"Block","src":"6234:252:36","statements":[{"assignments":[4756],"declarations":[{"constant":false,"id":4756,"mutability":"mutable","name":"slot","nodeType":"VariableDeclaration","scope":4760,"src":"6244:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6244:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4758,"initialValue":{"id":4757,"name":"GUARD_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"6259:18:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6244:33:36"},{"AST":{"nodeType":"YulBlock","src":"6388:44:36","statements":[{"nodeType":"YulAssignment","src":"6402:20:36","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6417:4:36"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"6411:5:36"},"nodeType":"YulFunctionCall","src":"6411:11:36"},"variableNames":[{"name":"guard","nodeType":"YulIdentifier","src":"6402:5:36"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":4753,"isOffset":false,"isSlot":false,"src":"6402:5:36","valueSize":1},{"declaration":4756,"isOffset":false,"isSlot":false,"src":"6417:4:36","valueSize":1}],"id":4759,"nodeType":"InlineAssembly","src":"6379:53:36"}]},"documentation":{"id":4750,"nodeType":"StructuredDocumentation","src":"6043:128:36","text":" @notice Get the address of the current guard.\n @return guard The address of the current guard contract."},"id":4761,"implemented":true,"kind":"function","modifiers":[],"name":"getGuard","nodeType":"FunctionDefinition","parameters":{"id":4751,"nodeType":"ParameterList","parameters":[],"src":"6193:2:36"},"returnParameters":{"id":4754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4753,"mutability":"mutable","name":"guard","nodeType":"VariableDeclaration","scope":4761,"src":"6219:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4752,"name":"address","nodeType":"ElementaryTypeName","src":"6219:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6218:15:36"},"scope":4779,"src":"6176:310:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4777,"nodeType":"Block","src":"7184:355:36","statements":[{"assignments":[4770],"declarations":[{"constant":false,"id":4770,"mutability":"mutable","name":"size","nodeType":"VariableDeclaration","scope":4777,"src":"7194:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4769,"name":"uint256","nodeType":"ElementaryTypeName","src":"7194:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4771,"nodeType":"VariableDeclarationStatement","src":"7194:12:36"},{"AST":{"nodeType":"YulBlock","src":"7317:52:36","statements":[{"nodeType":"YulAssignment","src":"7331:28:36","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"7351:7:36"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"7339:11:36"},"nodeType":"YulFunctionCall","src":"7339:20:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7331:4:36"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":4764,"isOffset":false,"isSlot":false,"src":"7351:7:36","valueSize":1},{"declaration":4770,"isOffset":false,"isSlot":false,"src":"7331:4:36","valueSize":1}],"id":4772,"nodeType":"InlineAssembly","src":"7308:61:36"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4773,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"7524:4:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7531:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7524:8:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4768,"id":4776,"nodeType":"Return","src":"7517:15:36"}]},"documentation":{"id":4762,"nodeType":"StructuredDocumentation","src":"6492:621:36","text":" @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\n @param account The Ethereum address to be checked.\n @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\n @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\n It may return incorrect results in some edge cases (see documentation for details).\n Developers should use caution when relying on the results of this function for critical decision-making."},"id":4778,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","parameters":{"id":4765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4764,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":4778,"src":"7138:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4763,"name":"address","nodeType":"ElementaryTypeName","src":"7138:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7137:17:36"},"returnParameters":{"id":4768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4767,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4778,"src":"7178:4:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4766,"name":"bool","nodeType":"ElementaryTypeName","src":"7178:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7177:6:36"},"scope":4779,"src":"7118:421:36","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4780,"src":"736:6805:36"}],"src":"86:7456:36"},"id":36},"contracts/libraries/SafeStorage.sol":{"ast":{"absolutePath":"contracts/libraries/SafeStorage.sol","exportedSymbols":{"SafeStorage":[4811]},"id":4812,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4781,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:37"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":4782,"nodeType":"StructuredDocumentation","src":"75:236:37","text":" @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\n @dev Should be always the first base contract of a library that is used with a Safe.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":4811,"linearizedBaseContracts":[4811],"name":"SafeStorage","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4784,"mutability":"mutable","name":"singleton","nodeType":"VariableDeclaration","scope":4811,"src":"373:26:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4783,"name":"address","nodeType":"ElementaryTypeName","src":"373:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4788,"mutability":"mutable","name":"modules","nodeType":"VariableDeclaration","scope":4811,"src":"443:44:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":4787,"keyType":{"id":4785,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"443:27:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":4786,"name":"address","nodeType":"ElementaryTypeName","src":"462:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":4792,"mutability":"mutable","name":"owners","nodeType":"VariableDeclaration","scope":4811,"src":"530:43:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":4791,"keyType":{"id":4789,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"530:27:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":4790,"name":"address","nodeType":"ElementaryTypeName","src":"549:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":4794,"mutability":"mutable","name":"ownerCount","nodeType":"VariableDeclaration","scope":4811,"src":"579:27:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4793,"name":"uint256","nodeType":"ElementaryTypeName","src":"579:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4796,"mutability":"mutable","name":"threshold","nodeType":"VariableDeclaration","scope":4811,"src":"612:26:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4795,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4798,"mutability":"mutable","name":"nonce","nodeType":"VariableDeclaration","scope":4811,"src":"667:22:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4797,"name":"uint256","nodeType":"ElementaryTypeName","src":"667:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4800,"mutability":"mutable","name":"_deprecatedDomainSeparator","nodeType":"VariableDeclaration","scope":4811,"src":"695:43:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4799,"name":"bytes32","nodeType":"ElementaryTypeName","src":"695:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4804,"mutability":"mutable","name":"signedMessages","nodeType":"VariableDeclaration","scope":4811,"src":"744:51:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":4803,"keyType":{"id":4801,"name":"bytes32","nodeType":"ElementaryTypeName","src":"752:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"744:27:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":4802,"name":"uint256","nodeType":"ElementaryTypeName","src":"763:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":4810,"mutability":"mutable","name":"approvedHashes","nodeType":"VariableDeclaration","scope":4811,"src":"801:71:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"},"typeName":{"id":4809,"keyType":{"id":4805,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"801:47:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"},"valueType":{"id":4808,"keyType":{"id":4806,"name":"bytes32","nodeType":"ElementaryTypeName","src":"828:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"820:27:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":4807,"name":"uint256","nodeType":"ElementaryTypeName","src":"839:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"}],"scope":4812,"src":"312:563:37"}],"src":"42:834:37"},"id":37},"contracts/libraries/SafeToL2Migration.sol":{"ast":{"absolutePath":"contracts/libraries/SafeToL2Migration.sol","exportedSymbols":{"Enum":[4287],"ISafe":[4261],"SafeStorage":[4811],"SafeToL2Migration":[5186]},"id":5187,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":4813,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"86:31:38"},{"absolutePath":"contracts/libraries/SafeStorage.sol","file":"../libraries/SafeStorage.sol","id":4815,"nodeType":"ImportDirective","scope":5187,"sourceUnit":4812,"src":"119:57:38","symbolAliases":[{"foreign":{"id":4814,"name":"SafeStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"127:11:38","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/libraries/Enum.sol","file":"../libraries/Enum.sol","id":4817,"nodeType":"ImportDirective","scope":5187,"sourceUnit":4288,"src":"177:43:38","symbolAliases":[{"foreign":{"id":4816,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"src":"185:4:38","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../interfaces/ISafe.sol","id":4819,"nodeType":"ImportDirective","scope":5187,"sourceUnit":4262,"src":"221:46:38","symbolAliases":[{"foreign":{"id":4818,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"229:5:38","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4821,"name":"SafeStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":4811,"src":"789:11:38","typeDescriptions":{"typeIdentifier":"t_contract$_SafeStorage_$4811","typeString":"contract SafeStorage"}},"id":4822,"nodeType":"InheritanceSpecifier","src":"789:11:38"}],"contractDependencies":[4811],"contractKind":"contract","documentation":{"id":4820,"nodeType":"StructuredDocumentation","src":"269:489:38","text":" @title Migration Contract for updating a Safe from 1.1.1/1.3.0/1.4.1 versions to a L2 version. Useful when replaying a Safe from a non L2 network in a L2 network.\n @notice This contract facilitates the migration of a Safe contract from version 1.1.1 to 1.3.0/1.4.1 L2, 1.3.0 to 1.3.0L2 or from 1.4.1 to 1.4.1L2\n         Other versions are not supported\n @dev IMPORTANT: The migration will only work with proxies that store the implementation address in the storage slot 0."},"fullyImplemented":true,"id":5186,"linearizedBaseContracts":[5186,4811],"name":"SafeToL2Migration","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"72f7a956","id":4824,"mutability":"immutable","name":"MIGRATION_SINGLETON","nodeType":"VariableDeclaration","scope":5186,"src":"839:44:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4823,"name":"address","nodeType":"ElementaryTypeName","src":"839:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":4835,"nodeType":"Block","src":"1027:52:38","statements":[{"expression":{"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4828,"name":"MIGRATION_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"1037:19:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4831,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1067:4:38","typeDescriptions":{"typeIdentifier":"t_contract$_SafeToL2Migration_$5186","typeString":"contract SafeToL2Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeToL2Migration_$5186","typeString":"contract SafeToL2Migration"}],"id":4830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1059:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4829,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:38","typeDescriptions":{}}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1059:13:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1037:35:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4834,"nodeType":"ExpressionStatement","src":"1037:35:38"}]},"documentation":{"id":4825,"nodeType":"StructuredDocumentation","src":"890:118:38","text":" @notice Constructor\n @dev Initializes the migrationSingleton with the contract's own address."},"id":4836,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":4826,"nodeType":"ParameterList","parameters":[],"src":"1024:2:38"},"returnParameters":{"id":4827,"nodeType":"ParameterList","parameters":[],"src":"1027:0:38"},"scope":5186,"src":"1013:66:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"documentation":{"id":4837,"nodeType":"StructuredDocumentation","src":"1085:124:38","text":" @notice Event indicating a change of master copy address.\n @param singleton New master copy address"},"id":4841,"name":"ChangedMasterCopy","nodeType":"EventDefinition","parameters":{"id":4840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"indexed":false,"mutability":"mutable","name":"singleton","nodeType":"VariableDeclaration","scope":4841,"src":"1238:17:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4838,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1237:19:38"},"src":"1214:43:38"},{"anonymous":false,"id":4854,"name":"SafeSetup","nodeType":"EventDefinition","parameters":{"id":4853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4843,"indexed":true,"mutability":"mutable","name":"initiator","nodeType":"VariableDeclaration","scope":4854,"src":"1279:25:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4842,"name":"address","nodeType":"ElementaryTypeName","src":"1279:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4846,"indexed":false,"mutability":"mutable","name":"owners","nodeType":"VariableDeclaration","scope":4854,"src":"1306:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4844,"name":"address","nodeType":"ElementaryTypeName","src":"1306:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4845,"nodeType":"ArrayTypeName","src":"1306:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4848,"indexed":false,"mutability":"mutable","name":"threshold","nodeType":"VariableDeclaration","scope":4854,"src":"1324:17:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4847,"name":"uint256","nodeType":"ElementaryTypeName","src":"1324:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4850,"indexed":false,"mutability":"mutable","name":"initializer","nodeType":"VariableDeclaration","scope":4854,"src":"1343:19:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4849,"name":"address","nodeType":"ElementaryTypeName","src":"1343:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4852,"indexed":false,"mutability":"mutable","name":"fallbackHandler","nodeType":"VariableDeclaration","scope":4854,"src":"1364:23:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4851,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1278:110:38"},"src":"1263:126:38"},{"anonymous":false,"id":4878,"name":"SafeMultiSigTransaction","nodeType":"EventDefinition","parameters":{"id":4877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4856,"indexed":false,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":4878,"src":"1434:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4855,"name":"address","nodeType":"ElementaryTypeName","src":"1434:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4858,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":4878,"src":"1454:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1454:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4860,"indexed":false,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":4878,"src":"1477:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4859,"name":"bytes","nodeType":"ElementaryTypeName","src":"1477:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4862,"indexed":false,"mutability":"mutable","name":"operation","nodeType":"VariableDeclaration","scope":4878,"src":"1497:24:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},"typeName":{"id":4861,"name":"Enum.Operation","nodeType":"UserDefinedTypeName","referencedDeclaration":4286,"src":"1497:14:38","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":4864,"indexed":false,"mutability":"mutable","name":"safeTxGas","nodeType":"VariableDeclaration","scope":4878,"src":"1531:17:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1531:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4866,"indexed":false,"mutability":"mutable","name":"baseGas","nodeType":"VariableDeclaration","scope":4878,"src":"1558:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4865,"name":"uint256","nodeType":"ElementaryTypeName","src":"1558:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4868,"indexed":false,"mutability":"mutable","name":"gasPrice","nodeType":"VariableDeclaration","scope":4878,"src":"1583:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4870,"indexed":false,"mutability":"mutable","name":"gasToken","nodeType":"VariableDeclaration","scope":4878,"src":"1609:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4869,"name":"address","nodeType":"ElementaryTypeName","src":"1609:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4872,"indexed":false,"mutability":"mutable","name":"refundReceiver","nodeType":"VariableDeclaration","scope":4878,"src":"1635:30:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4871,"name":"address","nodeType":"ElementaryTypeName","src":"1635:15:38","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4874,"indexed":false,"mutability":"mutable","name":"signatures","nodeType":"VariableDeclaration","scope":4878,"src":"1675:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4873,"name":"bytes","nodeType":"ElementaryTypeName","src":"1675:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4876,"indexed":false,"mutability":"mutable","name":"additionalInfo","nodeType":"VariableDeclaration","scope":4878,"src":"1877:20:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4875,"name":"bytes","nodeType":"ElementaryTypeName","src":"1877:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1424:479:38"},"src":"1395:509:38"},{"body":{"id":4892,"nodeType":"Block","src":"2098:125:38","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4884,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2124:4:38","typeDescriptions":{"typeIdentifier":"t_contract$_SafeToL2Migration_$5186","typeString":"contract SafeToL2Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeToL2Migration_$5186","typeString":"contract SafeToL2Migration"}],"id":4883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2116:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4882,"name":"address","nodeType":"ElementaryTypeName","src":"2116:7:38","typeDescriptions":{}}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2116:13:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4886,"name":"MIGRATION_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"2133:19:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2116:36:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6967726174696f6e2073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6c","id":4888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2154:50:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_15b78a1f3b6f5ce8c19eea2b0f8fa49566744e4d89b92aecbfade8f18a1e41e8","typeString":"literal_string \"Migration should only be called via delegatecall\""},"value":"Migration should only be called via delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_15b78a1f3b6f5ce8c19eea2b0f8fa49566744e4d89b92aecbfade8f18a1e41e8","typeString":"literal_string \"Migration should only be called via delegatecall\""}],"id":4881,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2108:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2108:97:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4890,"nodeType":"ExpressionStatement","src":"2108:97:38"},{"id":4891,"nodeType":"PlaceholderStatement","src":"2215:1:38"}]},"documentation":{"id":4879,"nodeType":"StructuredDocumentation","src":"1910:155:38","text":" @notice Modifier to make a function callable via delegatecall only.\n If the function is called via a regular call, it will revert."},"id":4893,"name":"onlyDelegateCall","nodeType":"ModifierDefinition","parameters":{"id":4880,"nodeType":"ParameterList","parameters":[],"src":"2095:2:38"},"src":"2070:153:38","virtual":false,"visibility":"internal"},{"body":{"id":4904,"nodeType":"Block","src":"2387:177:38","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4897,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"2497:5:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":4898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:38","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2497:10:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665206d7573742068617665206e6f7420657865637574656420616e79207478","id":4900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2509:36:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_b0e3decb9a6d33b925edb996a8f3c6042a3c1eccb7d98c013e5d874314a96f46","typeString":"literal_string \"Safe must have not executed any tx\""},"value":"Safe must have not executed any tx"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b0e3decb9a6d33b925edb996a8f3c6042a3c1eccb7d98c013e5d874314a96f46","typeString":"literal_string \"Safe must have not executed any tx\""}],"id":4896,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2489:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2489:57:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4902,"nodeType":"ExpressionStatement","src":"2489:57:38"},{"id":4903,"nodeType":"PlaceholderStatement","src":"2556:1:38"}]},"documentation":{"id":4894,"nodeType":"StructuredDocumentation","src":"2229:128:38","text":" @notice Modifier to prevent using initialized Safes.\n If Safe has a nonce higher than 0, it will revert"},"id":4905,"name":"onlyNonceZero","nodeType":"ModifierDefinition","parameters":{"id":4895,"nodeType":"ParameterList","parameters":[],"src":"2384:2:38"},"src":"2362:202:38","virtual":false,"visibility":"internal"},{"body":{"id":4956,"nodeType":"Block","src":"2780:626:38","statements":[{"expression":{"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4913,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"2790:9:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4914,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4908,"src":"2802:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2790:23:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4916,"nodeType":"ExpressionStatement","src":"2790:23:38"},{"assignments":[4918],"declarations":[{"constant":false,"id":4918,"mutability":"mutable","name":"additionalInfo","nodeType":"VariableDeclaration","scope":4956,"src":"2867:27:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4917,"name":"bytes","nodeType":"ElementaryTypeName","src":"2867:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4926,"initialValue":{"arguments":[{"hexValue":"30","id":4921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2908:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":4922,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2911:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2911:10:38","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4924,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4796,"src":"2923:9:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4919,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2897:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2897:10:38","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2897:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2867:66:38"},{"eventCall":{"arguments":[{"id":4928,"name":"MIGRATION_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"3068:19:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3101:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4930,"name":"functionData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4910,"src":"3116:12:38","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"expression":{"id":4931,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"3142:4:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$4287_$","typeString":"type(library Enum)"}},"id":4932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":4286,"src":"3142:14:38","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$4286_$","typeString":"type(enum Enum.Operation)"}},"id":4933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"DelegateCall","nodeType":"MemberAccess","src":"3142:27:38","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"}},{"hexValue":"30","id":4934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3183:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3198:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3213:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"30","id":4939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3236:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3228:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4937,"name":"address","nodeType":"ElementaryTypeName","src":"3228:7:38","typeDescriptions":{}}},"id":4940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3228:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"arguments":[{"hexValue":"30","id":4945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3268:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3260:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4943,"name":"address","nodeType":"ElementaryTypeName","src":"3260:7:38","typeDescriptions":{}}},"id":4946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3260:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3252:8:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4941,"name":"address","nodeType":"ElementaryTypeName","src":"3252:8:38","stateMutability":"payable","typeDescriptions":{}}},"id":4947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3252:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"hexValue":"","id":4948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3285:2:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"id":4949,"name":"additionalInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"3332:14:38","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$4286","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4927,"name":"SafeMultiSigTransaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"3031:23:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$4286_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256,uint256,uint256,address,address payable,bytes memory,bytes memory)"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3031:325:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4951,"nodeType":"EmitStatement","src":"3026:330:38"},{"eventCall":{"arguments":[{"id":4953,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3389:9:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4952,"name":"ChangedMasterCopy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4841,"src":"3371:17:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3371:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4955,"nodeType":"EmitStatement","src":"3366:33:38"}]},"documentation":{"id":4906,"nodeType":"StructuredDocumentation","src":"2570:132:38","text":" @dev Internal function with common migration steps, changes the singleton and emits SafeMultiSigTransaction event"},"id":4957,"implemented":true,"kind":"function","modifiers":[],"name":"migrate","nodeType":"FunctionDefinition","parameters":{"id":4911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4908,"mutability":"mutable","name":"l2Singleton","nodeType":"VariableDeclaration","scope":4957,"src":"2724:19:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4907,"name":"address","nodeType":"ElementaryTypeName","src":"2724:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4910,"mutability":"mutable","name":"functionData","nodeType":"VariableDeclaration","scope":4957,"src":"2745:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4909,"name":"bytes","nodeType":"ElementaryTypeName","src":"2745:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2723:48:38"},"returnParameters":{"id":4912,"nodeType":"ParameterList","parameters":[],"src":"2780:0:38"},"scope":5186,"src":"2707:699:38","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5044,"nodeType":"Block","src":"3867:933:38","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4970,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"3893:9:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3885:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4968,"name":"address","nodeType":"ElementaryTypeName","src":"3885:7:38","typeDescriptions":{}}},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3885:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4972,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"3907:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3885:33:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520697320616c7265616479207573696e67207468652073696e676c65746f6e","id":4974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3920:37:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_0b4076fa24c959dfee48e30b00fd306326d578bb189a83b34b1aa738e13bd18d","typeString":"literal_string \"Safe is already using the singleton\""},"value":"Safe is already using the singleton"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0b4076fa24c959dfee48e30b00fd306326d578bb189a83b34b1aa738e13bd18d","typeString":"literal_string \"Safe is already using the singleton\""}],"id":4967,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3877:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3877:81:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4976,"nodeType":"ExpressionStatement","src":"3877:81:38"},{"assignments":[4978],"declarations":[{"constant":false,"id":4978,"mutability":"mutable","name":"oldSingletonVersion","nodeType":"VariableDeclaration","scope":5044,"src":"3968:27:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4977,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3968:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4989,"initialValue":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4983,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"4031:9:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4982,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"4025:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4025:16:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"VERSION","nodeType":"MemberAccess","referencedDeclaration":4236,"src":"4025:24:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4025:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4980,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4008:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4008:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4008:44:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4979,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3998:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3998:55:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3968:85:38"},{"assignments":[4991],"declarations":[{"constant":false,"id":4991,"mutability":"mutable","name":"newSingletonVersion","nodeType":"VariableDeclaration","scope":5044,"src":"4063:27:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4990,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4063:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5002,"initialValue":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4996,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"4126:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4995,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"4120:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":4997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4120:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"VERSION","nodeType":"MemberAccess","referencedDeclaration":4236,"src":"4120:26:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4120:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4993,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4103:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4103:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4103:46:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4992,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4093:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4093:57:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4063:87:38"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5004,"name":"oldSingletonVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"4169:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5005,"name":"newSingletonVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"4192:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4169:42:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c322073696e676c65746f6e206d757374206d617463682063757272656e742076657273696f6e2073696e676c65746f6e","id":5007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4213:51:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_9dc9a10edab1874abef9a9c77005f5a05ad475d8be3baa69a3d577fe20976bdc","typeString":"literal_string \"L2 singleton must match current version singleton\""},"value":"L2 singleton must match current version singleton"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9dc9a10edab1874abef9a9c77005f5a05ad475d8be3baa69a3d577fe20976bdc","typeString":"literal_string \"L2 singleton must match current version singleton\""}],"id":5003,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4161:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4161:104:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5009,"nodeType":"ExpressionStatement","src":"4161:104:38"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5011,"name":"newSingletonVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"4417:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"312e332e30","id":5015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4467:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a08c3e203132c561752255a4d52ffae85bb9c5d33cb3291520dea1b84356389","typeString":"literal_string \"1.3.0\""},"value":"1.3.0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6a08c3e203132c561752255a4d52ffae85bb9c5d33cb3291520dea1b84356389","typeString":"literal_string \"1.3.0\""}],"expression":{"id":5013,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4450:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4450:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4450:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5012,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4440:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4440:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4417:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5019,"name":"newSingletonVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"4480:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"312e342e31","id":5023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4530:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_7015c1a48403d132ad83884b326109f1b309c42f752b2abd1db79522ee074673","typeString":"literal_string \"1.4.1\""},"value":"1.4.1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7015c1a48403d132ad83884b326109f1b309c42f752b2abd1db79522ee074673","typeString":"literal_string \"1.4.1\""}],"expression":{"id":5021,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4513:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4513:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4513:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5020,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4503:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4503:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4480:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4417:122:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726f76696465642073696e676c65746f6e2076657273696f6e206973206e6f7420737570706f72746564","id":5028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4553:45:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e6daceb567f95bea6657cbbf48177e5396c012dd13311882189d6fc154ba686","typeString":"literal_string \"Provided singleton version is not supported\""},"value":"Provided singleton version is not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e6daceb567f95bea6657cbbf48177e5396c012dd13311882189d6fc154ba686","typeString":"literal_string \"Provided singleton version is not supported\""}],"id":5010,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4396:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4396:212:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5030,"nodeType":"ExpressionStatement","src":"4396:212:38"},{"assignments":[5032],"declarations":[{"constant":false,"id":5032,"mutability":"mutable","name":"functionData","nodeType":"VariableDeclaration","scope":5044,"src":"4674:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5031,"name":"bytes","nodeType":"ElementaryTypeName","src":"4674:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5038,"initialValue":{"arguments":[{"hexValue":"30786566323632346165","id":5035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4725:10:38","typeDescriptions":{"typeIdentifier":"t_rational_4012254382_by_1","typeString":"int_const 4012254382"},"value":"0xef2624ae"},{"id":5036,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"4737:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_4012254382_by_1","typeString":"int_const 4012254382"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5033,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4702:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4702:22:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4702:47:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4674:75:38"},{"expression":{"arguments":[{"id":5040,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"4767:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5041,"name":"functionData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"4780:12:38","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5039,"name":"migrate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"4759:7:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4759:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5043,"nodeType":"ExpressionStatement","src":"4759:34:38"}]},"documentation":{"id":4958,"nodeType":"StructuredDocumentation","src":"3412:370:38","text":" @notice Migrate from Safe 1.3.0/1.4.1 Singleton (L1) to the same version provided L2 singleton\n Safe is required to have nonce 0 so backend can support it after the migration\n @dev This function should only be called via a delegatecall to perform the upgrade.\n Singletons versions will be compared, so it implies that contracts exist"},"functionSelector":"ef2624ae","id":5045,"implemented":true,"kind":"function","modifiers":[{"id":4963,"modifierName":{"id":4962,"name":"onlyDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"3836:16:38","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3836:16:38"},{"id":4965,"modifierName":{"id":4964,"name":"onlyNonceZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"3853:13:38","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3853:13:38"}],"name":"migrateToL2","nodeType":"FunctionDefinition","parameters":{"id":4961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4960,"mutability":"mutable","name":"l2Singleton","nodeType":"VariableDeclaration","scope":5045,"src":"3808:19:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4959,"name":"address","nodeType":"ElementaryTypeName","src":"3808:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3807:21:38"},"returnParameters":{"id":4966,"nodeType":"ParameterList","parameters":[],"src":"3867:0:38"},"scope":5186,"src":"3787:1013:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5167,"nodeType":"Block","src":"5357:1163:38","statements":[{"expression":{"arguments":[{"arguments":[{"id":5059,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"5386:15:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5058,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"5375:10:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5375:27:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66616c6c6261636b48616e646c6572206973206e6f74206120636f6e7472616374","id":5061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5404:35:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_31f454e636bf23bd4e937292dcde92832e9c4d775e936c60a66a0fb9022cabb9","typeString":"literal_string \"fallbackHandler is not a contract\""},"value":"fallbackHandler is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_31f454e636bf23bd4e937292dcde92832e9c4d775e936c60a66a0fb9022cabb9","typeString":"literal_string \"fallbackHandler is not a contract\""}],"id":5057,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5367:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5367:73:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5063,"nodeType":"ExpressionStatement","src":"5367:73:38"},{"assignments":[5065],"declarations":[{"constant":false,"id":5065,"mutability":"mutable","name":"oldSingletonVersion","nodeType":"VariableDeclaration","scope":5167,"src":"5451:27:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5064,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5451:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5076,"initialValue":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":5070,"name":"singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"5514:9:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5069,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"5508:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":5071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5508:16:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":5072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"VERSION","nodeType":"MemberAccess","referencedDeclaration":4236,"src":"5508:24:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5508:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5067,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5491:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"5491:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5491:44:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5066,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5481:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5481:55:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5451:85:38"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5078,"name":"oldSingletonVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"5554:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"312e312e31","id":5082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5604:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_9dd6d964e72a376a8989d1d2720ab48ff4f2ad77466fb517dabc84f4a79478d4","typeString":"literal_string \"1.1.1\""},"value":"1.1.1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9dd6d964e72a376a8989d1d2720ab48ff4f2ad77466fb517dabc84f4a79478d4","typeString":"literal_string \"1.1.1\""}],"expression":{"id":5080,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5587:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"5587:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5587:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5079,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5577:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5577:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5554:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726f76696465642073696e676c65746f6e2076657273696f6e206973206e6f7420737570706f72746564","id":5086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5615:45:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e6daceb567f95bea6657cbbf48177e5396c012dd13311882189d6fc154ba686","typeString":"literal_string \"Provided singleton version is not supported\""},"value":"Provided singleton version is not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e6daceb567f95bea6657cbbf48177e5396c012dd13311882189d6fc154ba686","typeString":"literal_string \"Provided singleton version is not supported\""}],"id":5077,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5546:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5546:115:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5088,"nodeType":"ExpressionStatement","src":"5546:115:38"},{"assignments":[5090],"declarations":[{"constant":false,"id":5090,"mutability":"mutable","name":"newSingletonVersion","nodeType":"VariableDeclaration","scope":5167,"src":"5672:27:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5089,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5672:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5101,"initialValue":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":5095,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"5735:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5094,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"5729:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5729:18:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"VERSION","nodeType":"MemberAccess","referencedDeclaration":4236,"src":"5729:26:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":5098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5729:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5092,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5712:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"5712:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5712:46:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5091,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5702:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5702:57:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5672:87:38"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5103,"name":"newSingletonVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5090,"src":"5790:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"312e332e30","id":5107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5840:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a08c3e203132c561752255a4d52ffae85bb9c5d33cb3291520dea1b84356389","typeString":"literal_string \"1.3.0\""},"value":"1.3.0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6a08c3e203132c561752255a4d52ffae85bb9c5d33cb3291520dea1b84356389","typeString":"literal_string \"1.3.0\""}],"expression":{"id":5105,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5823:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"5823:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5823:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5104,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5813:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5813:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5790:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5111,"name":"newSingletonVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5090,"src":"5853:19:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"312e342e31","id":5115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5903:7:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_7015c1a48403d132ad83884b326109f1b309c42f752b2abd1db79522ee074673","typeString":"literal_string \"1.4.1\""},"value":"1.4.1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7015c1a48403d132ad83884b326109f1b309c42f752b2abd1db79522ee074673","typeString":"literal_string \"1.4.1\""}],"expression":{"id":5113,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5886:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"5886:16:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5886:25:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5112,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5876:9:38","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5876:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5853:59:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5790:122:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726f76696465642073696e676c65746f6e2076657273696f6e206973206e6f7420737570706f72746564","id":5120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5926:45:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e6daceb567f95bea6657cbbf48177e5396c012dd13311882189d6fc154ba686","typeString":"literal_string \"Provided singleton version is not supported\""},"value":"Provided singleton version is not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e6daceb567f95bea6657cbbf48177e5396c012dd13311882189d6fc154ba686","typeString":"literal_string \"Provided singleton version is not supported\""}],"id":5102,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5769:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5769:212:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5122,"nodeType":"ExpressionStatement","src":"5769:212:38"},{"assignments":[5124],"declarations":[{"constant":false,"id":5124,"mutability":"mutable","name":"safe","nodeType":"VariableDeclaration","scope":5167,"src":"5992:10:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"},"typeName":{"id":5123,"name":"ISafe","nodeType":"UserDefinedTypeName","referencedDeclaration":4261,"src":"5992:5:38","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"visibility":"internal"}],"id":5131,"initialValue":{"arguments":[{"arguments":[{"id":5128,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6019:4:38","typeDescriptions":{"typeIdentifier":"t_contract$_SafeToL2Migration_$5186","typeString":"contract SafeToL2Migration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeToL2Migration_$5186","typeString":"contract SafeToL2Migration"}],"id":5127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6011:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5126,"name":"address","nodeType":"ElementaryTypeName","src":"6011:7:38","typeDescriptions":{}}},"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6011:13:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5125,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"6005:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":5130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6005:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"nodeType":"VariableDeclarationStatement","src":"5992:33:38"},{"expression":{"arguments":[{"id":5135,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"6059:15:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5132,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"6035:4:38","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setFallbackHandler","nodeType":"MemberAccess","referencedDeclaration":3886,"src":"6035:23:38","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6035:40:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5137,"nodeType":"ExpressionStatement","src":"6035:40:38"},{"eventCall":{"arguments":[{"id":5139,"name":"MIGRATION_SINGLETON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"6211:19:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5140,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"6232:4:38","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":5141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getOwners","nodeType":"MemberAccess","referencedDeclaration":4062,"src":"6232:14:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function () view external returns (address[] memory)"}},"id":5142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6232:16:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5143,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"6250:4:38","typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":5144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getThreshold","nodeType":"MemberAccess","referencedDeclaration":4047,"src":"6250:17:38","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6250:19:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":5148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6279:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6271:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5146,"name":"address","nodeType":"ElementaryTypeName","src":"6271:7:38","typeDescriptions":{}}},"id":5149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6271:10:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5150,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"6283:15:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5138,"name":"SafeSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"6201:9:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address[] memory,uint256,address,address)"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6201:98:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5152,"nodeType":"EmitStatement","src":"6196:103:38"},{"assignments":[5154],"declarations":[{"constant":false,"id":5154,"mutability":"mutable","name":"functionData","nodeType":"VariableDeclaration","scope":5167,"src":"6377:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5153,"name":"bytes","nodeType":"ElementaryTypeName","src":"6377:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5161,"initialValue":{"arguments":[{"hexValue":"30786439613230383132","id":5157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6428:10:38","typeDescriptions":{"typeIdentifier":"t_rational_3651274770_by_1","typeString":"int_const 3651274770"},"value":"0xd9a20812"},{"id":5158,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"6440:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5159,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"6453:15:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3651274770_by_1","typeString":"int_const 3651274770"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5155,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6405:3:38","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"6405:22:38","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":5160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6405:64:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6377:92:38"},{"expression":{"arguments":[{"id":5163,"name":"l2Singleton","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"6487:11:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5164,"name":"functionData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5154,"src":"6500:12:38","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5162,"name":"migrate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"6479:7:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6479:34:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5166,"nodeType":"ExpressionStatement","src":"6479:34:38"}]},"documentation":{"id":5046,"nodeType":"StructuredDocumentation","src":"4806:437:38","text":" @notice Migrate from Safe 1.1.1 Singleton to 1.3.0 or 1.4.1 L2\n Safe is required to have nonce 0 so backend can support it after the migration\n @dev This function should only be called via a delegatecall to perform the upgrade.\n Singletons version will be checked, so it implies that contracts exist.\n A valid and compatible fallbackHandler needs to be provided, only existance will be checked."},"functionSelector":"d9a20812","id":5168,"implemented":true,"kind":"function","modifiers":[{"id":5053,"modifierName":{"id":5052,"name":"onlyDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"5326:16:38","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5326:16:38"},{"id":5055,"modifierName":{"id":5054,"name":"onlyNonceZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"5343:13:38","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5343:13:38"}],"name":"migrateFromV111","nodeType":"FunctionDefinition","parameters":{"id":5051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5048,"mutability":"mutable","name":"l2Singleton","nodeType":"VariableDeclaration","scope":5168,"src":"5273:19:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5047,"name":"address","nodeType":"ElementaryTypeName","src":"5273:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5050,"mutability":"mutable","name":"fallbackHandler","nodeType":"VariableDeclaration","scope":5168,"src":"5294:23:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5049,"name":"address","nodeType":"ElementaryTypeName","src":"5294:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5272:46:38"},"returnParameters":{"id":5056,"nodeType":"ParameterList","parameters":[],"src":"5357:0:38"},"scope":5186,"src":"5248:1272:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5184,"nodeType":"Block","src":"7218:355:38","statements":[{"assignments":[5177],"declarations":[{"constant":false,"id":5177,"mutability":"mutable","name":"size","nodeType":"VariableDeclaration","scope":5184,"src":"7228:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5176,"name":"uint256","nodeType":"ElementaryTypeName","src":"7228:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5178,"nodeType":"VariableDeclarationStatement","src":"7228:12:38"},{"AST":{"nodeType":"YulBlock","src":"7351:52:38","statements":[{"nodeType":"YulAssignment","src":"7365:28:38","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"7385:7:38"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"7373:11:38"},"nodeType":"YulFunctionCall","src":"7373:20:38"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7365:4:38"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":5171,"isOffset":false,"isSlot":false,"src":"7385:7:38","valueSize":1},{"declaration":5177,"isOffset":false,"isSlot":false,"src":"7365:4:38","valueSize":1}],"id":5179,"nodeType":"InlineAssembly","src":"7342:61:38"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5180,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5177,"src":"7558:4:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7565:1:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7558:8:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5175,"id":5183,"nodeType":"Return","src":"7551:15:38"}]},"documentation":{"id":5169,"nodeType":"StructuredDocumentation","src":"6526:621:38","text":" @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\n @param account The Ethereum address to be checked.\n @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\n @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\n It may return incorrect results in some edge cases (see documentation for details).\n Developers should use caution when relying on the results of this function for critical decision-making."},"id":5185,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","parameters":{"id":5172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5171,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":5185,"src":"7172:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5170,"name":"address","nodeType":"ElementaryTypeName","src":"7172:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7171:17:38"},"returnParameters":{"id":5175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5174,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5185,"src":"7212:4:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5173,"name":"bool","nodeType":"ElementaryTypeName","src":"7212:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7211:6:38"},"scope":5186,"src":"7152:421:38","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5187,"src":"759:6816:38"}],"src":"86:7490:38"},"id":38},"contracts/libraries/SignMessageLib.sol":{"ast":{"absolutePath":"contracts/libraries/SignMessageLib.sol","exportedSymbols":{"ISafe":[4261],"SafeStorage":[4811],"SignMessageLib":[5273]},"id":5274,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":5188,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:39"},{"absolutePath":"contracts/libraries/SafeStorage.sol","file":"./SafeStorage.sol","id":5190,"nodeType":"ImportDirective","scope":5274,"sourceUnit":4812,"src":"75:46:39","symbolAliases":[{"foreign":{"id":5189,"name":"SafeStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"83:11:39","typeDescriptions":{}}}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../interfaces/ISafe.sol","id":5192,"nodeType":"ImportDirective","scope":5274,"sourceUnit":4262,"src":"122:46:39","symbolAliases":[{"foreign":{"id":5191,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"src":"130:5:39","typeDescriptions":{}}}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5194,"name":"SafeStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":4811,"src":"353:11:39","typeDescriptions":{"typeIdentifier":"t_contract$_SafeStorage_$4811","typeString":"contract SafeStorage"}},"id":5195,"nodeType":"InheritanceSpecifier","src":"353:11:39"}],"contractDependencies":[4811],"contractKind":"contract","documentation":{"id":5193,"nodeType":"StructuredDocumentation","src":"170:155:39","text":" @title SignMessageLib - Allows to sign messages on-chain by writing the signed message hashes on-chain.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":5273,"linearizedBaseContracts":[5273,4811],"name":"SignMessageLib","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5198,"mutability":"constant","name":"SAFE_MSG_TYPEHASH","nodeType":"VariableDeclaration","scope":5273,"src":"419:111:39","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"419:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307836306233636266386234613232336436386436343162336236646466396132393865376633333731306366336433613964313134366235613631353066626361","id":5197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"464:66:39","typeDescriptions":{"typeIdentifier":"t_rational_43739706848186989041152069077571617734008543096732098246335109361212071148490_by_1","typeString":"int_const 4373...(69 digits omitted)...8490"},"value":"0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca"},"visibility":"private"},{"anonymous":false,"id":5202,"name":"SignMsg","nodeType":"EventDefinition","parameters":{"id":5201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5200,"indexed":true,"mutability":"mutable","name":"msgHash","nodeType":"VariableDeclaration","scope":5202,"src":"551:23:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"551:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"550:25:39"},"src":"537:39:39"},{"body":{"id":5224,"nodeType":"Block","src":"948:124:39","statements":[{"assignments":[5209],"declarations":[{"constant":false,"id":5209,"mutability":"mutable","name":"msgHash","nodeType":"VariableDeclaration","scope":5224,"src":"958:15:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5208,"name":"bytes32","nodeType":"ElementaryTypeName","src":"958:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5213,"initialValue":{"arguments":[{"id":5211,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"991:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5210,"name":"getMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"976:14:39","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) view returns (bytes32)"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"976:21:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"958:39:39"},{"expression":{"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5214,"name":"signedMessages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"1007:14:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":5216,"indexExpression":{"id":5215,"name":"msgHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5209,"src":"1022:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1007:23:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":5217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1033:1:39","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1007:27:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5219,"nodeType":"ExpressionStatement","src":"1007:27:39"},{"eventCall":{"arguments":[{"id":5221,"name":"msgHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5209,"src":"1057:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5220,"name":"SignMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5202,"src":"1049:7:39","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1049:16:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5223,"nodeType":"EmitStatement","src":"1044:21:39"}]},"documentation":{"id":5203,"nodeType":"StructuredDocumentation","src":"582:309:39","text":" @notice Marks a message (`_data`) as signed.\n @dev Can be verified using EIP-1271 validation method by passing the pre-image of the message hash and empty bytes as the signature.\n @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)."},"functionSelector":"85a5affe","id":5225,"implemented":true,"kind":"function","modifiers":[],"name":"signMessage","nodeType":"FunctionDefinition","parameters":{"id":5206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5205,"mutability":"mutable","name":"_data","nodeType":"VariableDeclaration","scope":5225,"src":"917:20:39","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5204,"name":"bytes","nodeType":"ElementaryTypeName","src":"917:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"916:22:39"},"returnParameters":{"id":5207,"nodeType":"ParameterList","parameters":[],"src":"948:0:39"},"scope":5273,"src":"896:176:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5271,"nodeType":"Block","src":"1320:241:39","statements":[{"assignments":[5234],"declarations":[{"constant":false,"id":5234,"mutability":"mutable","name":"safeMessageHash","nodeType":"VariableDeclaration","scope":5271,"src":"1330:23:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1330:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5244,"initialValue":{"arguments":[{"arguments":[{"id":5238,"name":"SAFE_MSG_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5198,"src":"1377:17:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":5240,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5228,"src":"1406:7:39","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5239,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1396:9:39","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1396:18:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5236,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1366:3:39","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1366:10:39","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1366:49:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5235,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1356:9:39","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1356:60:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1330:86:39"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30783139","id":5250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1467:4:39","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"0x19"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"}],"id":5249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1460:6:39","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":5248,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1460:6:39","typeDescriptions":{}}},"id":5251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1460:12:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[{"hexValue":"30783031","id":5254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1481:4:39","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":5253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1474:6:39","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":5252,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1474:6:39","typeDescriptions":{}}},"id":5255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1474:12:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[{"arguments":[{"id":5261,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1510:4:39","typeDescriptions":{"typeIdentifier":"t_contract$_SignMessageLib_$5273","typeString":"contract SignMessageLib"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SignMessageLib_$5273","typeString":"contract SignMessageLib"}],"id":5260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1502:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5259,"name":"address","nodeType":"ElementaryTypeName","src":"1502:7:39","typeDescriptions":{}}},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1502:13:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1494:8:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5257,"name":"address","nodeType":"ElementaryTypeName","src":"1494:8:39","stateMutability":"payable","typeDescriptions":{}}},"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1494:22:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5256,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"1488:5:39","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISafe_$4261_$","typeString":"type(contract ISafe)"}},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1488:29:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISafe_$4261","typeString":"contract ISafe"}},"id":5265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"domainSeparator","nodeType":"MemberAccess","referencedDeclaration":4204,"src":"1488:45:39","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":5266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1488:47:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5267,"name":"safeMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"1537:15:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5246,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1443:3:39","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1443:16:39","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1443:110:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5245,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1433:9:39","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:121:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5232,"id":5270,"nodeType":"Return","src":"1426:128:39"}]},"documentation":{"id":5226,"nodeType":"StructuredDocumentation","src":"1078:161:39","text":" @dev Returns hash of a message that can be signed by owners.\n @param message Message that should be hashed.\n @return Message hash."},"functionSelector":"0a1028c4","id":5272,"implemented":true,"kind":"function","modifiers":[],"name":"getMessageHash","nodeType":"FunctionDefinition","parameters":{"id":5229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5228,"mutability":"mutable","name":"message","nodeType":"VariableDeclaration","scope":5272,"src":"1268:20:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5227,"name":"bytes","nodeType":"ElementaryTypeName","src":"1268:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1267:22:39"},"returnParameters":{"id":5232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5231,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5272,"src":"1311:7:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1311:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1310:9:39"},"scope":5273,"src":"1244:317:39","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5274,"src":"326:1237:39"}],"src":"42:1522:39"},"id":39}},"contracts":{"contracts/Safe.sol":{"Safe":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"approvedHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"ApproveHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"initiator","type":"address"},{"indexed":false,"internalType":"address[]","name":"owners","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"},{"indexed":false,"internalType":"address","name":"initializer","type":"address"},{"indexed":false,"internalType":"address","name":"fallbackHandler","type":"address"}],"name":"SafeSetup","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"SignMsg","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"approvedHashes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"uint256","name":"requiredSignatures","type":"uint256"}],"name":"checkNSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"getTransactionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_threshold","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"address","name":"fallbackHandler","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address payable","name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"signedMessages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulateAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Stefan George - @Georgi87Richard Meissner - @rmeissner","details":"Most important concepts:      - Threshold: Number of required confirmations for a Safe transaction.      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and        approve transactions. Managed in `OwnerManager`.      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.      - Nonce: Each transaction should have a different nonce to prevent replay attacks.      - Signature: A valid signature of an owner of the Safe for a transaction hash.      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/      For the events-based implementation see `SafeL2.sol`.","kind":"dev","methods":{"addOwnerWithThreshold(address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"New owner address."}},"approveHash(bytes32)":{"details":"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures","params":{"hashToApprove":"The hash to mark as approved for signatures that are verified by this contract."}},"changeThreshold(uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold."}},"checkNSignatures(address,bytes32,bytes,uint256)":{"details":"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.","params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","executor":"Address that executing the transaction.        ⚠️⚠️⚠️ Make sure that the executor address is a legitmate executor.        Incorrectly passed the executor might reduce the threshold by 1 signature. ⚠️⚠️⚠️","requiredSignatures":"Amount of required valid signatures.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"checkSignatures(bytes32,bytes)":{"params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"checkSignatures(bytes32,bytes,bytes)":{"details":"This function makes it compatible with previous versions.","params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"disableModule(address,address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be removed.","prevModule":"Previous module in the modules linked list."}},"domainSeparator()":{"details":"Returns the domain separator for this contract, as defined in the EIP-712 standard.","returns":{"_0":"bytes32 The domain separator hash."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be whitelisted."}},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"details":"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.","params":{"baseGas":"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)","data":"Data payload of Safe transaction.","gasPrice":"Gas price that should be used for the payment calculation.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type of Safe transaction.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the Safe transaction.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."},"returns":{"success":"Boolean indicating transaction's success."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"success":"Boolean flag indicating if the call succeeded."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getModulesPaginated(address,uint256)":{"params":{"pageSize":"Maximum number of modules that should be returned. Has to be > 0","start":"Start of the page. Has to be a module or start pointer (0x1 address)"},"returns":{"array":"Array of modules.","next":"Start of the next page."}},"getOwners()":{"returns":{"_0":"Array of Safe owners."}},"getStorageAt(uint256,uint256)":{"params":{"length":"- the number of words (32 bytes) of data to read","offset":"- the offset in the current contract's storage in words to start reading from"},"returns":{"_0":"the bytes that were read."}},"getThreshold()":{"returns":{"_0":"Threshold number."}},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"params":{"_nonce":"Transaction nonce.","baseGas":"Gas costs for data used to trigger the safe transaction.","data":"Data payload.","gasPrice":"Maximum gas price that should be used for this transaction.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the safe transaction.","to":"Destination address.","value":"Ether value."},"returns":{"_0":"Transaction hash."}},"isModuleEnabled(address)":{"returns":{"_0":"True if the module is enabled"}},"isOwner(address)":{"returns":{"_0":"Boolean if owner is an owner of the Safe."}},"removeOwner(address,address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"Owner address to be removed.","prevOwner":"Owner that pointed to the owner to be removed in the linked list"}},"setFallbackHandler(address)":{"details":"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.","params":{"handler":"contract to handle fallback calls."}},"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"details":"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.","params":{"_owners":"List of Safe owners.","_threshold":"Number of required confirmations for a Safe transaction.","data":"Data payload for optional delegate call.","fallbackHandler":"Handler for fallback calls to this contract","payment":"Value that should be paid","paymentReceiver":"Address that should receive the payment (or 0 if tx.origin)","paymentToken":"Token that should be used for the payment (0 is ETH)","to":"Contract address for optional delegate call."}},"simulateAndRevert(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}},"swapOwner(address,address,address)":{"details":"This can only be done via a Safe transaction.","params":{"newOwner":"New owner address.","oldOwner":"Owner address to be replaced.","prevOwner":"Owner that pointed to the owner to be replaced in the linked list"}}},"stateVariables":{"VERSION":{"return":"Version string."},"approvedHashes":{"params":{"messageHash":"Hash of message that should be checked.","owner":"Owner address that should be checked."},"return":"Number denoting if an owner approved the hash."},"nonce":{"return":"Nonce."},"signedMessages":{"params":{"messageHash":"Hash of message that should be checked."},"return":"Number denoting if an owner signed the hash."}},"title":"Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060016004819055506151dc806100286000396000f3fe6080604052600436106101c65760003560e01c8063affed0e0116100f7578063e19a9dd911610095578063f08a032311610064578063f08a0323146113ec578063f698da251461143d578063f8dc5dd914611468578063ffa1ad74146114e35761021b565b8063e19a9dd91461120d578063e318b52b1461125e578063e75235b8146112ef578063ed516d511461131a5761021b565b8063cc2f8452116100d1578063cc2f845214610f5a578063d4d9bdcd14611027578063d8d11f7814611062578063e009cfde1461119c5761021b565b8063affed0e014610cd7578063b4faba0914610d02578063b63e800d14610dea5761021b565b80635ae6bd37116101645780636a7612021161013e5780636a761202146108d75780637d83297414610a93578063934f3a1114610b02578063a0e67e2b14610c6b5761021b565b80635ae6bd37146107fc578063610b59251461084b578063694e80c31461089c5761021b565b80632f54bf6e116101a05780632f54bf6e14610441578063468721a7146104a85780635229073f146105bd5780635624b25b1461073e5761021b565b80630d582f13146102835780631fcac7f3146102de5780632d9ad53d146103da5761021b565b3661021b573373ffffffffffffffffffffffffffffffffffffffff167f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d346040518082815260200191505060405180910390a2005b34801561022757600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5548061025457600080f35b60405136600082373360601b3682015260008060143601836000865af13d6000833e8061027f573d82fd5b3d82f35b34801561028f57600080fd5b506102dc600480360360408110156102a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611573565b005b3480156102ea57600080fd5b506103d86004803603608081101561030157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561034857600080fd5b82018360208201111561035a57600080fd5b8035906020019184600183028401116401000000008311171561037c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506118cd565b005b3480156103e657600080fd5b50610429600480360360208110156103fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf1565b60405180821515815260200191505060405180910390f35b34801561044d57600080fd5b506104906004803603602081101561046457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dc3565b60405180821515815260200191505060405180910390f35b3480156104b457600080fd5b506105a5600480360360808110156104cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561051257600080fd5b82018360208201111561052457600080fd5b8035906020019184600183028401116401000000008311171561054657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050611e93565b60405180821515815260200191505060405180910390f35b3480156105c957600080fd5b506106ba600480360360808110156105e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561062757600080fd5b82018360208201111561063957600080fd5b8035906020019184600183028401116401000000008311171561065b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050611eec565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156107025780820151818401526020810190506106e7565b50505050905090810190601f16801561072f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561074a57600080fd5b506107816004803603604081101561076157600080fd5b810190808035906020019092919080359060200190929190505050611f61565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107c15780820151818401526020810190506107a6565b50505050905090810190601f1680156107ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561080857600080fd5b506108356004803603602081101561081f57600080fd5b8101908080359060200190929190505050611fe8565b6040518082815260200191505060405180910390f35b34801561085757600080fd5b5061089a6004803603602081101561086e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612000565b005b3480156108a857600080fd5b506108d5600480360360208110156108bf57600080fd5b81019080803590602001909291905050506122fe565b005b610a7b60048036036101408110156108ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561093557600080fd5b82018360208201111561094757600080fd5b8035906020019184600183028401116401000000008311171561096957600080fd5b9091929391929390803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156109f557600080fd5b820183602082011115610a0757600080fd5b80359060200191846001830284011164010000000083111715610a2957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506123b0565b60405180821515815260200191505060405180910390f35b348015610a9f57600080fd5b50610aec60048036036040811015610ab657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612847565b6040518082815260200191505060405180910390f35b348015610b0e57600080fd5b50610c6960048036036060811015610b2557600080fd5b810190808035906020019092919080359060200190640100000000811115610b4c57600080fd5b820183602082011115610b5e57600080fd5b80359060200191846001830284011164010000000083111715610b8057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610be357600080fd5b820183602082011115610bf557600080fd5b80359060200191846001830284011164010000000083111715610c1757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061286c565b005b348015610c7757600080fd5b50610c806128b8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610cc3578082015181840152602081019050610ca8565b505050509050019250505060405180910390f35b348015610ce357600080fd5b50610cec612a61565b6040518082815260200191505060405180910390f35b348015610d0e57600080fd5b50610de860048036036040811015610d2557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610d6257600080fd5b820183602082011115610d7457600080fd5b80359060200191846001830284011164010000000083111715610d9657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612a67565b005b348015610df657600080fd5b50610f586004803603610100811015610e0e57600080fd5b8101908080359060200190640100000000811115610e2b57600080fd5b820183602082011115610e3d57600080fd5b80359060200191846020830284011164010000000083111715610e5f57600080fd5b909192939192939080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610eaa57600080fd5b820183602082011115610ebc57600080fd5b80359060200191846001830284011164010000000083111715610ede57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a8e565b005b348015610f6657600080fd5b50610fb360048036036040811015610f7d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612c4c565b60405180806020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611012578082015181840152602081019050610ff7565b50505050905001935050505060405180910390f35b34801561103357600080fd5b506110606004803603602081101561104a57600080fd5b8101908080359060200190929190505050612f2c565b005b34801561106e57600080fd5b50611186600480360361014081101561108657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156110cd57600080fd5b8201836020820111156110df57600080fd5b8035906020019184600183028401116401000000008311171561110157600080fd5b9091929391929390803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613087565b6040518082815260200191505060405180910390f35b3480156111a857600080fd5b5061120b600480360360408110156111bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130b4565b005b34801561121957600080fd5b5061125c6004803603602081101561123057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133b1565b005b34801561126a57600080fd5b506112ed6004803603606081101561128157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613556565b005b3480156112fb57600080fd5b50611304613a9e565b6040518082815260200191505060405180910390f35b34801561132657600080fd5b506113ea6004803603604081101561133d57600080fd5b81019080803590602001909291908035906020019064010000000081111561136457600080fd5b82018360208201111561137657600080fd5b8035906020019184600183028401116401000000008311171561139857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613aa8565b005b3480156113f857600080fd5b5061143b6004803603602081101561140f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613ac6565b005b34801561144957600080fd5b50611452613b1d565b6040518082815260200191505060405180910390f35b34801561147457600080fd5b506114e16004803603606081101561148b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613b99565b005b3480156114ef57600080fd5b506114f8613ef4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561153857808201518184015260208101905061151d565b50505050905090810190601f1680156115655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61157b613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806115e25750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061161857503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611647576116467f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611704576117037f4753323034000000000000000000000000000000000000000000000000000000613f8c565b5b60026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003600081548092919060010191905055508173ffffffffffffffffffffffffffffffffffffffff167f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2660405160405180910390a280600454146118c9576118c8816122fe565b5b5050565b6118e1604182613fcb90919063ffffffff16565b82511015611913576119127f4753303230000000000000000000000000000000000000000000000000000000613f8c565b5b6000808060008060005b86811015611ce55761192f8882614005565b8260ff16925080945081955082965050505060008414156119ac578260001c9450611964604188613fcb90919063ffffffff16565b8260001c1015611998576119977f4753303231000000000000000000000000000000000000000000000000000000613f8c565b5b6119a7858a8a8560001c614034565b611ba9565b6001841415611a7b578260001c94508473ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614158015611a4757506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002054145b15611a7657611a757f4753303235000000000000000000000000000000000000000000000000000000613f8c565b5b611ba8565b601e841115611b405760018960405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018281526020019150506040516020818303038152906040528051906020012060048603858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611b2f573d6000803e3d6000fd5b505050602060405103519450611ba7565b60018985858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611b9a573d6000803e3d6000fd5b5050506020604051035194505b5b5b8573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111580611c6f5750600073ffffffffffffffffffffffffffffffffffffffff16600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80611ca65750600173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15611cd557611cd47f4753303236000000000000000000000000000000000000000000000000000000613f8c565b5b849550808060010191505061191d565b50505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600173ffffffffffffffffffffffffffffffffffffffff1614158015611dbc5750600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b6000600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611e8b5750600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b159050919050565b6000806000611ea48787878761425d565b91509150611ed5878787877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61452f565b9250611ee282828561457b565b5050949350505050565b60006060600080611eff8888888861425d565b91509150611f30888888887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61452f565b9350604051925060203d0183016040523d83523d6000602085013e611f5682828661457b565b505094509492505050565b606060006020830267ffffffffffffffff81118015611f7f57600080fd5b506040519080825280601f01601f191660200182016040528015611fb25781602001600182028036833780820191505090505b50905060005b83811015611fdd57808501548060208302602085010152508080600101915050611fb8565b508091505092915050565b60076020528060005260406000206000915090505481565b612008613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061206f5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1561209e5761209d7f4753313031000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461215b5761215a7f4753313032000000000000000000000000000000000000000000000000000000613f8c565b5b60016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844060405160405180910390a250565b612306613f2d565b60035481111561233a576123397f4753323031000000000000000000000000000000000000000000000000000000613f8c565b5b600081141561236d5761236c7f4753323032000000000000000000000000000000000000000000000000000000613f8c565b5b806004819055507f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c936004546040518082815260200191505060405180910390a150565b6000806123d68d8d8d8d8d8d8d8d8d8d6005600081548092919060010191905055613087565b90506123e28184613aa8565b60006123ec6146bc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146125d2578073ffffffffffffffffffffffffffffffffffffffff166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b8152600401808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c8152602001806020018a600181111561248f57fe5b81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528d8d82818152602001925080828437600081840152601f19601f820116905080830192505050838103825285818151815260200191508051906020019080838360005b83811015612561578082015181840152602081019050612546565b50505050905090810190601f16801561258e5780820380516001836020036101000a031916815260200191505b509e505050505050505050505050505050600060405180830381600087803b1580156125b957600080fd5b505af11580156125cd573d6000803e3d6000fd5b505050505b6101f46125f96109c48b01603f60408d02816125ea57fe5b046146e590919063ffffffff16565b015a101561262b5761262a7f4753303130000000000000000000000000000000000000000000000000000000613f8c565b5b60005a90506126948f8f8f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e60008d14612689578e61268f565b6109c45a035b61452f565b93506126a95a826146ff90919063ffffffff16565b9050831580156126b9575060008a145b80156126c55750600088145b156126f4576126f37f4753303133000000000000000000000000000000000000000000000000000000613f8c565b5b60008089111561270e5761270b828b8b8b8b61471f565b90505b841561275157837f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e826040518082815260200191505060405180910390a261278a565b837f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23826040518082815260200191505060405180910390a25b5050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612836578073ffffffffffffffffffffffffffffffffffffffff16639327136883856040518363ffffffff1660e01b815260040180838152602001821515815260200192505050600060405180830381600087803b15801561281d57600080fd5b505af1158015612831573d6000803e3d6000fd5b505050505b50509b9a5050505050505050505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b6000600454905060008114156128a6576128a57f4753303031000000000000000000000000000000000000000000000000000000613f8c565b5b6128b2338584846118cd565b50505050565b6060600060035467ffffffffffffffff811180156128d557600080fd5b506040519080825280602002602001820160405280156129045781602001602082028036833780820191505090505b50905060008060026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612a5857808383815181106129af57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050818060010192505061296e565b82935050505090565b60055481565b600080825160208401855af46040518181523d60208201523d6000604083013e60403d0181fd5b612ad98a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896148d3565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612b1757612b1684614c7a565b5b612b658787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050614cfe565b6000821115612b7f57612b7d8260006001868561471f565b505b3373ffffffffffffffffffffffffffffffffffffffff167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b8960405180806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252878782818152602001925060200280828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a250505050505050505050565b60606000600173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015612c935750612c9184611cf1565b155b15612cc257612cc17f4753313035000000000000000000000000000000000000000000000000000000613f8c565b5b6000831415612cf557612cf47f4753313036000000000000000000000000000000000000000000000000000000613f8c565b5b8267ffffffffffffffff81118015612d0c57600080fd5b50604051908082528060200260200182016040528015612d3b5781602001602082028036833780820191505090505b5091506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015612e0d5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015612e1857508381105b15612ed35781838281518110612e2a57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508080600101915050612da3565b600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612f2157826001820381518110612f1657fe5b602002602001015191505b808352509250929050565b600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612fea57612fe97f4753303330000000000000000000000000000000000000000000000000000000613f8c565b5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16817ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c60405160405180910390a350565b600061309c8c8c8c8c8c8c8c8c8c8c8c614f08565b8051906020012090509b9a5050505050505050505050565b6130bc613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806131235750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15613152576131517f4753313031000000000000000000000000000000000000000000000000000000613f8c565b5b8073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461320e5761320d7f4753313033000000000000000000000000000000000000000000000000000000613f8c565b5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427660405160405180910390a25050565b6133b9613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156134be57508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f945b8148000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b15801561348157600080fd5b505afa158015613495573d6000803e3d6000fd5b505050506040513d60208110156134ab57600080fd5b8101908080519060200190929190505050155b156134ed576134ec7f4753333030000000000000000000000000000000000000000000000000000000613f8c565b5b807f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8558073ffffffffffffffffffffffffffffffffffffffff167f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa260405160405180910390a250565b61355e613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806135c55750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b806135fb57503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1561362a576136297f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146136e7576136e67f4753323034000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061374e5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561377d5761377c7f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b8173ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613839576138387f4753323035000000000000000000000000000000000000000000000000000000613f8c565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf60405160405180910390a28073ffffffffffffffffffffffffffffffffffffffff167f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2660405160405180910390a2505050565b6000600454905090565b613ac282604051806020016040528060008152508361286c565b5050565b613ace613f2d565b613ad781614c7a565b8073ffffffffffffffffffffffffffffffffffffffff167f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b060405160405180910390a250565b6000804690507f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a7946921860001b8130604051602001808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200193505050506040516020818303038152906040528051906020012091505090565b613ba1613f2d565b806001600354031015613bd857613bd77f4753323031000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480613c3f5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15613c6e57613c6d7f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b8173ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613d2a57613d297f4753323035000000000000000000000000000000000000000000000000000000613f8c565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008154809291906001900391905055508173ffffffffffffffffffffffffffffffffffffffff167ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf60405160405180910390a28060045414613eef57613eee816122fe565b5b505050565b6040518060400160405280600581526020017f312e342e3100000000000000000000000000000000000000000000000000000081525081565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613f8a57613f897f4753303331000000000000000000000000000000000000000000000000000000613f8c565b5b565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260056024820152816044820152606481fd5b600080831415613fde5760009050613fff565b6000828402905082848281613fef57fe5b0414613ffa57600080fd5b809150505b92915050565b6000806000836041026020810186015192506040810186015191506060810186015160001a9350509250925092565b815161404a6020836150b090919063ffffffff16565b111561407a576140797f4753303232000000000000000000000000000000000000000000000000000000613f8c565b5b600060208284010151905082516140ad8261409f6020866150b090919063ffffffff16565b6150b090919063ffffffff16565b11156140dd576140dc7f4753303233000000000000000000000000000000000000000000000000000000613f8c565b5b60606020838501019050631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168673ffffffffffffffffffffffffffffffffffffffff16631626ba7e87846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614181578082015181840152602081019050614166565b50505050905090810190601f1680156141ae5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156141cc57600080fd5b505afa1580156141e0573d6000803e3d6000fd5b505050506040513d60208110156141f657600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614614255576142547f4753303234000000000000000000000000000000000000000000000000000000613f8c565b5b505050505050565b6000806142686146bc565b9150600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156143335750600073ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b6143a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f475331303400000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614614526578173ffffffffffffffffffffffffffffffffffffffff1663728c297287878787336040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200184600181111561443f57fe5b81526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561449857808201518184015260208101905061447d565b50505050905090810190601f1680156144c55780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156144e857600080fd5b505af11580156144fc573d6000803e3d6000fd5b505050506040513d602081101561451257600080fd5b810190808051906020019092919050505090505b94509492505050565b600060018081111561453d57fe5b83600181111561454957fe5b1415614562576000808551602087018986f49050614572565b600080855160208701888a87f190505b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614614625578273ffffffffffffffffffffffffffffffffffffffff16639327136883836040518363ffffffff1660e01b815260040180838152602001821515815260200192505050600060405180830381600087803b15801561460c57600080fd5b505af1158015614620573d6000803e3d6000fd5b505050505b8015614673573373ffffffffffffffffffffffffffffffffffffffff167f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb860405160405180910390a26146b7565b3373ffffffffffffffffffffffffffffffffffffffff167facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37560405160405180910390a25b505050565b60007f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c854905090565b6000818310156146f557816146f7565b825b905092915050565b60008282111561470e57600080fd5b600082840390508091505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461475c578261475e565b325b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614868576147c83a86106147a5573a6147a7565b855b6147ba888a6150b090919063ffffffff16565b613fcb90919063ffffffff16565b915060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d806000811461482a576040519150601f19603f3d011682016040523d82523d6000602084013e61482f565b606091505b5050905080614862576148617f4753303131000000000000000000000000000000000000000000000000000000613f8c565b5b506148c9565b61488d8561487f888a6150b090919063ffffffff16565b613fcb90919063ffffffff16565b915061489a8482846150cf565b6148c8576148c77f4753303132000000000000000000000000000000000000000000000000000000613f8c565b5b5b5095945050505050565b60006004541115614908576149077f4753323030000000000000000000000000000000000000000000000000000000613f8c565b5b815181111561493b5761493a7f4753323031000000000000000000000000000000000000000000000000000000613f8c565b5b600081141561496e5761496d7f4753323032000000000000000000000000000000000000000000000000000000613f8c565b5b60006001905060005b8351811015614be657600084828151811061498e57fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806149ff5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80614a3557503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80614a6b57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15614a9a57614a997f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614614b5757614b567f4753323034000000000000000000000000000000000000000000000000000000613f8c565b5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550809250508080600101915050614977565b506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550825160038190555081600481905550505050565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415614cd857614cd77f4753343030000000000000000000000000000000000000000000000000000000613f8c565b5b807f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d55550565b600073ffffffffffffffffffffffffffffffffffffffff1660016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614614dbc57614dbb7f4753313030000000000000000000000000000000000000000000000000000000613f8c565b5b6001806000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614614f0457614e7882615193565b614ea657614ea57f4753303032000000000000000000000000000000000000000000000000000000613f8c565b5b614ed58260008360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61452f565b614f0357614f027f4753303030000000000000000000000000000000000000000000000000000000613f8c565b5b5b5050565b606060007fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d860001b8d8d8d8d60405180838380828437808301925050509250505060405180910390208c8c8c8c8c8c8c604051602001808c81526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001898152602001886001811115614f9957fe5b81526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b505050505050505050505050604051602081830303815290604052805190602001209050601960f81b600160f81b615025613b1d565b8360405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018381526020018281526020019450505050506040516020818303038152906040529150509b9a5050505050505050505050565b6000808284019050838110156150c557600080fd5b8091505092915050565b60008063a9059cbb8484604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602060008251602084016000896127105a03f13d60008114615176576020811461517e5760009350615189565b819350615189565b600051158215171593505b5050509392505050565b600080823b90506000811191505091905056fea26469706673582212204a069779be5833cb1bd354c0a3e20ad20e67353cf652d9448492bb78543bdf7464736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x51DC DUP1 PUSH2 0x28 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xE19A9DD9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF08A0323 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF08A0323 EQ PUSH2 0x13EC JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x143D JUMPI DUP1 PUSH4 0xF8DC5DD9 EQ PUSH2 0x1468 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x14E3 JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xE19A9DD9 EQ PUSH2 0x120D JUMPI DUP1 PUSH4 0xE318B52B EQ PUSH2 0x125E JUMPI DUP1 PUSH4 0xE75235B8 EQ PUSH2 0x12EF JUMPI DUP1 PUSH4 0xED516D51 EQ PUSH2 0x131A JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xCC2F8452 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC2F8452 EQ PUSH2 0xF5A JUMPI DUP1 PUSH4 0xD4D9BDCD EQ PUSH2 0x1027 JUMPI DUP1 PUSH4 0xD8D11F78 EQ PUSH2 0x1062 JUMPI DUP1 PUSH4 0xE009CFDE EQ PUSH2 0x119C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0xCD7 JUMPI DUP1 PUSH4 0xB4FABA09 EQ PUSH2 0xD02 JUMPI DUP1 PUSH4 0xB63E800D EQ PUSH2 0xDEA JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x6A761202 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x6A761202 EQ PUSH2 0x8D7 JUMPI DUP1 PUSH4 0x7D832974 EQ PUSH2 0xA93 JUMPI DUP1 PUSH4 0x934F3A11 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0xC6B JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 EQ PUSH2 0x7FC JUMPI DUP1 PUSH4 0x610B5925 EQ PUSH2 0x84B JUMPI DUP1 PUSH4 0x694E80C3 EQ PUSH2 0x89C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x2F54BF6E GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x2F54BF6E EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x468721A7 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x5229073F EQ PUSH2 0x5BD JUMPI DUP1 PUSH4 0x5624B25B EQ PUSH2 0x73E JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xD582F13 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x1FCAC7F3 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x2D9AD53D EQ PUSH2 0x3DA JUMPI PUSH2 0x21B JUMP JUMPDEST CALLDATASIZE PUSH2 0x21B JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3D0CE9BFC3ED7D6862DBB28B2DEA94561FE714A1B4D019AA8AF39730D1AD7C3D CALLVALUE PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SLOAD DUP1 PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD CALLDATASIZE PUSH1 0x0 DUP3 CALLDATACOPY CALLER PUSH1 0x60 SHL CALLDATASIZE DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x14 CALLDATASIZE ADD DUP4 PUSH1 0x0 DUP7 GAS CALL RETURNDATASIZE PUSH1 0x0 DUP4 RETURNDATACOPY DUP1 PUSH2 0x27F JUMPI RETURNDATASIZE DUP3 REVERT JUMPDEST RETURNDATASIZE DUP3 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1573 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x18CD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x490 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1E93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x5E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x702 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6E7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x72F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x781 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x7A6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7EE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x835 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1FE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x89A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x86E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2000 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22FE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA7B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x23B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2847 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC69 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xB25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x286C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC80 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCA8 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCEC PUSH2 0x2A61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2A67 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF58 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xE0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xE5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xEDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2A8E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFB3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2C4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1012 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFF7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1060 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2F2C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1186 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x1086 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x10CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3087 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x120B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x30B4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x33B1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x126A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3556 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1304 PUSH2 0x3A9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13EA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3AA8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3AC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1452 PUSH2 0x3B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x148B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B99 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F8 PUSH2 0x3EF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1538 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x151D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1565 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157B PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x15E2 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1618 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1647 JUMPI PUSH2 0x1646 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1704 JUMPI PUSH2 0x1703 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x18C9 JUMPI PUSH2 0x18C8 DUP2 PUSH2 0x22FE JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x18E1 PUSH1 0x41 DUP3 PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 MLOAD LT ISZERO PUSH2 0x1913 JUMPI PUSH2 0x1912 PUSH32 0x4753303230000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1CE5 JUMPI PUSH2 0x192F DUP9 DUP3 PUSH2 0x4005 JUMP JUMPDEST DUP3 PUSH1 0xFF AND SWAP3 POP DUP1 SWAP5 POP DUP2 SWAP6 POP DUP3 SWAP7 POP POP POP POP PUSH1 0x0 DUP5 EQ ISZERO PUSH2 0x19AC JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP PUSH2 0x1964 PUSH1 0x41 DUP9 PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x0 SHR LT ISZERO PUSH2 0x1998 JUMPI PUSH2 0x1997 PUSH32 0x4753303231000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x19A7 DUP6 DUP11 DUP11 DUP6 PUSH1 0x0 SHR PUSH2 0x4034 JUMP JUMPDEST PUSH2 0x1BA9 JUMP JUMPDEST PUSH1 0x1 DUP5 EQ ISZERO PUSH2 0x1A7B JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1A47 JUMPI POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x1A76 JUMPI PUSH2 0x1A75 PUSH32 0x4753303235000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1E DUP5 GT ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x1 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 DUP7 SUB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP PUSH2 0x1BA7 JUMP JUMPDEST PUSH1 0x1 DUP10 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO DUP1 PUSH2 0x1C6F JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1CA6 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1CD5 JUMPI PUSH2 0x1CD4 PUSH32 0x4753303236000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP5 SWAP6 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x191D JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1DBC JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1E8B JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1EA4 DUP8 DUP8 DUP8 DUP8 PUSH2 0x425D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1ED5 DUP8 DUP8 DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x452F JUMP JUMPDEST SWAP3 POP PUSH2 0x1EE2 DUP3 DUP3 DUP6 PUSH2 0x457B JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1EFF DUP9 DUP9 DUP9 DUP9 PUSH2 0x425D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1F30 DUP9 DUP9 DUP9 DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x452F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0x20 RETURNDATASIZE ADD DUP4 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x1F56 DUP3 DUP3 DUP7 PUSH2 0x457B JUMP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x20 DUP4 MUL PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1F7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FB2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FDD JUMPI DUP1 DUP6 ADD SLOAD DUP1 PUSH1 0x20 DUP4 MUL PUSH1 0x20 DUP6 ADD ADD MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1FB8 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2008 PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x206F JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x209E JUMPI PUSH2 0x209D PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x215B JUMPI PUSH2 0x215A PUSH32 0x4753313032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xECDF3A3EFFEA5783A3C4C2140E677577666428D44ED9D474A0B3A4C9943F8440 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x2306 PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0x233A JUMPI PUSH2 0x2339 PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x236D JUMPI PUSH2 0x236C PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0x610F7FF2B304AE8903C3DE74C60C6AB1F7D6226B3F52C5161905BB5AD4039C93 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23D6 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH1 0x5 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE PUSH2 0x3087 JUMP JUMPDEST SWAP1 POP PUSH2 0x23E2 DUP2 DUP5 PUSH2 0x3AA8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23EC PUSH2 0x46BC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25D2 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x75F0BB52 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 CALLER PUSH1 0x40 MLOAD DUP14 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP11 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x248F JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP14 DUP14 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2561 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2546 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x258E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x25CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1F4 PUSH2 0x25F9 PUSH2 0x9C4 DUP12 ADD PUSH1 0x3F PUSH1 0x40 DUP14 MUL DUP2 PUSH2 0x25EA JUMPI INVALID JUMPDEST DIV PUSH2 0x46E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ADD GAS LT ISZERO PUSH2 0x262B JUMPI PUSH2 0x262A PUSH32 0x4753303130000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x2694 DUP16 DUP16 DUP16 DUP16 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP15 PUSH1 0x0 DUP14 EQ PUSH2 0x2689 JUMPI DUP15 PUSH2 0x268F JUMP JUMPDEST PUSH2 0x9C4 GAS SUB JUMPDEST PUSH2 0x452F JUMP JUMPDEST SWAP4 POP PUSH2 0x26A9 GAS DUP3 PUSH2 0x46FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP4 ISZERO DUP1 ISZERO PUSH2 0x26B9 JUMPI POP PUSH1 0x0 DUP11 EQ JUMPDEST DUP1 ISZERO PUSH2 0x26C5 JUMPI POP PUSH1 0x0 DUP9 EQ JUMPDEST ISZERO PUSH2 0x26F4 JUMPI PUSH2 0x26F3 PUSH32 0x4753303133000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP10 GT ISZERO PUSH2 0x270E JUMPI PUSH2 0x270B DUP3 DUP12 DUP12 DUP12 DUP12 PUSH2 0x471F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x2751 JUMPI DUP4 PUSH32 0x442E715F626346E8C54381002DA614F62BEE8D27386535B2521EC8540898556E DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x278A JUMP JUMPDEST DUP4 PUSH32 0x23428B18ACFB3EA64B08DC0C1D296EA9C09702C09083CA5272E64D115B687D23 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2836 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x281D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2831 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x28A6 JUMPI PUSH2 0x28A5 PUSH32 0x4753303031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x28B2 CALLER DUP6 DUP5 DUP5 PUSH2 0x18CD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x28D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2904 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2A58 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x2 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x296E JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD DUP6 GAS DELEGATECALL PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE RETURNDATASIZE PUSH1 0x20 DUP3 ADD MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x40 DUP4 ADD RETURNDATACOPY PUSH1 0x40 RETURNDATASIZE ADD DUP2 REVERT JUMPDEST PUSH2 0x2AD9 DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 PUSH2 0x48D3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B17 JUMPI PUSH2 0x2B16 DUP5 PUSH2 0x4C7A JUMP JUMPDEST JUMPDEST PUSH2 0x2B65 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x4CFE JUMP JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x2B7F JUMPI PUSH2 0x2B7D DUP3 PUSH1 0x0 PUSH1 0x1 DUP7 DUP6 PUSH2 0x471F JUMP JUMPDEST POP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP12 DUP12 DUP12 DUP12 DUP10 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2C93 JUMPI POP PUSH2 0x2C91 DUP5 PUSH2 0x1CF1 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2CC2 JUMPI PUSH2 0x2CC1 PUSH32 0x4753313035000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 EQ ISZERO PUSH2 0x2CF5 JUMPI PUSH2 0x2CF4 PUSH32 0x4753313036000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2D0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D3B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2E0D JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2E18 JUMPI POP DUP4 DUP2 LT JUMPDEST ISZERO PUSH2 0x2ED3 JUMPI DUP2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2DA3 JUMP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F21 JUMPI DUP3 PUSH1 0x1 DUP3 SUB DUP2 MLOAD DUP2 LT PUSH2 0x2F16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST DUP1 DUP4 MSTORE POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2FEA JUMPI PUSH2 0x2FE9 PUSH32 0x4753303330000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xF2A0EB156472D1440255B0D7C1E19CC07115D1051FE605B0DCE69ACFEC884D9C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x309C DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x4F08 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x30BC PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3123 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3152 JUMPI PUSH2 0x3151 PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x320E JUMPI PUSH2 0x320D PUSH32 0x4753313033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAB4FA2B463F581B2B32CB3B7E3B704B9CE37CC209B5FB4D77E593ACE4054276 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x33B9 PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x34BE JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3495 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x34AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP ISZERO JUMPDEST ISZERO PUSH2 0x34ED JUMPI PUSH2 0x34EC PUSH32 0x4753333030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SSTORE DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1151116914515BC0891FF9047A6CB32CF902546F83066499BCF8BA33D2353FA2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x355E PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x35C5 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x35FB JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x362A JUMPI PUSH2 0x3629 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x36E7 JUMPI PUSH2 0x36E6 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x374E JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x377D JUMPI PUSH2 0x377C PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3839 JUMPI PUSH2 0x3838 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3AC2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP4 PUSH2 0x286C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3ACE PUSH2 0x3F2D JUMP JUMPDEST PUSH2 0x3AD7 DUP2 PUSH2 0x4C7A JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5AC6C46C93C8D0E53714BA3B53DB3E7C046DA994313D7ED0D192028BC7C228B0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CHAINID SWAP1 POP PUSH32 0x47E79534A245952E8B16893A336B85A3D9EA9FA8C573F3D803AFB92A79469218 PUSH1 0x0 SHL DUP2 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x3BA1 PUSH2 0x3F2D JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x3 SLOAD SUB LT ISZERO PUSH2 0x3BD8 JUMPI PUSH2 0x3BD7 PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3C3F JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3C6E JUMPI PUSH2 0x3C6D PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D2A JUMPI PUSH2 0x3D29 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 SUB SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x3EEF JUMPI PUSH2 0x3EEE DUP2 PUSH2 0x22FE JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3F8A JUMPI PUSH2 0x3F89 PUSH32 0x4753303331000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x3FDE JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3FFF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x3FEF JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3FFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP2 ADD DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x404A PUSH1 0x20 DUP4 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x407A JUMPI PUSH2 0x4079 PUSH32 0x4753303232000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MLOAD SWAP1 POP DUP3 MLOAD PUSH2 0x40AD DUP3 PUSH2 0x409F PUSH1 0x20 DUP7 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x40DD JUMPI PUSH2 0x40DC PUSH32 0x4753303233000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x60 PUSH1 0x20 DUP4 DUP6 ADD ADD SWAP1 POP PUSH4 0x1626BA7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E DUP8 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4181 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4166 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x41AE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x41F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x4255 JUMPI PUSH2 0x4254 PUSH32 0x4753303234000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4268 PUSH2 0x46BC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x4333 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST PUSH2 0x43A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4753313034000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4526 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x728C2972 DUP8 DUP8 DUP8 DUP8 CALLER PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x443F JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4498 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x447D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x44C5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x453D JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4549 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4562 JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x4572 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4625 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x460C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x4673 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6895C13664AA4F67288B25D7A21D7AAA34916E355FB9B6FAE0A139A9085BECB8 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x46B7 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xACD2C8702804128FDB0DB2BB49F6D127DD0181C13FD45DBFE16DE0930E2BD375 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x46F5 JUMPI DUP2 PUSH2 0x46F7 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x470E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x475C JUMPI DUP3 PUSH2 0x475E JUMP JUMPDEST ORIGIN JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4868 JUMPI PUSH2 0x47C8 GASPRICE DUP7 LT PUSH2 0x47A5 JUMPI GASPRICE PUSH2 0x47A7 JUMP JUMPDEST DUP6 JUMPDEST PUSH2 0x47BA DUP9 DUP11 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x482A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x482F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x4862 JUMPI PUSH2 0x4861 PUSH32 0x4753303131000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST POP PUSH2 0x48C9 JUMP JUMPDEST PUSH2 0x488D DUP6 PUSH2 0x487F DUP9 DUP11 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x489A DUP5 DUP3 DUP5 PUSH2 0x50CF JUMP JUMPDEST PUSH2 0x48C8 JUMPI PUSH2 0x48C7 PUSH32 0x4753303132000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD GT ISZERO PUSH2 0x4908 JUMPI PUSH2 0x4907 PUSH32 0x4753323030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP2 MLOAD DUP2 GT ISZERO PUSH2 0x493B JUMPI PUSH2 0x493A PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x496E JUMPI PUSH2 0x496D PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x4BE6 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x498E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x49FF JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4A35 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4A6B JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x4A9A JUMPI PUSH2 0x4A99 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4B57 JUMPI PUSH2 0x4B56 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 SWAP3 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4977 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 MLOAD PUSH1 0x3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4CD8 JUMPI PUSH2 0x4CD7 PUSH32 0x4753343030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4DBC JUMPI PUSH2 0x4DBB PUSH32 0x4753313030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4F04 JUMPI PUSH2 0x4E78 DUP3 PUSH2 0x5193 JUMP JUMPDEST PUSH2 0x4EA6 JUMPI PUSH2 0x4EA5 PUSH32 0x4753303032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x4ED5 DUP3 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x452F JUMP JUMPDEST PUSH2 0x4F03 JUMPI PUSH2 0x4F02 PUSH32 0x4753303030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xBB8310D486368DB6BD6F849402FDD73AD53D316B5A4B2644AD6EFE0F941286D8 PUSH1 0x0 SHL DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4F99 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL PUSH2 0x5025 PUSH2 0x3B1D JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x50C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x20 PUSH1 0x0 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 DUP10 PUSH2 0x2710 GAS SUB CALL RETURNDATASIZE PUSH1 0x0 DUP2 EQ PUSH2 0x5176 JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0x517E JUMPI PUSH1 0x0 SWAP4 POP PUSH2 0x5189 JUMP JUMPDEST DUP2 SWAP4 POP PUSH2 0x5189 JUMP JUMPDEST PUSH1 0x0 MLOAD ISZERO DUP3 ISZERO OR ISZERO SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A MOD SWAP8 PUSH26 0xBE5833CB1BD354C0A3E20AD20E67353CF652D9448492BB78543B 0xDF PUSH21 0x64736F6C6343000706003300000000000000000000 ","sourceMap":"2289:16737:0:-:0;;;3709:271;;;;;;;;;;3972:1;3960:9;:13;;;;2289:16737;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101c65760003560e01c8063affed0e0116100f7578063e19a9dd911610095578063f08a032311610064578063f08a0323146113ec578063f698da251461143d578063f8dc5dd914611468578063ffa1ad74146114e35761021b565b8063e19a9dd91461120d578063e318b52b1461125e578063e75235b8146112ef578063ed516d511461131a5761021b565b8063cc2f8452116100d1578063cc2f845214610f5a578063d4d9bdcd14611027578063d8d11f7814611062578063e009cfde1461119c5761021b565b8063affed0e014610cd7578063b4faba0914610d02578063b63e800d14610dea5761021b565b80635ae6bd37116101645780636a7612021161013e5780636a761202146108d75780637d83297414610a93578063934f3a1114610b02578063a0e67e2b14610c6b5761021b565b80635ae6bd37146107fc578063610b59251461084b578063694e80c31461089c5761021b565b80632f54bf6e116101a05780632f54bf6e14610441578063468721a7146104a85780635229073f146105bd5780635624b25b1461073e5761021b565b80630d582f13146102835780631fcac7f3146102de5780632d9ad53d146103da5761021b565b3661021b573373ffffffffffffffffffffffffffffffffffffffff167f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d346040518082815260200191505060405180910390a2005b34801561022757600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5548061025457600080f35b60405136600082373360601b3682015260008060143601836000865af13d6000833e8061027f573d82fd5b3d82f35b34801561028f57600080fd5b506102dc600480360360408110156102a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611573565b005b3480156102ea57600080fd5b506103d86004803603608081101561030157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561034857600080fd5b82018360208201111561035a57600080fd5b8035906020019184600183028401116401000000008311171561037c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506118cd565b005b3480156103e657600080fd5b50610429600480360360208110156103fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf1565b60405180821515815260200191505060405180910390f35b34801561044d57600080fd5b506104906004803603602081101561046457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dc3565b60405180821515815260200191505060405180910390f35b3480156104b457600080fd5b506105a5600480360360808110156104cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561051257600080fd5b82018360208201111561052457600080fd5b8035906020019184600183028401116401000000008311171561054657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050611e93565b60405180821515815260200191505060405180910390f35b3480156105c957600080fd5b506106ba600480360360808110156105e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561062757600080fd5b82018360208201111561063957600080fd5b8035906020019184600183028401116401000000008311171561065b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050611eec565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156107025780820151818401526020810190506106e7565b50505050905090810190601f16801561072f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561074a57600080fd5b506107816004803603604081101561076157600080fd5b810190808035906020019092919080359060200190929190505050611f61565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107c15780820151818401526020810190506107a6565b50505050905090810190601f1680156107ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561080857600080fd5b506108356004803603602081101561081f57600080fd5b8101908080359060200190929190505050611fe8565b6040518082815260200191505060405180910390f35b34801561085757600080fd5b5061089a6004803603602081101561086e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612000565b005b3480156108a857600080fd5b506108d5600480360360208110156108bf57600080fd5b81019080803590602001909291905050506122fe565b005b610a7b60048036036101408110156108ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561093557600080fd5b82018360208201111561094757600080fd5b8035906020019184600183028401116401000000008311171561096957600080fd5b9091929391929390803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156109f557600080fd5b820183602082011115610a0757600080fd5b80359060200191846001830284011164010000000083111715610a2957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506123b0565b60405180821515815260200191505060405180910390f35b348015610a9f57600080fd5b50610aec60048036036040811015610ab657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612847565b6040518082815260200191505060405180910390f35b348015610b0e57600080fd5b50610c6960048036036060811015610b2557600080fd5b810190808035906020019092919080359060200190640100000000811115610b4c57600080fd5b820183602082011115610b5e57600080fd5b80359060200191846001830284011164010000000083111715610b8057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610be357600080fd5b820183602082011115610bf557600080fd5b80359060200191846001830284011164010000000083111715610c1757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061286c565b005b348015610c7757600080fd5b50610c806128b8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610cc3578082015181840152602081019050610ca8565b505050509050019250505060405180910390f35b348015610ce357600080fd5b50610cec612a61565b6040518082815260200191505060405180910390f35b348015610d0e57600080fd5b50610de860048036036040811015610d2557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610d6257600080fd5b820183602082011115610d7457600080fd5b80359060200191846001830284011164010000000083111715610d9657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612a67565b005b348015610df657600080fd5b50610f586004803603610100811015610e0e57600080fd5b8101908080359060200190640100000000811115610e2b57600080fd5b820183602082011115610e3d57600080fd5b80359060200191846020830284011164010000000083111715610e5f57600080fd5b909192939192939080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610eaa57600080fd5b820183602082011115610ebc57600080fd5b80359060200191846001830284011164010000000083111715610ede57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a8e565b005b348015610f6657600080fd5b50610fb360048036036040811015610f7d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612c4c565b60405180806020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611012578082015181840152602081019050610ff7565b50505050905001935050505060405180910390f35b34801561103357600080fd5b506110606004803603602081101561104a57600080fd5b8101908080359060200190929190505050612f2c565b005b34801561106e57600080fd5b50611186600480360361014081101561108657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156110cd57600080fd5b8201836020820111156110df57600080fd5b8035906020019184600183028401116401000000008311171561110157600080fd5b9091929391929390803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613087565b6040518082815260200191505060405180910390f35b3480156111a857600080fd5b5061120b600480360360408110156111bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130b4565b005b34801561121957600080fd5b5061125c6004803603602081101561123057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133b1565b005b34801561126a57600080fd5b506112ed6004803603606081101561128157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613556565b005b3480156112fb57600080fd5b50611304613a9e565b6040518082815260200191505060405180910390f35b34801561132657600080fd5b506113ea6004803603604081101561133d57600080fd5b81019080803590602001909291908035906020019064010000000081111561136457600080fd5b82018360208201111561137657600080fd5b8035906020019184600183028401116401000000008311171561139857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613aa8565b005b3480156113f857600080fd5b5061143b6004803603602081101561140f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613ac6565b005b34801561144957600080fd5b50611452613b1d565b6040518082815260200191505060405180910390f35b34801561147457600080fd5b506114e16004803603606081101561148b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613b99565b005b3480156114ef57600080fd5b506114f8613ef4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561153857808201518184015260208101905061151d565b50505050905090810190601f1680156115655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61157b613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806115e25750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061161857503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611647576116467f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611704576117037f4753323034000000000000000000000000000000000000000000000000000000613f8c565b5b60026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003600081548092919060010191905055508173ffffffffffffffffffffffffffffffffffffffff167f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2660405160405180910390a280600454146118c9576118c8816122fe565b5b5050565b6118e1604182613fcb90919063ffffffff16565b82511015611913576119127f4753303230000000000000000000000000000000000000000000000000000000613f8c565b5b6000808060008060005b86811015611ce55761192f8882614005565b8260ff16925080945081955082965050505060008414156119ac578260001c9450611964604188613fcb90919063ffffffff16565b8260001c1015611998576119977f4753303231000000000000000000000000000000000000000000000000000000613f8c565b5b6119a7858a8a8560001c614034565b611ba9565b6001841415611a7b578260001c94508473ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614158015611a4757506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002054145b15611a7657611a757f4753303235000000000000000000000000000000000000000000000000000000613f8c565b5b611ba8565b601e841115611b405760018960405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018281526020019150506040516020818303038152906040528051906020012060048603858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611b2f573d6000803e3d6000fd5b505050602060405103519450611ba7565b60018985858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611b9a573d6000803e3d6000fd5b5050506020604051035194505b5b5b8573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111580611c6f5750600073ffffffffffffffffffffffffffffffffffffffff16600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80611ca65750600173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15611cd557611cd47f4753303236000000000000000000000000000000000000000000000000000000613f8c565b5b849550808060010191505061191d565b50505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600173ffffffffffffffffffffffffffffffffffffffff1614158015611dbc5750600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b6000600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611e8b5750600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b159050919050565b6000806000611ea48787878761425d565b91509150611ed5878787877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61452f565b9250611ee282828561457b565b5050949350505050565b60006060600080611eff8888888861425d565b91509150611f30888888887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61452f565b9350604051925060203d0183016040523d83523d6000602085013e611f5682828661457b565b505094509492505050565b606060006020830267ffffffffffffffff81118015611f7f57600080fd5b506040519080825280601f01601f191660200182016040528015611fb25781602001600182028036833780820191505090505b50905060005b83811015611fdd57808501548060208302602085010152508080600101915050611fb8565b508091505092915050565b60076020528060005260406000206000915090505481565b612008613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061206f5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1561209e5761209d7f4753313031000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461215b5761215a7f4753313032000000000000000000000000000000000000000000000000000000613f8c565b5b60016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844060405160405180910390a250565b612306613f2d565b60035481111561233a576123397f4753323031000000000000000000000000000000000000000000000000000000613f8c565b5b600081141561236d5761236c7f4753323032000000000000000000000000000000000000000000000000000000613f8c565b5b806004819055507f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c936004546040518082815260200191505060405180910390a150565b6000806123d68d8d8d8d8d8d8d8d8d8d6005600081548092919060010191905055613087565b90506123e28184613aa8565b60006123ec6146bc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146125d2578073ffffffffffffffffffffffffffffffffffffffff166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b8152600401808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c8152602001806020018a600181111561248f57fe5b81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528d8d82818152602001925080828437600081840152601f19601f820116905080830192505050838103825285818151815260200191508051906020019080838360005b83811015612561578082015181840152602081019050612546565b50505050905090810190601f16801561258e5780820380516001836020036101000a031916815260200191505b509e505050505050505050505050505050600060405180830381600087803b1580156125b957600080fd5b505af11580156125cd573d6000803e3d6000fd5b505050505b6101f46125f96109c48b01603f60408d02816125ea57fe5b046146e590919063ffffffff16565b015a101561262b5761262a7f4753303130000000000000000000000000000000000000000000000000000000613f8c565b5b60005a90506126948f8f8f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e60008d14612689578e61268f565b6109c45a035b61452f565b93506126a95a826146ff90919063ffffffff16565b9050831580156126b9575060008a145b80156126c55750600088145b156126f4576126f37f4753303133000000000000000000000000000000000000000000000000000000613f8c565b5b60008089111561270e5761270b828b8b8b8b61471f565b90505b841561275157837f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e826040518082815260200191505060405180910390a261278a565b837f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23826040518082815260200191505060405180910390a25b5050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612836578073ffffffffffffffffffffffffffffffffffffffff16639327136883856040518363ffffffff1660e01b815260040180838152602001821515815260200192505050600060405180830381600087803b15801561281d57600080fd5b505af1158015612831573d6000803e3d6000fd5b505050505b50509b9a5050505050505050505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b6000600454905060008114156128a6576128a57f4753303031000000000000000000000000000000000000000000000000000000613f8c565b5b6128b2338584846118cd565b50505050565b6060600060035467ffffffffffffffff811180156128d557600080fd5b506040519080825280602002602001820160405280156129045781602001602082028036833780820191505090505b50905060008060026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612a5857808383815181106129af57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050818060010192505061296e565b82935050505090565b60055481565b600080825160208401855af46040518181523d60208201523d6000604083013e60403d0181fd5b612ad98a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896148d3565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612b1757612b1684614c7a565b5b612b658787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050614cfe565b6000821115612b7f57612b7d8260006001868561471f565b505b3373ffffffffffffffffffffffffffffffffffffffff167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b8960405180806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252878782818152602001925060200280828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a250505050505050505050565b60606000600173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015612c935750612c9184611cf1565b155b15612cc257612cc17f4753313035000000000000000000000000000000000000000000000000000000613f8c565b5b6000831415612cf557612cf47f4753313036000000000000000000000000000000000000000000000000000000613f8c565b5b8267ffffffffffffffff81118015612d0c57600080fd5b50604051908082528060200260200182016040528015612d3b5781602001602082028036833780820191505090505b5091506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015612e0d5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015612e1857508381105b15612ed35781838281518110612e2a57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508080600101915050612da3565b600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612f2157826001820381518110612f1657fe5b602002602001015191505b808352509250929050565b600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612fea57612fe97f4753303330000000000000000000000000000000000000000000000000000000613f8c565b5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16817ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c60405160405180910390a350565b600061309c8c8c8c8c8c8c8c8c8c8c8c614f08565b8051906020012090509b9a5050505050505050505050565b6130bc613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806131235750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15613152576131517f4753313031000000000000000000000000000000000000000000000000000000613f8c565b5b8073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461320e5761320d7f4753313033000000000000000000000000000000000000000000000000000000613f8c565b5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427660405160405180910390a25050565b6133b9613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156134be57508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f945b8148000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b15801561348157600080fd5b505afa158015613495573d6000803e3d6000fd5b505050506040513d60208110156134ab57600080fd5b8101908080519060200190929190505050155b156134ed576134ec7f4753333030000000000000000000000000000000000000000000000000000000613f8c565b5b807f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8558073ffffffffffffffffffffffffffffffffffffffff167f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa260405160405180910390a250565b61355e613f2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806135c55750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b806135fb57503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1561362a576136297f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146136e7576136e67f4753323034000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061374e5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561377d5761377c7f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b8173ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613839576138387f4753323035000000000000000000000000000000000000000000000000000000613f8c565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf60405160405180910390a28073ffffffffffffffffffffffffffffffffffffffff167f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2660405160405180910390a2505050565b6000600454905090565b613ac282604051806020016040528060008152508361286c565b5050565b613ace613f2d565b613ad781614c7a565b8073ffffffffffffffffffffffffffffffffffffffff167f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b060405160405180910390a250565b6000804690507f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a7946921860001b8130604051602001808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200193505050506040516020818303038152906040528051906020012091505090565b613ba1613f2d565b806001600354031015613bd857613bd77f4753323031000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480613c3f5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15613c6e57613c6d7f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b8173ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613d2a57613d297f4753323035000000000000000000000000000000000000000000000000000000613f8c565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008154809291906001900391905055508173ffffffffffffffffffffffffffffffffffffffff167ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf60405160405180910390a28060045414613eef57613eee816122fe565b5b505050565b6040518060400160405280600581526020017f312e342e3100000000000000000000000000000000000000000000000000000081525081565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613f8a57613f897f4753303331000000000000000000000000000000000000000000000000000000613f8c565b5b565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260056024820152816044820152606481fd5b600080831415613fde5760009050613fff565b6000828402905082848281613fef57fe5b0414613ffa57600080fd5b809150505b92915050565b6000806000836041026020810186015192506040810186015191506060810186015160001a9350509250925092565b815161404a6020836150b090919063ffffffff16565b111561407a576140797f4753303232000000000000000000000000000000000000000000000000000000613f8c565b5b600060208284010151905082516140ad8261409f6020866150b090919063ffffffff16565b6150b090919063ffffffff16565b11156140dd576140dc7f4753303233000000000000000000000000000000000000000000000000000000613f8c565b5b60606020838501019050631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168673ffffffffffffffffffffffffffffffffffffffff16631626ba7e87846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614181578082015181840152602081019050614166565b50505050905090810190601f1680156141ae5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156141cc57600080fd5b505afa1580156141e0573d6000803e3d6000fd5b505050506040513d60208110156141f657600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614614255576142547f4753303234000000000000000000000000000000000000000000000000000000613f8c565b5b505050505050565b6000806142686146bc565b9150600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156143335750600073ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b6143a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f475331303400000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614614526578173ffffffffffffffffffffffffffffffffffffffff1663728c297287878787336040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200184600181111561443f57fe5b81526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561449857808201518184015260208101905061447d565b50505050905090810190601f1680156144c55780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156144e857600080fd5b505af11580156144fc573d6000803e3d6000fd5b505050506040513d602081101561451257600080fd5b810190808051906020019092919050505090505b94509492505050565b600060018081111561453d57fe5b83600181111561454957fe5b1415614562576000808551602087018986f49050614572565b600080855160208701888a87f190505b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614614625578273ffffffffffffffffffffffffffffffffffffffff16639327136883836040518363ffffffff1660e01b815260040180838152602001821515815260200192505050600060405180830381600087803b15801561460c57600080fd5b505af1158015614620573d6000803e3d6000fd5b505050505b8015614673573373ffffffffffffffffffffffffffffffffffffffff167f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb860405160405180910390a26146b7565b3373ffffffffffffffffffffffffffffffffffffffff167facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37560405160405180910390a25b505050565b60007f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c854905090565b6000818310156146f557816146f7565b825b905092915050565b60008282111561470e57600080fd5b600082840390508091505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461475c578261475e565b325b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614868576147c83a86106147a5573a6147a7565b855b6147ba888a6150b090919063ffffffff16565b613fcb90919063ffffffff16565b915060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d806000811461482a576040519150601f19603f3d011682016040523d82523d6000602084013e61482f565b606091505b5050905080614862576148617f4753303131000000000000000000000000000000000000000000000000000000613f8c565b5b506148c9565b61488d8561487f888a6150b090919063ffffffff16565b613fcb90919063ffffffff16565b915061489a8482846150cf565b6148c8576148c77f4753303132000000000000000000000000000000000000000000000000000000613f8c565b5b5b5095945050505050565b60006004541115614908576149077f4753323030000000000000000000000000000000000000000000000000000000613f8c565b5b815181111561493b5761493a7f4753323031000000000000000000000000000000000000000000000000000000613f8c565b5b600081141561496e5761496d7f4753323032000000000000000000000000000000000000000000000000000000613f8c565b5b60006001905060005b8351811015614be657600084828151811061498e57fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806149ff5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80614a3557503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80614a6b57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15614a9a57614a997f4753323033000000000000000000000000000000000000000000000000000000613f8c565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614614b5757614b567f4753323034000000000000000000000000000000000000000000000000000000613f8c565b5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550809250508080600101915050614977565b506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550825160038190555081600481905550505050565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415614cd857614cd77f4753343030000000000000000000000000000000000000000000000000000000613f8c565b5b807f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d55550565b600073ffffffffffffffffffffffffffffffffffffffff1660016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614614dbc57614dbb7f4753313030000000000000000000000000000000000000000000000000000000613f8c565b5b6001806000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614614f0457614e7882615193565b614ea657614ea57f4753303032000000000000000000000000000000000000000000000000000000613f8c565b5b614ed58260008360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61452f565b614f0357614f027f4753303030000000000000000000000000000000000000000000000000000000613f8c565b5b5b5050565b606060007fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d860001b8d8d8d8d60405180838380828437808301925050509250505060405180910390208c8c8c8c8c8c8c604051602001808c81526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001898152602001886001811115614f9957fe5b81526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b505050505050505050505050604051602081830303815290604052805190602001209050601960f81b600160f81b615025613b1d565b8360405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018381526020018281526020019450505050506040516020818303038152906040529150509b9a5050505050505050505050565b6000808284019050838110156150c557600080fd5b8091505092915050565b60008063a9059cbb8484604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602060008251602084016000896127105a03f13d60008114615176576020811461517e5760009350615189565b819350615189565b600051158215171593505b5050509392505050565b600080823b90506000811191505091905056fea26469706673582212204a069779be5833cb1bd354c0a3e20ad20e67353cf652d9448492bb78543bdf7464736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xE19A9DD9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF08A0323 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF08A0323 EQ PUSH2 0x13EC JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x143D JUMPI DUP1 PUSH4 0xF8DC5DD9 EQ PUSH2 0x1468 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x14E3 JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xE19A9DD9 EQ PUSH2 0x120D JUMPI DUP1 PUSH4 0xE318B52B EQ PUSH2 0x125E JUMPI DUP1 PUSH4 0xE75235B8 EQ PUSH2 0x12EF JUMPI DUP1 PUSH4 0xED516D51 EQ PUSH2 0x131A JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xCC2F8452 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC2F8452 EQ PUSH2 0xF5A JUMPI DUP1 PUSH4 0xD4D9BDCD EQ PUSH2 0x1027 JUMPI DUP1 PUSH4 0xD8D11F78 EQ PUSH2 0x1062 JUMPI DUP1 PUSH4 0xE009CFDE EQ PUSH2 0x119C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0xCD7 JUMPI DUP1 PUSH4 0xB4FABA09 EQ PUSH2 0xD02 JUMPI DUP1 PUSH4 0xB63E800D EQ PUSH2 0xDEA JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x6A761202 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x6A761202 EQ PUSH2 0x8D7 JUMPI DUP1 PUSH4 0x7D832974 EQ PUSH2 0xA93 JUMPI DUP1 PUSH4 0x934F3A11 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0xC6B JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 EQ PUSH2 0x7FC JUMPI DUP1 PUSH4 0x610B5925 EQ PUSH2 0x84B JUMPI DUP1 PUSH4 0x694E80C3 EQ PUSH2 0x89C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x2F54BF6E GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x2F54BF6E EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x468721A7 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x5229073F EQ PUSH2 0x5BD JUMPI DUP1 PUSH4 0x5624B25B EQ PUSH2 0x73E JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xD582F13 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x1FCAC7F3 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x2D9AD53D EQ PUSH2 0x3DA JUMPI PUSH2 0x21B JUMP JUMPDEST CALLDATASIZE PUSH2 0x21B JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3D0CE9BFC3ED7D6862DBB28B2DEA94561FE714A1B4D019AA8AF39730D1AD7C3D CALLVALUE PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SLOAD DUP1 PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD CALLDATASIZE PUSH1 0x0 DUP3 CALLDATACOPY CALLER PUSH1 0x60 SHL CALLDATASIZE DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x14 CALLDATASIZE ADD DUP4 PUSH1 0x0 DUP7 GAS CALL RETURNDATASIZE PUSH1 0x0 DUP4 RETURNDATACOPY DUP1 PUSH2 0x27F JUMPI RETURNDATASIZE DUP3 REVERT JUMPDEST RETURNDATASIZE DUP3 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1573 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x18CD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x490 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1E93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x5E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x702 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6E7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x72F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x781 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x7A6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7EE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x835 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1FE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x89A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x86E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2000 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22FE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA7B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x23B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2847 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC69 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xB25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x286C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC80 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCA8 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCEC PUSH2 0x2A61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2A67 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF58 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xE0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xE5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xEDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2A8E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFB3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2C4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1012 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFF7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1060 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2F2C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1186 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x1086 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x10CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3087 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x120B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x30B4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x33B1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x126A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3556 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1304 PUSH2 0x3A9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13EA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3AA8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3AC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1452 PUSH2 0x3B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x148B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B99 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F8 PUSH2 0x3EF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1538 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x151D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1565 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157B PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x15E2 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1618 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1647 JUMPI PUSH2 0x1646 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1704 JUMPI PUSH2 0x1703 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x18C9 JUMPI PUSH2 0x18C8 DUP2 PUSH2 0x22FE JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x18E1 PUSH1 0x41 DUP3 PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 MLOAD LT ISZERO PUSH2 0x1913 JUMPI PUSH2 0x1912 PUSH32 0x4753303230000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1CE5 JUMPI PUSH2 0x192F DUP9 DUP3 PUSH2 0x4005 JUMP JUMPDEST DUP3 PUSH1 0xFF AND SWAP3 POP DUP1 SWAP5 POP DUP2 SWAP6 POP DUP3 SWAP7 POP POP POP POP PUSH1 0x0 DUP5 EQ ISZERO PUSH2 0x19AC JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP PUSH2 0x1964 PUSH1 0x41 DUP9 PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x0 SHR LT ISZERO PUSH2 0x1998 JUMPI PUSH2 0x1997 PUSH32 0x4753303231000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x19A7 DUP6 DUP11 DUP11 DUP6 PUSH1 0x0 SHR PUSH2 0x4034 JUMP JUMPDEST PUSH2 0x1BA9 JUMP JUMPDEST PUSH1 0x1 DUP5 EQ ISZERO PUSH2 0x1A7B JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1A47 JUMPI POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x1A76 JUMPI PUSH2 0x1A75 PUSH32 0x4753303235000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1E DUP5 GT ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x1 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 DUP7 SUB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP PUSH2 0x1BA7 JUMP JUMPDEST PUSH1 0x1 DUP10 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO DUP1 PUSH2 0x1C6F JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1CA6 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1CD5 JUMPI PUSH2 0x1CD4 PUSH32 0x4753303236000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP5 SWAP6 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x191D JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1DBC JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1E8B JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1EA4 DUP8 DUP8 DUP8 DUP8 PUSH2 0x425D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1ED5 DUP8 DUP8 DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x452F JUMP JUMPDEST SWAP3 POP PUSH2 0x1EE2 DUP3 DUP3 DUP6 PUSH2 0x457B JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1EFF DUP9 DUP9 DUP9 DUP9 PUSH2 0x425D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1F30 DUP9 DUP9 DUP9 DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x452F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0x20 RETURNDATASIZE ADD DUP4 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x1F56 DUP3 DUP3 DUP7 PUSH2 0x457B JUMP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x20 DUP4 MUL PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1F7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FB2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FDD JUMPI DUP1 DUP6 ADD SLOAD DUP1 PUSH1 0x20 DUP4 MUL PUSH1 0x20 DUP6 ADD ADD MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1FB8 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2008 PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x206F JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x209E JUMPI PUSH2 0x209D PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x215B JUMPI PUSH2 0x215A PUSH32 0x4753313032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xECDF3A3EFFEA5783A3C4C2140E677577666428D44ED9D474A0B3A4C9943F8440 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x2306 PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0x233A JUMPI PUSH2 0x2339 PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x236D JUMPI PUSH2 0x236C PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0x610F7FF2B304AE8903C3DE74C60C6AB1F7D6226B3F52C5161905BB5AD4039C93 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23D6 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH1 0x5 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE PUSH2 0x3087 JUMP JUMPDEST SWAP1 POP PUSH2 0x23E2 DUP2 DUP5 PUSH2 0x3AA8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23EC PUSH2 0x46BC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25D2 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x75F0BB52 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 CALLER PUSH1 0x40 MLOAD DUP14 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP11 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x248F JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP14 DUP14 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2561 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2546 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x258E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x25CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1F4 PUSH2 0x25F9 PUSH2 0x9C4 DUP12 ADD PUSH1 0x3F PUSH1 0x40 DUP14 MUL DUP2 PUSH2 0x25EA JUMPI INVALID JUMPDEST DIV PUSH2 0x46E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ADD GAS LT ISZERO PUSH2 0x262B JUMPI PUSH2 0x262A PUSH32 0x4753303130000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x2694 DUP16 DUP16 DUP16 DUP16 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP15 PUSH1 0x0 DUP14 EQ PUSH2 0x2689 JUMPI DUP15 PUSH2 0x268F JUMP JUMPDEST PUSH2 0x9C4 GAS SUB JUMPDEST PUSH2 0x452F JUMP JUMPDEST SWAP4 POP PUSH2 0x26A9 GAS DUP3 PUSH2 0x46FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP4 ISZERO DUP1 ISZERO PUSH2 0x26B9 JUMPI POP PUSH1 0x0 DUP11 EQ JUMPDEST DUP1 ISZERO PUSH2 0x26C5 JUMPI POP PUSH1 0x0 DUP9 EQ JUMPDEST ISZERO PUSH2 0x26F4 JUMPI PUSH2 0x26F3 PUSH32 0x4753303133000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP10 GT ISZERO PUSH2 0x270E JUMPI PUSH2 0x270B DUP3 DUP12 DUP12 DUP12 DUP12 PUSH2 0x471F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x2751 JUMPI DUP4 PUSH32 0x442E715F626346E8C54381002DA614F62BEE8D27386535B2521EC8540898556E DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x278A JUMP JUMPDEST DUP4 PUSH32 0x23428B18ACFB3EA64B08DC0C1D296EA9C09702C09083CA5272E64D115B687D23 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2836 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x281D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2831 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x28A6 JUMPI PUSH2 0x28A5 PUSH32 0x4753303031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x28B2 CALLER DUP6 DUP5 DUP5 PUSH2 0x18CD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x28D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2904 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2A58 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x2 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x296E JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD DUP6 GAS DELEGATECALL PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE RETURNDATASIZE PUSH1 0x20 DUP3 ADD MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x40 DUP4 ADD RETURNDATACOPY PUSH1 0x40 RETURNDATASIZE ADD DUP2 REVERT JUMPDEST PUSH2 0x2AD9 DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 PUSH2 0x48D3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B17 JUMPI PUSH2 0x2B16 DUP5 PUSH2 0x4C7A JUMP JUMPDEST JUMPDEST PUSH2 0x2B65 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x4CFE JUMP JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x2B7F JUMPI PUSH2 0x2B7D DUP3 PUSH1 0x0 PUSH1 0x1 DUP7 DUP6 PUSH2 0x471F JUMP JUMPDEST POP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP12 DUP12 DUP12 DUP12 DUP10 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2C93 JUMPI POP PUSH2 0x2C91 DUP5 PUSH2 0x1CF1 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2CC2 JUMPI PUSH2 0x2CC1 PUSH32 0x4753313035000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 EQ ISZERO PUSH2 0x2CF5 JUMPI PUSH2 0x2CF4 PUSH32 0x4753313036000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2D0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D3B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2E0D JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2E18 JUMPI POP DUP4 DUP2 LT JUMPDEST ISZERO PUSH2 0x2ED3 JUMPI DUP2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2DA3 JUMP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F21 JUMPI DUP3 PUSH1 0x1 DUP3 SUB DUP2 MLOAD DUP2 LT PUSH2 0x2F16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST DUP1 DUP4 MSTORE POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2FEA JUMPI PUSH2 0x2FE9 PUSH32 0x4753303330000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xF2A0EB156472D1440255B0D7C1E19CC07115D1051FE605B0DCE69ACFEC884D9C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x309C DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x4F08 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x30BC PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3123 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3152 JUMPI PUSH2 0x3151 PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x320E JUMPI PUSH2 0x320D PUSH32 0x4753313033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAB4FA2B463F581B2B32CB3B7E3B704B9CE37CC209B5FB4D77E593ACE4054276 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x33B9 PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x34BE JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3495 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x34AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP ISZERO JUMPDEST ISZERO PUSH2 0x34ED JUMPI PUSH2 0x34EC PUSH32 0x4753333030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SSTORE DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1151116914515BC0891FF9047A6CB32CF902546F83066499BCF8BA33D2353FA2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x355E PUSH2 0x3F2D JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x35C5 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x35FB JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x362A JUMPI PUSH2 0x3629 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x36E7 JUMPI PUSH2 0x36E6 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x374E JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x377D JUMPI PUSH2 0x377C PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3839 JUMPI PUSH2 0x3838 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3AC2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP4 PUSH2 0x286C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3ACE PUSH2 0x3F2D JUMP JUMPDEST PUSH2 0x3AD7 DUP2 PUSH2 0x4C7A JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5AC6C46C93C8D0E53714BA3B53DB3E7C046DA994313D7ED0D192028BC7C228B0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CHAINID SWAP1 POP PUSH32 0x47E79534A245952E8B16893A336B85A3D9EA9FA8C573F3D803AFB92A79469218 PUSH1 0x0 SHL DUP2 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x3BA1 PUSH2 0x3F2D JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x3 SLOAD SUB LT ISZERO PUSH2 0x3BD8 JUMPI PUSH2 0x3BD7 PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3C3F JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3C6E JUMPI PUSH2 0x3C6D PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D2A JUMPI PUSH2 0x3D29 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 SUB SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x3EEF JUMPI PUSH2 0x3EEE DUP2 PUSH2 0x22FE JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3F8A JUMPI PUSH2 0x3F89 PUSH32 0x4753303331000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x3FDE JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3FFF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x3FEF JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3FFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP2 ADD DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x404A PUSH1 0x20 DUP4 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x407A JUMPI PUSH2 0x4079 PUSH32 0x4753303232000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MLOAD SWAP1 POP DUP3 MLOAD PUSH2 0x40AD DUP3 PUSH2 0x409F PUSH1 0x20 DUP7 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x40DD JUMPI PUSH2 0x40DC PUSH32 0x4753303233000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x60 PUSH1 0x20 DUP4 DUP6 ADD ADD SWAP1 POP PUSH4 0x1626BA7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E DUP8 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4181 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4166 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x41AE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x41F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x4255 JUMPI PUSH2 0x4254 PUSH32 0x4753303234000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4268 PUSH2 0x46BC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x4333 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST PUSH2 0x43A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4753313034000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4526 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x728C2972 DUP8 DUP8 DUP8 DUP8 CALLER PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x443F JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4498 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x447D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x44C5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x453D JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4549 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4562 JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x4572 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4625 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x460C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x4673 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6895C13664AA4F67288B25D7A21D7AAA34916E355FB9B6FAE0A139A9085BECB8 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x46B7 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xACD2C8702804128FDB0DB2BB49F6D127DD0181C13FD45DBFE16DE0930E2BD375 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x46F5 JUMPI DUP2 PUSH2 0x46F7 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x470E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x475C JUMPI DUP3 PUSH2 0x475E JUMP JUMPDEST ORIGIN JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4868 JUMPI PUSH2 0x47C8 GASPRICE DUP7 LT PUSH2 0x47A5 JUMPI GASPRICE PUSH2 0x47A7 JUMP JUMPDEST DUP6 JUMPDEST PUSH2 0x47BA DUP9 DUP11 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x482A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x482F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x4862 JUMPI PUSH2 0x4861 PUSH32 0x4753303131000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST POP PUSH2 0x48C9 JUMP JUMPDEST PUSH2 0x488D DUP6 PUSH2 0x487F DUP9 DUP11 PUSH2 0x50B0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3FCB SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x489A DUP5 DUP3 DUP5 PUSH2 0x50CF JUMP JUMPDEST PUSH2 0x48C8 JUMPI PUSH2 0x48C7 PUSH32 0x4753303132000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD GT ISZERO PUSH2 0x4908 JUMPI PUSH2 0x4907 PUSH32 0x4753323030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP2 MLOAD DUP2 GT ISZERO PUSH2 0x493B JUMPI PUSH2 0x493A PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x496E JUMPI PUSH2 0x496D PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x4BE6 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x498E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x49FF JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4A35 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4A6B JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x4A9A JUMPI PUSH2 0x4A99 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4B57 JUMPI PUSH2 0x4B56 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 SWAP3 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4977 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 MLOAD PUSH1 0x3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4CD8 JUMPI PUSH2 0x4CD7 PUSH32 0x4753343030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4DBC JUMPI PUSH2 0x4DBB PUSH32 0x4753313030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4F04 JUMPI PUSH2 0x4E78 DUP3 PUSH2 0x5193 JUMP JUMPDEST PUSH2 0x4EA6 JUMPI PUSH2 0x4EA5 PUSH32 0x4753303032000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST PUSH2 0x4ED5 DUP3 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x452F JUMP JUMPDEST PUSH2 0x4F03 JUMPI PUSH2 0x4F02 PUSH32 0x4753303030000000000000000000000000000000000000000000000000000000 PUSH2 0x3F8C JUMP JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xBB8310D486368DB6BD6F849402FDD73AD53D316B5A4B2644AD6EFE0F941286D8 PUSH1 0x0 SHL DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4F99 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL PUSH2 0x5025 PUSH2 0x3B1D JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x50C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x20 PUSH1 0x0 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 DUP10 PUSH2 0x2710 GAS SUB CALL RETURNDATASIZE PUSH1 0x0 DUP2 EQ PUSH2 0x5176 JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0x517E JUMPI PUSH1 0x0 SWAP4 POP PUSH2 0x5189 JUMP JUMPDEST DUP2 SWAP4 POP PUSH2 0x5189 JUMP JUMPDEST PUSH1 0x0 MLOAD ISZERO DUP3 ISZERO OR ISZERO SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A MOD SWAP8 PUSH26 0xBE5833CB1BD354C0A3E20AD20E67353CF652D9448492BB78543B 0xDF PUSH21 0x64736F6C6343000706003300000000000000000000 ","sourceMap":"2289:16737:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;551:10:8;538:35;;;563:9;538:35;;;;;;;;;;;;;;;;;;2289:16737:0;;;;;;;;;;;;3556:29:4;3550:36;3610:7;3600:2;;3647:1;3644;3637:12;3600:2;3694:4;3688:11;3733:14;3730:1;3725:3;3712:36;3981:8;3977:2;3973:17;3956:14;3951:3;3947:24;3940:51;4142:1;4139;4134:2;4118:14;4114:23;4109:3;4106:1;4097:7;4090:5;4085:59;4181:16;4178:1;4173:3;4158:40;4221:7;4211:2;;4260:16;4255:3;4248:29;4211:2;4316:16;4311:3;4304:29;2220:658:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12811:3372:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6171:160:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5155:150:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4541:422:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5003:1128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;799:556:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3351:58:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3546:459:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4589:392:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5202:3538:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3521:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12390:390;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5344:446:7;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3170:29:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1988:666:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4011:1160:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6371:1654:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16214:249:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;18537:487;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4045:456:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3325:437:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3697:853:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5020:96;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12212:147:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2270:170:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;16494:381:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2917:741:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2568:49:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2220:658:7;594:17:10;:15;:17::i;:::-;2418:1:7::1;2401:19;;:5;:19;;;:47;;;;647:3;2424:24;;:5;:24;;;2401:47;:73;;;;2469:4;2452:22;;:5;:22;;;2401:73;2397:103;;;2476:24;;:15;:24::i;:::-;2397:103;2579:1;2554:27;;:6;:13;2561:5;2554:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;2550:57;;2583:24;;:15;:24::i;:::-;2550:57;2633:6;:23;647:3;2633:23;;;;;;;;;;;;;;;;;;;;;;;;;2617:6;:13;2624:5;2617:13;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;;;;;;;2692:5;2666:6;:23;647:3;2666:23;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;2707:10;;:12;;;;;;;;;;;;;2745:5;2734:17;;;;;;;;;;;;2832:10;2819:9;;:23;2815:56;;2844:27;2860:10;2844:15;:27::i;:::-;2815:56;2220:658:::0;;:::o;12811:3372:0:-;13086:26;13109:2;13086:18;:22;;:26;;;;:::i;:::-;13066:10;:17;:46;13062:76;;;13114:24;;:15;:24::i;:::-;13062:76;13200:17;13240:20;13270:9;13388;13407;13426;13445:2732;13461:18;13457:1;:22;13445:2732;;;13512:29;13527:10;13539:1;13512:14;:29::i;:::-;13500:41;;;;;;;;;;;;;;;;;13564:1;13559;:6;13555:2416;;;13784:1;13776:10;;13745:43;;14184:26;14207:2;14184:18;:22;;:26;;;;:::i;:::-;14179:1;14171:10;;:39;14167:69;;;14212:24;;:15;:24::i;:::-;14167:69;14731:70;14754:12;14768:8;14778:10;14798:1;14790:10;;14731:22;:70::i;:::-;13555:2416;;;14831:1;14826;:6;14822:1149;;;15043:1;15035:10;;15004:43;;15226:12;15214:24;;:8;:24;;;;:71;;;;;15284:1;15242:14;:28;15257:12;15242:28;;;;;;;;;;;;;;;:38;15271:8;15242:38;;;;;;;;;;;;:43;15214:71;15210:101;;;15287:24;;:15;:24::i;:::-;15210:101;14822:1149;;;15340:2;15336:1;:6;15332:639;;;15613:104;15686:8;15633:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15623:73;;;;;;15708:1;15704;:5;15712:1;15715;15613:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15598:119;;15332:639;;;15921:35;15931:8;15947:1;15951;15954;15921:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15906:50;;15332:639;14822:1149;13555:2416;16004:9;15988:25;;:12;:25;;;;:63;;;;16049:1;16017:34;;:6;:20;16024:12;16017:20;;;;;;;;;;;;;;;;;;;;;;;;;:34;;;15988:63;:98;;;;647:3:7;16055:31:0;;:12;:31;;;15988:98;15984:144;;;16104:24;;:15;:24::i;:::-;15984:144;16154:12;16142:24;;13481:3;;;;;;;13445:2732;;;12811:3372;;;;;;;;;;:::o;6171:160:6:-;6242:4;6285:6;6265:26;;985:3;6265:26;;;;:59;;;;;6322:1;6295:29;;:7;:15;6303:6;6295:15;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;;6265:59;6258:66;;6171:160;;;:::o;5155:150:7:-;5217:4;647:3;5242:24;;:5;:24;;;:55;;;;5295:1;5270:27;;:6;:13;5277:5;5270:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;5242:55;5240:58;5233:65;;5155:150;;;:::o;4541:422:6:-;4719:12;4744:13;4759:17;4780:46;4799:2;4803:5;4810:4;4816:9;4780:18;:46::i;:::-;4743:83;;;;4846:54;4854:2;4858:5;4865:4;4871:9;4882:17;4846:7;:54::i;:::-;4836:64;;4910:46;4930:5;4937:9;4948:7;4910:19;:46::i;:::-;4541:422;;;;;;;;:::o;5003:1128::-;5183:12;5197:23;5233:13;5248:17;5269:46;5288:2;5292:5;5299:4;5305:9;5269:18;:46::i;:::-;5232:83;;;;5335:54;5343:2;5347:5;5354:4;5360:9;5371:17;5335:7;:54::i;:::-;5325:64;;5575:4;5569:11;5555:25;;5824:4;5806:16;5802:27;5790:10;5786:44;5780:4;5773:58;5893:16;5881:10;5874:36;5994:16;5991:1;5984:4;5972:10;5968:21;5953:58;6078:46;6098:5;6105:9;6116:7;6078:19;:46::i;:::-;5003:1128;;;;;;;;;:::o;799:556:13:-;874:12;898:19;939:2;930:6;:11;920:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;898:44;;957:13;952:374;984:6;976:5;:14;952:374;;;1172:5;1164:6;1160:18;1154:25;1245:4;1237;1230:5;1226:16;1219:4;1211:6;1207:17;1203:40;1196:54;1124:140;992:7;;;;;;;952:374;;;;1342:6;1335:13;;;799:556;;;;:::o;3351:58:0:-;;;;;;;;;;;;;;;;;:::o;3546:459:6:-;594:17:10;:15;:17::i;:::-;3697:1:6::1;3679:20;;:6;:20;;;:50;;;;985:3;3703:26;;:6;:26;;;3679:50;3675:80;;;3731:24;;:15;:24::i;:::-;3675:80;3837:1;3810:29;;:7;:15;3818:6;3810:15;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;3806:59;;3841:24;;:15;:24::i;:::-;3806:59;3893:7;:25;985:3;3893:25;;;;;;;;;;;;;;;;;;;;;;;;;3875:7;:15;3883:6;3875:15;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;;;;;;3956:6;3928:7;:25;985:3;3928:25;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;3991:6;3977:21;;;;;;;;;;;;3546:459:::0;:::o;4589:392:7:-;594:17:10;:15;:17::i;:::-;4757:10:7::1;;4744;:23;4740:53;;;4769:24;;:15;:24::i;:::-;4740:53;4873:1;4859:10;:15;4855:45;;;4876:24;;:15;:24::i;:::-;4855:45;4922:10;4910:9;:22;;;;4947:27;4964:9;;4947:27;;;;;;;;;;;;;;;;;;4589:392:::0;:::o;5202:3538:0:-;5557:12;5581:14;5717:485;5773:2;5793:5;5816:4;;5838:9;5865;5924:7;5949:8;5975;6001:14;6181:5;;:7;;;;;;;;;;;;5717:18;:485::i;:::-;5708:494;;6216:35;6232:6;6240:10;6216:15;:35::i;:::-;6271:13;6287:10;:8;:10::i;:::-;6271:26;;6342:1;6325:19;;:5;:19;;;6321:547;;6370:5;6364:29;;;6455:2;6479:5;6506:4;;6532:9;6563;6630:7;6659:8;6689;6719:14;6793:10;6825;6364:489;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6321:547;7226:3;7178:45;7218:4;7206:9;:16;7198:2;7192;7180:9;:14;7179:21;;;;;;7178:27;;:45;;;;:::i;:::-;:51;7166:9;:63;7162:93;;;7231:24;;:15;:24::i;:::-;7162:93;7368:15;7386:9;7368:27;;7674:83;7682:2;7686:5;7693:4;;7674:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7699:9;7722:1;7710:8;:13;:46;;7747:9;7710:46;;;7739:4;7727:9;:16;7710:46;7674:7;:83::i;:::-;7664:93;;7781:22;7793:9;7781:7;:11;;:22;;;;:::i;:::-;7771:32;;8084:7;8083:8;:26;;;;;8108:1;8095:9;:14;8083:26;:43;;;;;8125:1;8113:8;:13;8083:43;8079:73;;;8128:24;;:15;:24::i;:::-;8079:73;8301:15;8349:1;8338:8;:12;8334:128;;;8380:67;8394:7;8403;8412:8;8422;8432:14;8380:13;:67::i;:::-;8370:77;;8334:128;8479:7;8475:108;;;8510:6;8493:33;8518:7;8493:33;;;;;;;;;;;;;;;;;;8475:108;;;8567:6;8550:33;8575:7;8550:33;;;;;;;;;;;;;;;;;;8475:108;5202:3538;;8638:1;8621:19;;:5;:19;;;8617:107;;8666:5;8660:32;;;8693:6;8701:7;8660:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8617:107;5202:3538;;;;;;;;;;;;;;;:::o;3521:78::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12390:390::-;12575:18;12596:9;;12575:30;;12674:1;12660:10;:15;12656:45;;;12677:24;;:15;:24::i;:::-;12656:45;12711:62;12728:10;12740:8;12750:10;12762;12711:16;:62::i;:::-;12390:390;;;;:::o;5344:446:7:-;5395:16;5423:22;5462:10;;5448:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5423:50;;5517:13;5544:20;5567:6;:23;647:3;5567:23;;;;;;;;;;;;;;;;;;;;;;;;;5544:46;;5600:162;647:3;5607:31;;:12;:31;;;5600:162;;5669:12;5654:5;5660;5654:12;;;;;;;;;;;;;:27;;;;;;;;;;;5710:6;:20;5717:12;5710:20;;;;;;;;;;;;;;;;;;;;;;;;;5695:35;;5744:7;;;;;;;5600:162;;;5778:5;5771:12;;;;;5344:446;:::o;3170:29:0:-;;;;:::o;1988:666:13:-;2309:1;2306;2288:15;2282:22;2275:4;2258:15;2254:26;2238:14;2231:5;2218:93;2382:4;2376:11;2412:7;2407:3;2400:20;2456:16;2449:4;2444:3;2440:14;2433:40;2520:16;2517:1;2510:4;2505:3;2501:14;2486:51;2584:4;2566:16;2562:27;2557:3;2550:40;4011:1160:0;4419:32;4431:7;;4419:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4440:10;4419:11;:32::i;:::-;4492:1;4465:29;;:15;:29;;;4461:78;;4496:43;4523:15;4496:26;:43::i;:::-;4461:78;4674:22;4687:2;4691:4;;4674:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:22::i;:::-;4721:1;4711:7;:11;4707:380;;;5017:59;5031:7;5040:1;5043;5046:12;5060:15;5017:13;:59::i;:::-;;4707:380;5111:10;5101:63;;;5123:7;;5132:10;5144:2;5148:15;5101:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4011:1160;;;;;;;;;;:::o;6371:1654:6:-;6465:22;6489:12;985:3;6517:25;;:5;:25;;;;:52;;;;;6547:22;6563:5;6547:15;:22::i;:::-;6546:23;6517:52;6513:82;;;6571:24;;:15;:24::i;:::-;6513:82;6621:1;6609:8;:13;6605:43;;;6624:24;;:15;:24::i;:::-;6605:43;6721:8;6707:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6699:31;;6774:19;6814:7;:14;6822:5;6814:14;;;;;;;;;;;;;;;;;;;;;;;;;6807:21;;6838:192;6861:1;6845:18;;:4;:18;;;;:46;;;;;985:3;6867:24;;:4;:24;;;;6845:46;:72;;;;;6909:8;6895:11;:22;6845:72;6838:192;;;6954:4;6933:5;6939:11;6933:18;;;;;;;;;;;;;:25;;;;;;;;;;;6979:7;:13;6987:4;6979:13;;;;;;;;;;;;;;;;;;;;;;;;;6972:20;;7006:13;;;;;;;6838:192;;;985:3;7685:24;;:4;:24;;;7681:84;;7732:5;7752:1;7738:11;:15;7732:22;;;;;;;;;;;;;;7725:29;;7681:84;7949:11;7942:5;7935:26;7921:50;;;;;;:::o;16214:249:0:-;16320:1;16290:32;;:6;:18;16297:10;16290:18;;;;;;;;;;;;;;;;;;;;;;;;;:32;;;16286:62;;;16324:24;;:15;:24::i;:::-;16286:62;16402:1;16358:14;:26;16373:10;16358:26;;;;;;;;;;;;;;;:41;16385:13;16358:41;;;;;;;;;;;:45;;;;16445:10;16418:38;;16430:13;16418:38;;;;;;;;;;16214:249;:::o;18537:487::-;18867:7;18903:113;18925:2;18929:5;18936:4;;18942:9;18953;18964:7;18973:8;18983;18993:14;19009:6;18903:21;:113::i;:::-;18893:124;;;;;;18886:131;;18537:487;;;;;;;;;;;;;:::o;4045:456:6:-;594:17:10;:15;:17::i;:::-;4245:1:6::1;4227:20;;:6;:20;;;:50;;;;985:3;4251:26;;:6;:26;;;4227:50;4223:80;;;4279:24;;:15;:24::i;:::-;4223:80;4340:6;4317:29;;:7;:19;4325:10;4317:19;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;4313:59;;4348:24;;:15;:24::i;:::-;4313:59;4404:7;:15;4412:6;4404:15;;;;;;;;;;;;;;;;;;;;;;;;;4382:7;:19;4390:10;4382:19;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;4455:1;4429:7;:15;4437:6;4429:15;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;4487:6;4472:22;;;;;;;;;;;;4045:456:::0;;:::o;3325:437:5:-;594:17:10;:15;:17::i;:::-;3418:1:5::1;3401:19;;:5;:19;;;;:79;;;;;3431:5;3425:30;;;3456:23;3425:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;3424:56;3401:79;3397:109;;;3482:24;;:15;:24::i;:::-;3397:109;3658:5;3638:18;3631:33;3749:5;3736:19;;;;;;;;;;;;3325:437:::0;:::o;3697:853:7:-;594:17:10;:15;:17::i;:::-;3906:1:7::1;3886:22;;:8;:22;;;:53;;;;647:3;3912:27;;:8;:27;;;3886:53;:82;;;;3963:4;3943:25;;:8;:25;;;3886:82;3882:112;;;3970:24;;:15;:24::i;:::-;3882:112;4076:1;4048:30;;:6;:16;4055:8;4048:16;;;;;;;;;;;;;;;;;;;;;;;;;:30;;;4044:60;;4080:24;;:15;:24::i;:::-;4044:60;4221:1;4201:22;;:8;:22;;;:53;;;;647:3;4227:27;;:8;:27;;;4201:53;4197:83;;;4256:24;;:15;:24::i;:::-;4197:83;4315:8;4294:29;;:6;:17;4301:9;4294:17;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;4290:59;;4325:24;;:15;:24::i;:::-;4290:59;4378:6;:16;4385:8;4378:16;;;;;;;;;;;;;;;;;;;;;;;;;4359:6;:16;4366:8;4359:16;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;4424:8;4404:6;:17;4411:9;4404:17;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;4469:1;4442:6;:16;4449:8;4442:16;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;4499:8;4486:22;;;;;;;;;;;;4534:8;4523:20;;;;;;;;;;;;3697:853:::0;;;:::o;5020:96::-;5074:7;5100:9;;5093:16;;5020:96;:::o;12212:147:0:-;12311:41;12327:8;12311:41;;;;;;;;;;;;12341:10;12311:15;:41::i;:::-;12212:147;;:::o;2270:170:4:-;594:17:10;:15;:17::i;:::-;2352:35:4::1;2379:7;2352:26;:35::i;:::-;2425:7;2402:31;;;;;;;;;;;;2270:170:::0;:::o;16494:381:0:-;16551:7;16570:15;16721:9;16710:20;;2774:66;16826:25;;16853:7;16862:4;16815:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16805:63;;;;;;16798:70;;;16494:381;:::o;2917:741:7:-;594:17:10;:15;:17::i;:::-;3127:10:7::1;3123:1;3110:10;;:14;:27;3106:57;;;3139:24;;:15;:24::i;:::-;3106:57;3274:1;3257:19;;:5;:19;;;:47;;;;647:3;3280:24;;:5;:24;;;3257:47;3253:77;;;3306:24;;:15;:24::i;:::-;3253:77;3365:5;3344:26;;:6;:17;3351:9;3344:17;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;3340:56;;3372:24;;:15;:24::i;:::-;3340:56;3426:6;:13;3433:5;3426:13;;;;;;;;;;;;;;;;;;;;;;;;;3406:6;:17;3413:9;3406:17;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;3473:1;3449:6;:13;3456:5;3449:13;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;3485:10;;:12;;;;;;;;;;;;;;3525:5;3512:19;;;;;;;;;;;;3612:10;3599:9;;:23;3595:56;;3624:27;3640:10;3624:15;:27::i;:::-;3595:56;2917:741:::0;;;:::o;2568:49:0:-;;;;;;;;;;;;;;;;;;;:::o;325:114:10:-;401:4;379:27;;:10;:27;;;375:57;;408:24;;:15;:24::i;:::-;375:57;325:114::o;591:707:34:-;786:4;780:11;816:66;811:3;804:79;958:4;951;946:3;942:14;935:28;1016:4;1009;1004:3;1000:14;993:28;1102:5;1095:4;1090:3;1086:14;1079:29;1150:4;1145:3;1138:17;382:421:19;440:7;685:1;680;:6;676:45;;;709:1;702:8;;;;676:45;731:9;747:1;743;:5;731:17;;775:1;770;766;:5;;;;;;:10;758:19;;;;;;795:1;788:8;;;382:421;;;;;:::o;947:543:11:-;1032:7;1041:9;1052;1218:3;1212:4;1208:14;1280:4;1266:12;1262:23;1250:10;1246:40;1240:47;1235:52;;1345:4;1331:12;1327:23;1315:10;1311:40;1305:47;1300:52;;1418:4;1404:12;1400:23;1388:10;1384:40;1378:47;1375:1;1370:56;1365:61;;1174:262;;;;;;:::o;10800:1381:0:-;11056:10;:17;11039:14;11050:2;11039:6;:10;;:14;;;;:::i;:::-;:34;11035:64;;;11075:24;;:15;:24::i;:::-;11035:64;11227:28;11439:4;11430:6;11418:10;11414:23;11410:34;11404:41;11380:65;;11559:10;:17;11516:40;11535:20;11516:14;11527:2;11516:6;:10;;:14;;;;:::i;:::-;:18;;:40;;;;:::i;:::-;:60;11512:90;;;11578:24;;:15;:24::i;:::-;11512:90;11640:30;11976:4;11967:6;11955:10;11951:23;11947:34;11926:55;;269:10:32;12129:19:0;;12053:95;;;12073:5;12053:43;;;12097:8;12107:17;12053:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:95;;;;12049:125;;12150:24;;:15;:24::i;:::-;12049:125;10800:1381;;;;;;:::o;2288:517:6:-;2444:13;2459:17;2496:10;:8;:10::i;:::-;2488:18;;985:3;2574:30;;:10;:30;;;;:67;;;;;2639:1;2608:33;;:7;:19;2616:10;2608:19;;;;;;;;;;;;;;;;;;;;;;;;;:33;;;;2574:67;2566:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2683:1;2666:19;;:5;:19;;;2662:137;;2719:5;2713:35;;;2749:2;2753:5;2760:4;2766:9;2777:10;2713:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2701:87;;2662:137;2288:517;;;;;;;:::o;798:823:3:-;966:12;1007:27;994:40;;;;;;;;:9;:40;;;;;;;;;990:625;;;1245:1;1242;1235:4;1229:11;1222:4;1216;1212:15;1208:2;1201:5;1188:59;1177:70;;1159:102;;;1537:1;1534;1527:4;1521:11;1514:4;1508;1504:15;1497:5;1493:2;1486:5;1481:58;1470:69;;1452:101;798:823;;;;;;;:::o;3178:328:6:-;3295:1;3278:19;;:5;:19;;;3274:102;;3319:5;3313:32;;;3346:9;3357:7;3313:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3274:102;3389:7;3385:114;;;3430:10;3403:38;;;;;;;;;;;;3385:114;;;3488:10;3461:38;;;;;;;;;;;;3385:114;3178:328;;;:::o;4126:281:5:-;4169:13;4324:18;4318:25;4309:34;;4295:58;:::o;1646:105:19:-;1704:7;1735:1;1730;:6;;:14;;1743:1;1730:14;;;1739:1;1730:14;1723:21;;1646:105;;;;:::o;1025:145::-;1083:7;1115:1;1110;:6;;1102:15;;;;;;1127:9;1143:1;1139;:5;1127:17;;1162:1;1155:8;;;1025:145;;;;:::o;9265:923:0:-;9453:15;9533:24;9586:1;9560:28;;:14;:28;;;:66;;9612:14;9560:66;;;9599:9;9560:66;9533:93;;9660:1;9640:22;;:8;:22;;;9636:546;;;9806:73;9842:11;9831:8;:22;:47;;9867:11;9831:47;;;9856:8;9831:47;9806:20;9818:7;9806;:11;;:20;;;;:::i;:::-;:24;;:73;;;;:::i;:::-;9796:83;;9894:18;9918:8;:13;;9939:7;9918:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9893:58;;;9970:13;9965:44;;9985:24;;:15;:24::i;:::-;9965:44;9636:546;;;;10050:34;10075:8;10050:20;10062:7;10050;:11;;:20;;;;:::i;:::-;:24;;:34;;;;:::i;:::-;10040:44;;10103:42;10117:8;10127;10137:7;10103:13;:42::i;:::-;10098:73;;10147:24;;:15;:24::i;:::-;10098:73;9636:546;9265:923;;;;;;;;:::o;971:1210:7:-;1197:1;1185:9;;:13;1181:43;;;1200:24;;:15;:24::i;:::-;1181:43;1326:7;:14;1313:10;:27;1309:57;;;1342:24;;:15;:24::i;:::-;1309:57;1446:1;1432:10;:15;1428:45;;;1449:24;;:15;:24::i;:::-;1428:45;1520:20;647:3;1520:38;;1573:9;1568:490;1592:7;:14;1588:1;:18;1568:490;;;1672:13;1688:7;1696:1;1688:10;;;;;;;;;;;;;;1672:26;;1733:1;1716:19;;:5;:19;;;:47;;;;647:3;1739:24;;:5;:24;;;1716:47;:73;;;;1784:4;1767:22;;:5;:22;;;1716:73;:98;;;;1809:5;1793:21;;:12;:21;;;1716:98;1712:144;;;1832:24;;:15;:24::i;:::-;1712:144;1943:1;1918:27;;:6;:13;1925:5;1918:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;1914:57;;1947:24;;:15;:24::i;:::-;1914:57;2008:5;1985:6;:20;1992:12;1985:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;2042:5;2027:20;;1568:490;1608:3;;;;;;;1568:490;;;;647:3;2067:6;:20;2074:12;2067:20;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;2128:7;:14;2115:10;:27;;;;2164:10;2152:9;:22;;;;971:1210;;;:::o;738:1490:4:-;1961:4;1942:24;;:7;:24;;;1938:54;;;1968:24;;:15;:24::i;:::-;1938:54;2156:7;2125:29;2118:46;2104:70;:::o;1347:488:6:-;1460:1;1423:39;;:7;:25;985:3;1423:25;;;;;;;;;;;;;;;;;;;;;;;;;:39;;;1419:69;;1464:24;;:15;:24::i;:::-;1419:69;985:3;1498:7;:25;985:3;1498:25;;;;;;;;;;;;;;;;:44;;;;;;;;;;;;;;;;;;1570:1;1556:16;;:2;:16;;;1552:277;;1593:14;1604:2;1593:10;:14::i;:::-;1588:45;;1609:24;;:15;:24::i;:::-;1588:45;1724:68;1732:2;1736:1;1739:4;1745:27;1774:17;1724:7;:68::i;:::-;1719:99;;1794:24;;:15;:24::i;:::-;1719:99;1552:277;1347:488;;:::o;17683:823:0:-;18008:12;18032:18;3097:66;18104:16;;18138:2;18158:5;18191:4;;18181:15;;;;;;;;;;;;;;;;;;;;;;;;;;;18214:9;18241;18268:7;18293:8;18319;18345:14;18377:6;18076:321;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18053:354;;;;;;18032:375;;18448:4;18441:12;;18462:4;18455:12;;18469:17;:15;:17::i;:::-;18488:10;18424:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18417:82;;;17683:823;;;;;;;;;;;;;:::o;1335:145:19:-;1393:7;1412:9;1428:1;1424;:5;1412:17;;1452:1;1447;:6;;1439:15;;;;;;1472:1;1465:8;;;1335:145;;;;:::o;763:988:9:-;853:16;942:17;985:10;997:8;1007:6;962:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;942:72;;1388:4;1385:1;1378:4;1372:11;1365:4;1359;1355:15;1352:1;1345:5;1337;1330;1326:17;1321:72;1413:16;1447:1;1442:61;;;;1521:4;1516:102;;;;1672:1;1657:16;;1406:281;;1442:61;1482:7;1467:22;;1442:61;;1516:102;1599:1;1593:8;1586:16;1576:7;1569:15;1566:37;1559:45;1544:60;;1406:281;;1125:572;;;;;;;:::o;8330:330:6:-;8390:4;8406:12;8563:7;8551:20;8543:28;;8652:1;8645:4;:8;8638:15;;;8330:330;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"4191200","executionCost":"24832","totalCost":"4216032"},"external":{"":"infinite","VERSION()":"infinite","addOwnerWithThreshold(address,uint256)":"infinite","approveHash(bytes32)":"22977","approvedHashes(address,bytes32)":"1328","changeThreshold(uint256)":"23108","checkNSignatures(address,bytes32,bytes,uint256)":"infinite","checkSignatures(bytes32,bytes)":"infinite","checkSignatures(bytes32,bytes,bytes)":"infinite","disableModule(address,address)":"45477","domainSeparator()":"490","enableModule(address)":"45399","execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":"infinite","execTransactionFromModule(address,uint256,bytes,uint8)":"infinite","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"infinite","getModulesPaginated(address,uint256)":"infinite","getOwners()":"infinite","getStorageAt(uint256,uint256)":"infinite","getThreshold()":"1102","getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"infinite","isModuleEnabled(address)":"1396","isOwner(address)":"1345","nonce()":"1051","removeOwner(address,address,uint256)":"infinite","setFallbackHandler(address)":"21568","setGuard(address)":"infinite","setup(address[],uint256,address,bytes,address,address,uint256,address)":"infinite","signedMessages(bytes32)":"1209","simulateAndRevert(address,bytes)":"infinite","swapOwner(address,address,address)":"68664"},"internal":{"checkContractSignature(address,bytes32,bytes memory,uint256)":"infinite","encodeTransactionData(address,uint256,bytes calldata,enum Enum.Operation,uint256,uint256,uint256,address,address,uint256)":"infinite","handlePayment(uint256,uint256,uint256,address,address payable)":"infinite"}},"methodIdentifiers":{"VERSION()":"ffa1ad74","addOwnerWithThreshold(address,uint256)":"0d582f13","approveHash(bytes32)":"d4d9bdcd","approvedHashes(address,bytes32)":"7d832974","changeThreshold(uint256)":"694e80c3","checkNSignatures(address,bytes32,bytes,uint256)":"1fcac7f3","checkSignatures(bytes32,bytes)":"ed516d51","checkSignatures(bytes32,bytes,bytes)":"934f3a11","disableModule(address,address)":"e009cfde","domainSeparator()":"f698da25","enableModule(address)":"610b5925","execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":"6a761202","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getModulesPaginated(address,uint256)":"cc2f8452","getOwners()":"a0e67e2b","getStorageAt(uint256,uint256)":"5624b25b","getThreshold()":"e75235b8","getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"d8d11f78","isModuleEnabled(address)":"2d9ad53d","isOwner(address)":"2f54bf6e","nonce()":"affed0e0","removeOwner(address,address,uint256)":"f8dc5dd9","setFallbackHandler(address)":"f08a0323","setGuard(address)":"e19a9dd9","setup(address[],uint256,address,bytes,address,address,uint256,address)":"b63e800d","signedMessages(bytes32)":"5ae6bd37","simulateAndRevert(address,bytes)":"b4faba09","swapOwner(address,address,address)":"e318b52b"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"approvedHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ApproveHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"}],\"name\":\"SafeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"SignMsg\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashToApprove\",\"type\":\"bytes32\"}],\"name\":\"approveHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"execTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"details\":\"Most important concepts:      - Threshold: Number of required confirmations for a Safe transaction.      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and        approve transactions. Managed in `OwnerManager`.      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.      - Nonce: Each transaction should have a different nonce to prevent replay attacks.      - Signature: A valid signature of an owner of the Safe for a transaction hash.      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/      For the events-based implementation see `SafeL2.sol`.\",\"kind\":\"dev\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"approveHash(bytes32)\":{\"details\":\"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\",\"params\":{\"hashToApprove\":\"The hash to mark as approved for signatures that are verified by this contract.\"}},\"changeThreshold(uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"checkNSignatures(address,bytes32,bytes,uint256)\":{\"details\":\"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\",\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"executor\":\"Address that executing the transaction.        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\",\"requiredSignatures\":\"Amount of required valid signatures.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes)\":{\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes,bytes)\":{\"details\":\"This function makes it compatible with previous versions.\",\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"disableModule(address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Previous module in the modules linked list.\"}},\"domainSeparator()\":{\"details\":\"Returns the domain separator for this contract, as defined in the EIP-712 standard.\",\"returns\":{\"_0\":\"bytes32 The domain separator hash.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.\",\"params\":{\"baseGas\":\"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload of Safe transaction.\",\"gasPrice\":\"Gas price that should be used for the payment calculation.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type of Safe transaction.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the Safe transaction.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"},\"returns\":{\"success\":\"Boolean indicating transaction's success.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getModulesPaginated(address,uint256)\":{\"params\":{\"pageSize\":\"Maximum number of modules that should be returned. Has to be > 0\",\"start\":\"Start of the page. Has to be a module or start pointer (0x1 address)\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getStorageAt(uint256,uint256)\":{\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"getThreshold()\":{\"returns\":{\"_0\":\"Threshold number.\"}},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"params\":{\"_nonce\":\"Transaction nonce.\",\"baseGas\":\"Gas costs for data used to trigger the safe transaction.\",\"data\":\"Data payload.\",\"gasPrice\":\"Maximum gas price that should be used for this transaction.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the safe transaction.\",\"to\":\"Destination address.\",\"value\":\"Ether value.\"},\"returns\":{\"_0\":\"Transaction hash.\"}},\"isModuleEnabled(address)\":{\"returns\":{\"_0\":\"True if the module is enabled\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"Boolean if owner is an owner of the Safe.\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"setFallbackHandler(address)\":{\"details\":\"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}},\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"details\":\"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.\",\"params\":{\"_owners\":\"List of Safe owners.\",\"_threshold\":\"Number of required confirmations for a Safe transaction.\",\"data\":\"Data payload for optional delegate call.\",\"fallbackHandler\":\"Handler for fallback calls to this contract\",\"payment\":\"Value that should be paid\",\"paymentReceiver\":\"Address that should receive the payment (or 0 if tx.origin)\",\"paymentToken\":\"Token that should be used for the payment (0 is ETH)\",\"to\":\"Contract address for optional delegate call.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"swapOwner(address,address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"stateVariables\":{\"VERSION\":{\"return\":\"Version string.\"},\"approvedHashes\":{\"params\":{\"messageHash\":\"Hash of message that should be checked.\",\"owner\":\"Owner address that should be checked.\"},\"return\":\"Number denoting if an owner approved the hash.\"},\"nonce\":{\"return\":\"Nonce.\"},\"signedMessages\":{\"params\":{\"messageHash\":\"Hash of message that should be checked.\"},\"return\":\"Number denoting if an owner signed the hash.\"}},\"title\":\"Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Returns the version of the Safe contract.\"},\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"approveHash(bytes32)\":{\"notice\":\"Marks hash `hashToApprove` as approved.\"},\"approvedHashes(address,bytes32)\":{\"notice\":\"Returns a uint if the messageHash is approved by the owner.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"checkNSignatures(address,bytes32,bytes,uint256)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"checkSignatures(bytes32,bytes)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"checkSignatures(bytes32,bytes,bytes)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\"},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"},\"getModulesPaginated(address,uint256)\":{\"notice\":\"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array.\"},\"getOwners()\":{\"notice\":\"Returns a list of Safe owners.\"},\"getStorageAt(uint256,uint256)\":{\"notice\":\"Reads `length` bytes of storage in the currents contract\"},\"getThreshold()\":{\"notice\":\"Returns the number of required confirmations for a Safe transaction aka the threshold.\"},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"notice\":\"Returns transaction hash to be signed by owners.\"},\"isModuleEnabled(address)\":{\"notice\":\"Returns if an module is enabled\"},\"isOwner(address)\":{\"notice\":\"Returns if `owner` is an owner of the Safe.\"},\"nonce()\":{\"notice\":\"Returns the nonce of the Safe contract.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"setFallbackHandler(address)\":{\"notice\":\"Set Fallback Handler to `handler` for the Safe.\"},\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"notice\":\"Sets an initial storage of the Safe contract.\"},\"signedMessages(bytes32)\":{\"notice\":\"Returns a uint if the messageHash is signed by the owner.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Safe.sol\":\"Safe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Safe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Guard} from \\\"./base/GuardManager.sol\\\";\\nimport {ModuleManager} from \\\"./base/ModuleManager.sol\\\";\\nimport {OwnerManager} from \\\"./base/OwnerManager.sol\\\";\\nimport {FallbackManager} from \\\"./base/FallbackManager.sol\\\";\\nimport {NativeCurrencyPaymentFallback} from \\\"./common/NativeCurrencyPaymentFallback.sol\\\";\\nimport {Singleton} from \\\"./common/Singleton.sol\\\";\\nimport {SignatureDecoder} from \\\"./common/SignatureDecoder.sol\\\";\\nimport {SecuredTokenTransfer} from \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport {StorageAccessible} from \\\"./common/StorageAccessible.sol\\\";\\nimport {Enum} from \\\"./libraries/Enum.sol\\\";\\nimport {ISignatureValidator, ISignatureValidatorConstants} from \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport {SafeMath} from \\\"./external/SafeMath.sol\\\";\\nimport {ISafe} from \\\"./interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\\n * @dev Most important concepts:\\n *      - Threshold: Number of required confirmations for a Safe transaction.\\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\\n *        approve transactions. Managed in `OwnerManager`.\\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\\n *      For the events-based implementation see `SafeL2.sol`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract Safe is\\n    Singleton,\\n    NativeCurrencyPaymentFallback,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    ISafe\\n{\\n    using SafeMath for uint256;\\n\\n    string public constant override VERSION = \\\"1.4.1\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    uint256 public override nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public override signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public override approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\\n    constructor() {\\n        /**\\n         * By setting the threshold it is not possible to call setup anymore,\\n         * so we create a Safe with 0 owners and threshold 1.\\n         * This is an unusable Safe, perfect for the singleton\\n         */\\n        threshold = 1;\\n    }\\n\\n    // @inheritdoc ISafe\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external override {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual override returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            txHash = getTransactionHash( // Transaction info\\n                to,\\n                value,\\n                data,\\n                operation,\\n                safeTxGas,\\n                // Payment info\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                // Signature info\\n                // We use the post-increment here, so the current nonce value is used and incremented afterwards.\\n                nonce++\\n            );\\n            checkSignatures(txHash, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        if (gasleft() < ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500) revertWithError(\\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            if (!success && safeTxGas == 0 && gasPrice == 0) revertWithError(\\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles the payment for a Safe transaction.\\n     * @param gasUsed Gas used by the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return payment The amount of payment made in the specified token.\\n     */\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For native tokens, we will only adjust the gas price to not be higher than the actually used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            (bool refundSuccess, ) = receiver.call{value: payment}(\\\"\\\");\\n            if (!refundSuccess) revertWithError(\\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            if (!transferToken(gasToken, receiver, payment)) revertWithError(\\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the contract signature is valid. Reverts otherwise.\\n     * @dev This is extracted to a separate function for better compatibility with Certora's prover.\\n     *      More info here: https://github.com/safe-global/safe-smart-account/pull/661\\n     * @param owner Address of the owner used to sign the message\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     * @param offset Offset to the start of the contract signature in the signatures byte array\\n     */\\n    function checkContractSignature(address owner, bytes32 dataHash, bytes memory signatures, uint256 offset) internal view {\\n        // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n        if (offset.add(32) > signatures.length) revertWithError(\\\"GS022\\\");\\n\\n        // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n        uint256 contractSignatureLen;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            contractSignatureLen := mload(add(add(signatures, offset), 0x20))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        if (offset.add(32).add(contractSignatureLen) > signatures.length) revertWithError(\\\"GS023\\\");\\n\\n        // Check signature\\n        bytes memory contractSignature;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n            contractSignature := add(add(signatures, offset), 0x20)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        if (ISignatureValidator(owner).isValidSignature(dataHash, contractSignature) != EIP1271_MAGIC_VALUE) revertWithError(\\\"GS024\\\");\\n    }\\n\\n    // @inheritdoc ISafe\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) public view override {\\n        checkSignatures(dataHash, \\\"\\\", signatures);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) public view override {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        if (_threshold == 0) revertWithError(\\\"GS001\\\");\\n        checkNSignatures(msg.sender, dataHash, signatures, _threshold);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function checkNSignatures(\\n        address executor,\\n        bytes32 dataHash,\\n        bytes memory signatures,\\n        uint256 requiredSignatures\\n    ) public view override {\\n        // Check that the provided signature data is not too short\\n        if (signatures.length < requiredSignatures.mul(65)) revertWithError(\\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint256 v; // Implicit conversion from uint8 to uint256 will be done for v received from signatureSplit(...).\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                if (uint256(s) < requiredSignatures.mul(65)) revertWithError(\\\"GS021\\\");\\n\\n                // The contract signature check is extracted to a separate function for better compatibility with formal verification\\n                // A quote from the Certora team:\\n                // \\\"The assembly code broke the pointer analysis, which switched the prover in failsafe mode, where it is (a) much slower and (b) computes different hashes than in the normal mode.\\\"\\n                // More info here: https://github.com/safe-global/safe-smart-account/pull/661\\n                checkContractSignature(currentOwner, dataHash, signatures, uint256(s));\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                if (executor != currentOwner && approvedHashes[currentOwner][dataHash] == 0) revertWithError(\\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), uint8(v - 4), r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, uint8(v), r, s);\\n            }\\n            if (currentOwner <= lastOwner || owners[currentOwner] == address(0) || currentOwner == SENTINEL_OWNERS)\\n                revertWithError(\\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    // @inheritdoc ISafe\\n    function approveHash(bytes32 hashToApprove) external override {\\n        if (owners[msg.sender] == address(0)) revertWithError(\\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function domainSeparator() public view override returns (bytes32) {\\n        uint256 chainId;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, this));\\n    }\\n\\n    /**\\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash bytes.\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) private view returns (bytes memory) {\\n        bytes32 safeTxHash = keccak256(\\n            abi.encode(\\n                SAFE_TX_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                safeTxGas,\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view override returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\",\"keccak256\":\"0xcfc43e753589ce56c42f1d18136a9c8356b6f5a85262c76a80ef02cba1058f00\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e0179af7f1475fead89a26badd804382f1661e82e0cc27f3cfa6b08ac970862\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IFallbackManager} from \\\"../interfaces/IFallbackManager.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized, IFallbackManager {\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        if (handler == address(this)) revertWithError(\\\"GS400\\\");\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    // @inheritdoc IFallbackManager\\n    function setFallbackHandler(address handler) public override authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // When compiled with the optimizer, the compiler relies on a certain assumptions on how the\\n            // memory is used, therefore we need to guarantee memory safety (keeping the free memory point 0x40 slot intact,\\n            // not going beyond the scratch space, etc)\\n            // Solidity docs: https://docs.soliditylang.org/en/latest/assembly.html#memory-safety\\n\\n            let handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\\n\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(add(ptr, calldatasize()), shl(96, caller()))\\n\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, ptr, add(calldatasize(), 20), 0, 0)\\n\\n            returndatacopy(ptr, 0, returndatasize())\\n            if iszero(success) {\\n                revert(ptr, returndatasize())\\n            }\\n            return(ptr, returndatasize())\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x07a3a038074e619472c3fe196a160a7e1e394523e7547812ec55f38f83e2edc5\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {Executor} from \\\"./Executor.sol\\\";\\nimport {GuardManager, Guard} from \\\"./GuardManager.sol\\\";\\nimport {IModuleManager} from \\\"../interfaces/IModuleManager.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor, GuardManager, IModuleManager {\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        if (modules[SENTINEL_MODULES] != address(0)) revertWithError(\\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            if (!isContract(to)) revertWithError(\\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            if (!execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max)) revertWithError(\\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Runs pre-execution checks for module transactions if a guard is enabled.\\n     * @param to Target address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return guard Guard to be used for checking.\\n     * @return guardHash Hash returned from the guard tx check.\\n     */\\n    function preModuleExecution(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (address guard, bytes32 guardHash) {\\n        guard = getGuard();\\n\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n\\n        if (guard != address(0)) {\\n            guardHash = Guard(guard).checkModuleTransaction(to, value, data, operation, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Runs post-execution checks for module transactions if a guard is enabled.\\n     * @param guardHash Hash returned from the guard during pre execution check.\\n     * @param success Boolean flag indicating if the call succeeded.\\n     * @param guard Guard to be used for checking.\\n     * @dev Emits event based on module transaction success.\\n     */\\n    function postModuleExecution(address guard, bytes32 guardHash, bool success) internal {\\n        if (guard != address(0)) {\\n            Guard(guard).checkAfterExecution(guardHash, success);\\n        }\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function enableModule(address module) public override authorized {\\n        // Module address cannot be null or sentinel.\\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\\\"GS101\\\");\\n        // Module cannot be added twice.\\n        if (modules[module] != address(0)) revertWithError(\\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function disableModule(address prevModule, address module) public override authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\\\"GS101\\\");\\n        if (modules[prevModule] != module) revertWithError(\\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual override returns (bool success) {\\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        postModuleExecution(guard, guardHash, success);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public override returns (bool success, bytes memory returnData) {\\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load free memory location\\n            returnData := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(returnData, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(returnData, returndatasize())\\n            // Store the data\\n            returndatacopy(add(returnData, 0x20), 0, returndatasize())\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        postModuleExecution(guard, guardHash, success);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function isModuleEnabled(address module) public view override returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function getModulesPaginated(address start, uint256 pageSize) external view override returns (address[] memory array, address next) {\\n        if (start != SENTINEL_MODULES && !isModuleEnabled(start)) revertWithError(\\\"GS105\\\");\\n        if (pageSize == 0) revertWithError(\\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xde09a7c26b2caadda53ded5d92ec8763492435054618a9661760f0f33e5b9ac5\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IOwnerManager} from \\\"../interfaces/IOwnerManager.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized, IOwnerManager {\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        if (threshold > 0) revertWithError(\\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        if (_threshold > _owners.length) revertWithError(\\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        if (_threshold == 0) revertWithError(\\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this) || currentOwner == owner)\\n                revertWithError(\\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            if (owners[owner] != address(0)) revertWithError(\\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public override authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this)) revertWithError(\\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        if (owners[owner] != address(0)) revertWithError(\\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public override authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        if (ownerCount - 1 < _threshold) revertWithError(\\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        if (owner == address(0) || owner == SENTINEL_OWNERS) revertWithError(\\\"GS203\\\");\\n        if (owners[prevOwner] != owner) revertWithError(\\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public override authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        if (newOwner == address(0) || newOwner == SENTINEL_OWNERS || newOwner == address(this)) revertWithError(\\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        if (owners[newOwner] != address(0)) revertWithError(\\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        if (oldOwner == address(0) || oldOwner == SENTINEL_OWNERS) revertWithError(\\\"GS203\\\");\\n        if (owners[prevOwner] != oldOwner) revertWithError(\\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function changeThreshold(uint256 _threshold) public override authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        if (_threshold > ownerCount) revertWithError(\\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        if (_threshold == 0) revertWithError(\\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function getThreshold() public view override returns (uint256) {\\n        return threshold;\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function isOwner(address owner) public view override returns (bool) {\\n        return !(owner == SENTINEL_OWNERS || owners[owner] == address(0));\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function getOwners() public view override returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xdcc21ddf05668e451b2cdeb4d28f2c7a3a2fc73a20b3cf592dcebbe335e3b1ff\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/NativeCurrencyPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x90afdfd7ecdf7d18e4a3d73a55e51387713bb69dfcc4490ff7348d6126ba3197\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            v := byte(0, mload(add(signatures, add(signaturePos, 0x60))))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xc811f101acdc7e0bf0c04307a36889a5a5834a2163e4ad2d20f7bd3fd95d8796\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe Smart Account contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            mstore(ptr, success)\\n            mstore(add(ptr, 0x20), returndatasize())\\n            returndatacopy(add(ptr, 0x40), 0, returndatasize())\\n            revert(ptr, add(returndatasize(), 0x40))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xfce71a03d9a54d9404db5d8cf177d93c2983a651070293e2fa2d8c4e5bba5a0c\",\"license\":\"LGPL-3.0-only\"},\"contracts/external/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice EIP1271 method to validate a signature.\\n     * @param _hash Hash of the data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0xae1d485aedcb9dd2c4a4eaba3d4183ccefc5604d0160b9ae0eaf1fe5566df7e2\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2561,"contract":"contracts/Safe.sol:Safe","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":1422,"contract":"contracts/Safe.sol:Safe","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":1953,"contract":"contracts/Safe.sol:Safe","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":1955,"contract":"contracts/Safe.sol:Safe","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":1957,"contract":"contracts/Safe.sol:Safe","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":65,"contract":"contracts/Safe.sol:Safe","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":67,"contract":"contracts/Safe.sol:Safe","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":72,"contract":"contracts/Safe.sol:Safe","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":79,"contract":"contracts/Safe.sol:Safe","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"VERSION()":{"notice":"Returns the version of the Safe contract."},"addOwnerWithThreshold(address,uint256)":{"notice":"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."},"approveHash(bytes32)":{"notice":"Marks hash `hashToApprove` as approved."},"approvedHashes(address,bytes32)":{"notice":"Returns a uint if the messageHash is approved by the owner."},"changeThreshold(uint256)":{"notice":"Changes the threshold of the Safe to `_threshold`."},"checkNSignatures(address,bytes32,bytes,uint256)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"checkSignatures(bytes32,bytes)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"checkSignatures(bytes32,bytes,bytes)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"disableModule(address,address)":{"notice":"Disables the module `module` for the Safe."},"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"notice":"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`."},"execTransactionFromModule(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"},"getModulesPaginated(address,uint256)":{"notice":"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."},"getOwners()":{"notice":"Returns a list of Safe owners."},"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the currents contract"},"getThreshold()":{"notice":"Returns the number of required confirmations for a Safe transaction aka the threshold."},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"notice":"Returns transaction hash to be signed by owners."},"isModuleEnabled(address)":{"notice":"Returns if an module is enabled"},"isOwner(address)":{"notice":"Returns if `owner` is an owner of the Safe."},"nonce()":{"notice":"Returns the nonce of the Safe contract."},"removeOwner(address,address,uint256)":{"notice":"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."},"setFallbackHandler(address)":{"notice":"Set Fallback Handler to `handler` for the Safe."},"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"notice":"Sets an initial storage of the Safe contract."},"signedMessages(bytes32)":{"notice":"Returns a uint if the messageHash is signed by the owner."},"swapOwner(address,address,address)":{"notice":"Replaces the owner `oldOwner` in the Safe with `newOwner`."}},"version":1}}},"contracts/SafeL2.sol":{"SafeL2":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"approvedHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"ApproveHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"module","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"SafeModuleTransaction","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"baseGas","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"gasPrice","type":"uint256"},{"indexed":false,"internalType":"address","name":"gasToken","type":"address"},{"indexed":false,"internalType":"address payable","name":"refundReceiver","type":"address"},{"indexed":false,"internalType":"bytes","name":"signatures","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"additionalInfo","type":"bytes"}],"name":"SafeMultiSigTransaction","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"initiator","type":"address"},{"indexed":false,"internalType":"address[]","name":"owners","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"},{"indexed":false,"internalType":"address","name":"initializer","type":"address"},{"indexed":false,"internalType":"address","name":"fallbackHandler","type":"address"}],"name":"SafeSetup","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"SignMsg","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"approvedHashes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"uint256","name":"requiredSignatures","type":"uint256"}],"name":"checkNSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"getTransactionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_threshold","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"address","name":"fallbackHandler","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address payable","name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"signedMessages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulateAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Stefan George - @Georgi87Richard Meissner - @rmeissner","kind":"dev","methods":{"addOwnerWithThreshold(address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"New owner address."}},"approveHash(bytes32)":{"details":"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures","params":{"hashToApprove":"The hash to mark as approved for signatures that are verified by this contract."}},"changeThreshold(uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold."}},"checkNSignatures(address,bytes32,bytes,uint256)":{"details":"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.","params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","executor":"Address that executing the transaction.        ⚠️⚠️⚠️ Make sure that the executor address is a legitmate executor.        Incorrectly passed the executor might reduce the threshold by 1 signature. ⚠️⚠️⚠️","requiredSignatures":"Amount of required valid signatures.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"checkSignatures(bytes32,bytes)":{"params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"checkSignatures(bytes32,bytes,bytes)":{"details":"This function makes it compatible with previous versions.","params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"disableModule(address,address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be removed.","prevModule":"Previous module in the modules linked list."}},"domainSeparator()":{"details":"Returns the domain separator for this contract, as defined in the EIP-712 standard.","returns":{"_0":"bytes32 The domain separator hash."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be whitelisted."}},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"details":"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.","params":{"baseGas":"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)","data":"Data payload of Safe transaction.","gasPrice":"Gas price that should be used for the payment calculation.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type of Safe transaction.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the Safe transaction.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."},"returns":{"_0":"Boolean indicating transaction's success."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"success":"Boolean flag indicating if the call succeeded."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getModulesPaginated(address,uint256)":{"params":{"pageSize":"Maximum number of modules that should be returned. Has to be > 0","start":"Start of the page. Has to be a module or start pointer (0x1 address)"},"returns":{"array":"Array of modules.","next":"Start of the next page."}},"getOwners()":{"returns":{"_0":"Array of Safe owners."}},"getStorageAt(uint256,uint256)":{"params":{"length":"- the number of words (32 bytes) of data to read","offset":"- the offset in the current contract's storage in words to start reading from"},"returns":{"_0":"the bytes that were read."}},"getThreshold()":{"returns":{"_0":"Threshold number."}},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"params":{"_nonce":"Transaction nonce.","baseGas":"Gas costs for data used to trigger the safe transaction.","data":"Data payload.","gasPrice":"Maximum gas price that should be used for this transaction.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the safe transaction.","to":"Destination address.","value":"Ether value."},"returns":{"_0":"Transaction hash."}},"isModuleEnabled(address)":{"returns":{"_0":"True if the module is enabled"}},"isOwner(address)":{"returns":{"_0":"Boolean if owner is an owner of the Safe."}},"removeOwner(address,address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"Owner address to be removed.","prevOwner":"Owner that pointed to the owner to be removed in the linked list"}},"setFallbackHandler(address)":{"details":"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.","params":{"handler":"contract to handle fallback calls."}},"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"details":"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.","params":{"_owners":"List of Safe owners.","_threshold":"Number of required confirmations for a Safe transaction.","data":"Data payload for optional delegate call.","fallbackHandler":"Handler for fallback calls to this contract","payment":"Value that should be paid","paymentReceiver":"Address that should receive the payment (or 0 if tx.origin)","paymentToken":"Token that should be used for the payment (0 is ETH)","to":"Contract address for optional delegate call."}},"simulateAndRevert(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}},"swapOwner(address,address,address)":{"details":"This can only be done via a Safe transaction.","params":{"newOwner":"New owner address.","oldOwner":"Owner address to be replaced.","prevOwner":"Owner that pointed to the owner to be replaced in the linked list"}}},"title":"SafeL2 - An implementation of the Safe contract that emits additional events on transaction executions.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x5526 DUP1 PUSH2 0x28 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xE19A9DD9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF08A0323 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF08A0323 EQ PUSH2 0x13EC JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x143D JUMPI DUP1 PUSH4 0xF8DC5DD9 EQ PUSH2 0x1468 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x14E3 JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xE19A9DD9 EQ PUSH2 0x120D JUMPI DUP1 PUSH4 0xE318B52B EQ PUSH2 0x125E JUMPI DUP1 PUSH4 0xE75235B8 EQ PUSH2 0x12EF JUMPI DUP1 PUSH4 0xED516D51 EQ PUSH2 0x131A JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xCC2F8452 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC2F8452 EQ PUSH2 0xF5A JUMPI DUP1 PUSH4 0xD4D9BDCD EQ PUSH2 0x1027 JUMPI DUP1 PUSH4 0xD8D11F78 EQ PUSH2 0x1062 JUMPI DUP1 PUSH4 0xE009CFDE EQ PUSH2 0x119C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0xCD7 JUMPI DUP1 PUSH4 0xB4FABA09 EQ PUSH2 0xD02 JUMPI DUP1 PUSH4 0xB63E800D EQ PUSH2 0xDEA JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x6A761202 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x6A761202 EQ PUSH2 0x8D7 JUMPI DUP1 PUSH4 0x7D832974 EQ PUSH2 0xA93 JUMPI DUP1 PUSH4 0x934F3A11 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0xC6B JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 EQ PUSH2 0x7FC JUMPI DUP1 PUSH4 0x610B5925 EQ PUSH2 0x84B JUMPI DUP1 PUSH4 0x694E80C3 EQ PUSH2 0x89C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x2F54BF6E GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x2F54BF6E EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x468721A7 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x5229073F EQ PUSH2 0x5BD JUMPI DUP1 PUSH4 0x5624B25B EQ PUSH2 0x73E JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xD582F13 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x1FCAC7F3 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x2D9AD53D EQ PUSH2 0x3DA JUMPI PUSH2 0x21B JUMP JUMPDEST CALLDATASIZE PUSH2 0x21B JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3D0CE9BFC3ED7D6862DBB28B2DEA94561FE714A1B4D019AA8AF39730D1AD7C3D CALLVALUE PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SLOAD DUP1 PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD CALLDATASIZE PUSH1 0x0 DUP3 CALLDATACOPY CALLER PUSH1 0x60 SHL CALLDATASIZE DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x14 CALLDATASIZE ADD DUP4 PUSH1 0x0 DUP7 GAS CALL RETURNDATASIZE PUSH1 0x0 DUP4 RETURNDATACOPY DUP1 PUSH2 0x27F JUMPI RETURNDATASIZE DUP3 REVERT JUMPDEST RETURNDATASIZE DUP3 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1573 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x18CD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x490 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1E93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x5E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x702 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6E7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x72F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x781 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2013 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x7A6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7EE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x835 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x89A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x86E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x20B2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x23B0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA7B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2462 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x26A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC69 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xB25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x26C6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC80 PUSH2 0x2712 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCA8 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCEC PUSH2 0x28BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x28C1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF58 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xE0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xE5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xEDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x28E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFB3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1012 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFF7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1060 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2D86 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1186 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x1086 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x10CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x120B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2F0E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x320B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x126A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x33B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1304 PUSH2 0x38F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13EA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3902 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3920 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1452 PUSH2 0x3977 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x148B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x39F3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F8 PUSH2 0x3D4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1538 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x151D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1565 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157B PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x15E2 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1618 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1647 JUMPI PUSH2 0x1646 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1704 JUMPI PUSH2 0x1703 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x18C9 JUMPI PUSH2 0x18C8 DUP2 PUSH2 0x23B0 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x18E1 PUSH1 0x41 DUP3 PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 MLOAD LT ISZERO PUSH2 0x1913 JUMPI PUSH2 0x1912 PUSH32 0x4753303230000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1CE5 JUMPI PUSH2 0x192F DUP9 DUP3 PUSH2 0x3E5F JUMP JUMPDEST DUP3 PUSH1 0xFF AND SWAP3 POP DUP1 SWAP5 POP DUP2 SWAP6 POP DUP3 SWAP7 POP POP POP POP PUSH1 0x0 DUP5 EQ ISZERO PUSH2 0x19AC JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP PUSH2 0x1964 PUSH1 0x41 DUP9 PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x0 SHR LT ISZERO PUSH2 0x1998 JUMPI PUSH2 0x1997 PUSH32 0x4753303231000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x19A7 DUP6 DUP11 DUP11 DUP6 PUSH1 0x0 SHR PUSH2 0x3E8E JUMP JUMPDEST PUSH2 0x1BA9 JUMP JUMPDEST PUSH1 0x1 DUP5 EQ ISZERO PUSH2 0x1A7B JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1A47 JUMPI POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x1A76 JUMPI PUSH2 0x1A75 PUSH32 0x4753303235000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1E DUP5 GT ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x1 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 DUP7 SUB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP PUSH2 0x1BA7 JUMP JUMPDEST PUSH1 0x1 DUP10 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO DUP1 PUSH2 0x1C6F JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1CA6 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1CD5 JUMPI PUSH2 0x1CD4 PUSH32 0x4753303236000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP5 SWAP6 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x191D JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1DBC JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1E8B JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xB648D3644F584ED1C2232D53C46D87E693586486AD0D1175F8656013110B714E CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1F0D JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F4A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1F2F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1F77 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1F94 DUP6 DUP6 DUP6 DUP6 PUSH2 0x40B7 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1FB1 DUP9 DUP9 DUP9 DUP9 PUSH2 0x4110 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1FE2 DUP9 DUP9 DUP9 DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x43E2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0x20 RETURNDATASIZE ADD DUP4 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x2008 DUP3 DUP3 DUP7 PUSH2 0x442E JUMP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x20 DUP4 MUL PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2064 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x208F JUMPI DUP1 DUP6 ADD SLOAD DUP1 PUSH1 0x20 DUP4 MUL PUSH1 0x20 DUP6 ADD ADD MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x206A JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20BA PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2121 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2150 JUMPI PUSH2 0x214F PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x220D JUMPI PUSH2 0x220C PUSH32 0x4753313032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xECDF3A3EFFEA5783A3C4C2140E677577666428D44ED9D474A0B3A4C9943F8440 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x23B8 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0x23EC JUMPI PUSH2 0x23EB PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x241F JUMPI PUSH2 0x241E PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0x610F7FF2B304AE8903C3DE74C60C6AB1F7D6226B3F52C5161905BB5AD4039C93 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x5 SLOAD CALLER PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH32 0x66753CD2356569EE081232E3BE8909B950E0A76C1F8460C3A5E3C2BE32B11BED DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP13 PUSH1 0x40 MLOAD DUP1 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP11 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2515 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 SUB DUP5 MSTORE DUP15 DUP15 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP5 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25CF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25B4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x25FC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP5 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2635 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x261A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2662 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP16 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x268F DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x456F JUMP JUMPDEST SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x2700 JUMPI PUSH2 0x26FF PUSH32 0x4753303031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x270C CALLER DUP6 DUP5 DUP5 PUSH2 0x18CD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x272F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x275E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x28B2 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2809 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x2 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x27C8 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD DUP6 GAS DELEGATECALL PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE RETURNDATASIZE PUSH1 0x20 DUP3 ADD MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x40 DUP4 ADD RETURNDATACOPY PUSH1 0x40 RETURNDATASIZE ADD DUP2 REVERT JUMPDEST PUSH2 0x2933 DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 PUSH2 0x4A06 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2971 JUMPI PUSH2 0x2970 DUP5 PUSH2 0x4DAD JUMP JUMPDEST JUMPDEST PUSH2 0x29BF DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x4E31 JUMP JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x29D9 JUMPI PUSH2 0x29D7 DUP3 PUSH1 0x0 PUSH1 0x1 DUP7 DUP6 PUSH2 0x503B JUMP JUMPDEST POP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP12 DUP12 DUP12 DUP12 DUP10 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2AED JUMPI POP PUSH2 0x2AEB DUP5 PUSH2 0x1CF1 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2B1C JUMPI PUSH2 0x2B1B PUSH32 0x4753313035000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 EQ ISZERO PUSH2 0x2B4F JUMPI PUSH2 0x2B4E PUSH32 0x4753313036000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2B66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B95 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2C67 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2C72 JUMPI POP DUP4 DUP2 LT JUMPDEST ISZERO PUSH2 0x2D2D JUMPI DUP2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2BFD JUMP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2D7B JUMPI DUP3 PUSH1 0x1 DUP3 SUB DUP2 MLOAD DUP2 LT PUSH2 0x2D70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST DUP1 DUP4 MSTORE POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2E44 JUMPI PUSH2 0x2E43 PUSH32 0x4753303330000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xF2A0EB156472D1440255B0D7C1E19CC07115D1051FE605B0DCE69ACFEC884D9C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF6 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x51EF JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2F16 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2F7D JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2FAC JUMPI PUSH2 0x2FAB PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3068 JUMPI PUSH2 0x3067 PUSH32 0x4753313033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAB4FA2B463F581B2B32CB3B7E3B704B9CE37CC209B5FB4D77E593ACE4054276 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x3213 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x3318 JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP ISZERO JUMPDEST ISZERO PUSH2 0x3347 JUMPI PUSH2 0x3346 PUSH32 0x4753333030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SSTORE DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1151116914515BC0891FF9047A6CB32CF902546F83066499BCF8BA33D2353FA2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x33B8 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x341F JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x3455 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3484 JUMPI PUSH2 0x3483 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3541 JUMPI PUSH2 0x3540 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x35A8 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x35D7 JUMPI PUSH2 0x35D6 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3693 JUMPI PUSH2 0x3692 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x391C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP4 PUSH2 0x26C6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3928 PUSH2 0x3D87 JUMP JUMPDEST PUSH2 0x3931 DUP2 PUSH2 0x4DAD JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5AC6C46C93C8D0E53714BA3B53DB3E7C046DA994313D7ED0D192028BC7C228B0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CHAINID SWAP1 POP PUSH32 0x47E79534A245952E8B16893A336B85A3D9EA9FA8C573F3D803AFB92A79469218 PUSH1 0x0 SHL DUP2 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x39FB PUSH2 0x3D87 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x3 SLOAD SUB LT ISZERO PUSH2 0x3A32 JUMPI PUSH2 0x3A31 PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3A99 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3AC8 JUMPI PUSH2 0x3AC7 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3B84 JUMPI PUSH2 0x3B83 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 SUB SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x3D49 JUMPI PUSH2 0x3D48 DUP2 PUSH2 0x23B0 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3DE4 JUMPI PUSH2 0x3DE3 PUSH32 0x4753303331000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x3E38 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3E59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x3E49 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3E54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP2 ADD DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x3EA4 PUSH1 0x20 DUP4 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x3ED4 JUMPI PUSH2 0x3ED3 PUSH32 0x4753303232000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MLOAD SWAP1 POP DUP3 MLOAD PUSH2 0x3F07 DUP3 PUSH2 0x3EF9 PUSH1 0x20 DUP7 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x3F37 JUMPI PUSH2 0x3F36 PUSH32 0x4753303233000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x60 PUSH1 0x20 DUP4 DUP6 ADD ADD SWAP1 POP PUSH4 0x1626BA7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E DUP8 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3FDB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3FC0 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x4008 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x403A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x40AF JUMPI PUSH2 0x40AE PUSH32 0x4753303234000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x40C8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x4110 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x40F9 DUP8 DUP8 DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x43E2 JUMP JUMPDEST SWAP3 POP PUSH2 0x4106 DUP3 DUP3 DUP6 PUSH2 0x442E JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x411B PUSH2 0x53B6 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x41E6 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST PUSH2 0x4258 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4753313034000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x43D9 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x728C2972 DUP8 DUP8 DUP8 DUP8 CALLER PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x42F2 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x434B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4330 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x4378 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x439B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x43C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x43F0 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x43FC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4415 JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x4425 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x44D8 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x4526 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6895C13664AA4F67288B25D7A21D7AAA34916E355FB9B6FAE0A139A9085BECB8 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x456A JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xACD2C8702804128FDB0DB2BB49F6D127DD0181C13FD45DBFE16DE0930E2BD375 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4595 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH1 0x5 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE PUSH2 0x2EE1 JUMP JUMPDEST SWAP1 POP PUSH2 0x45A1 DUP2 DUP5 PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45AB PUSH2 0x53B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4791 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x75F0BB52 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 CALLER PUSH1 0x40 MLOAD DUP14 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP11 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x464E JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP14 DUP14 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4720 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4705 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x474D JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x478C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1F4 PUSH2 0x47B8 PUSH2 0x9C4 DUP12 ADD PUSH1 0x3F PUSH1 0x40 DUP14 MUL DUP2 PUSH2 0x47A9 JUMPI INVALID JUMPDEST DIV PUSH2 0x53DF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ADD GAS LT ISZERO PUSH2 0x47EA JUMPI PUSH2 0x47E9 PUSH32 0x4753303130000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x4853 DUP16 DUP16 DUP16 DUP16 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP15 PUSH1 0x0 DUP14 EQ PUSH2 0x4848 JUMPI DUP15 PUSH2 0x484E JUMP JUMPDEST PUSH2 0x9C4 GAS SUB JUMPDEST PUSH2 0x43E2 JUMP JUMPDEST SWAP4 POP PUSH2 0x4868 GAS DUP3 PUSH2 0x53F9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP4 ISZERO DUP1 ISZERO PUSH2 0x4878 JUMPI POP PUSH1 0x0 DUP11 EQ JUMPDEST DUP1 ISZERO PUSH2 0x4884 JUMPI POP PUSH1 0x0 DUP9 EQ JUMPDEST ISZERO PUSH2 0x48B3 JUMPI PUSH2 0x48B2 PUSH32 0x4753303133000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP10 GT ISZERO PUSH2 0x48CD JUMPI PUSH2 0x48CA DUP3 DUP12 DUP12 DUP12 DUP12 PUSH2 0x503B JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x4910 JUMPI DUP4 PUSH32 0x442E715F626346E8C54381002DA614F62BEE8D27386535B2521EC8540898556E DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x4949 JUMP JUMPDEST DUP4 PUSH32 0x23428B18ACFB3EA64B08DC0C1D296EA9C09702C09083CA5272E64D115B687D23 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x49F5 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x49F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD GT ISZERO PUSH2 0x4A3B JUMPI PUSH2 0x4A3A PUSH32 0x4753323030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP2 MLOAD DUP2 GT ISZERO PUSH2 0x4A6E JUMPI PUSH2 0x4A6D PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x4AA1 JUMPI PUSH2 0x4AA0 PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x4D19 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4B32 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4B68 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4B9E JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x4BCD JUMPI PUSH2 0x4BCC PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4C8A JUMPI PUSH2 0x4C89 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 SWAP3 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4AAA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 MLOAD PUSH1 0x3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4E0B JUMPI PUSH2 0x4E0A PUSH32 0x4753343030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4EEF JUMPI PUSH2 0x4EEE PUSH32 0x4753313030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5037 JUMPI PUSH2 0x4FAB DUP3 PUSH2 0x5419 JUMP JUMPDEST PUSH2 0x4FD9 JUMPI PUSH2 0x4FD8 PUSH32 0x4753303032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x5008 DUP3 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x43E2 JUMP JUMPDEST PUSH2 0x5036 JUMPI PUSH2 0x5035 PUSH32 0x4753303030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5078 JUMPI DUP3 PUSH2 0x507A JUMP JUMPDEST ORIGIN JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5184 JUMPI PUSH2 0x50E4 GASPRICE DUP7 LT PUSH2 0x50C1 JUMPI GASPRICE PUSH2 0x50C3 JUMP JUMPDEST DUP6 JUMPDEST PUSH2 0x50D6 DUP9 DUP11 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5146 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x514B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x517E JUMPI PUSH2 0x517D PUSH32 0x4753303131000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST POP PUSH2 0x51E5 JUMP JUMPDEST PUSH2 0x51A9 DUP6 PUSH2 0x519B DUP9 DUP11 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x51B6 DUP5 DUP3 DUP5 PUSH2 0x542C JUMP JUMPDEST PUSH2 0x51E4 JUMPI PUSH2 0x51E3 PUSH32 0x4753303132000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xBB8310D486368DB6BD6F849402FDD73AD53D316B5A4B2644AD6EFE0F941286D8 PUSH1 0x0 SHL DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5280 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL PUSH2 0x530C PUSH2 0x3977 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x53AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x53EF JUMPI DUP2 PUSH2 0x53F1 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x5408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x20 PUSH1 0x0 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 DUP10 PUSH2 0x2710 GAS SUB CALL RETURNDATASIZE PUSH1 0x0 DUP2 EQ PUSH2 0x54D3 JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0x54DB JUMPI PUSH1 0x0 SWAP4 POP PUSH2 0x54E6 JUMP JUMPDEST DUP2 SWAP4 POP PUSH2 0x54E6 JUMP JUMPDEST PUSH1 0x0 MLOAD ISZERO DUP3 ISZERO OR ISZERO SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F POP 0xC7 SWAP12 PUSH14 0xB946A8DC609A3FFCF9AAE2333691 SWAP3 0x24 0x1E DELEGATECALL 0x1E PUSH3 0x4D069F MULMOD 0xC8 0xD XOR PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"431:1976:1:-:0;;;;;;;;;;;;;3972:1:0;3960:9;:13;;;;431:1976:1;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101c65760003560e01c8063affed0e0116100f7578063e19a9dd911610095578063f08a032311610064578063f08a0323146113ec578063f698da251461143d578063f8dc5dd914611468578063ffa1ad74146114e35761021b565b8063e19a9dd91461120d578063e318b52b1461125e578063e75235b8146112ef578063ed516d511461131a5761021b565b8063cc2f8452116100d1578063cc2f845214610f5a578063d4d9bdcd14611027578063d8d11f7814611062578063e009cfde1461119c5761021b565b8063affed0e014610cd7578063b4faba0914610d02578063b63e800d14610dea5761021b565b80635ae6bd37116101645780636a7612021161013e5780636a761202146108d75780637d83297414610a93578063934f3a1114610b02578063a0e67e2b14610c6b5761021b565b80635ae6bd37146107fc578063610b59251461084b578063694e80c31461089c5761021b565b80632f54bf6e116101a05780632f54bf6e14610441578063468721a7146104a85780635229073f146105bd5780635624b25b1461073e5761021b565b80630d582f13146102835780631fcac7f3146102de5780632d9ad53d146103da5761021b565b3661021b573373ffffffffffffffffffffffffffffffffffffffff167f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d346040518082815260200191505060405180910390a2005b34801561022757600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5548061025457600080f35b60405136600082373360601b3682015260008060143601836000865af13d6000833e8061027f573d82fd5b3d82f35b34801561028f57600080fd5b506102dc600480360360408110156102a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611573565b005b3480156102ea57600080fd5b506103d86004803603608081101561030157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561034857600080fd5b82018360208201111561035a57600080fd5b8035906020019184600183028401116401000000008311171561037c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506118cd565b005b3480156103e657600080fd5b50610429600480360360208110156103fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf1565b60405180821515815260200191505060405180910390f35b34801561044d57600080fd5b506104906004803603602081101561046457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dc3565b60405180821515815260200191505060405180910390f35b3480156104b457600080fd5b506105a5600480360360808110156104cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561051257600080fd5b82018360208201111561052457600080fd5b8035906020019184600183028401116401000000008311171561054657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050611e93565b60405180821515815260200191505060405180910390f35b3480156105c957600080fd5b506106ba600480360360808110156105e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561062757600080fd5b82018360208201111561063957600080fd5b8035906020019184600183028401116401000000008311171561065b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050611f9e565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156107025780820151818401526020810190506106e7565b50505050905090810190601f16801561072f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561074a57600080fd5b506107816004803603604081101561076157600080fd5b810190808035906020019092919080359060200190929190505050612013565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107c15780820151818401526020810190506107a6565b50505050905090810190601f1680156107ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561080857600080fd5b506108356004803603602081101561081f57600080fd5b810190808035906020019092919050505061209a565b6040518082815260200191505060405180910390f35b34801561085757600080fd5b5061089a6004803603602081101561086e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120b2565b005b3480156108a857600080fd5b506108d5600480360360208110156108bf57600080fd5b81019080803590602001909291905050506123b0565b005b610a7b60048036036101408110156108ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561093557600080fd5b82018360208201111561094757600080fd5b8035906020019184600183028401116401000000008311171561096957600080fd5b9091929391929390803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156109f557600080fd5b820183602082011115610a0757600080fd5b80359060200191846001830284011164010000000083111715610a2957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612462565b60405180821515815260200191505060405180910390f35b348015610a9f57600080fd5b50610aec60048036036040811015610ab657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506126a1565b6040518082815260200191505060405180910390f35b348015610b0e57600080fd5b50610c6960048036036060811015610b2557600080fd5b810190808035906020019092919080359060200190640100000000811115610b4c57600080fd5b820183602082011115610b5e57600080fd5b80359060200191846001830284011164010000000083111715610b8057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610be357600080fd5b820183602082011115610bf557600080fd5b80359060200191846001830284011164010000000083111715610c1757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506126c6565b005b348015610c7757600080fd5b50610c80612712565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610cc3578082015181840152602081019050610ca8565b505050509050019250505060405180910390f35b348015610ce357600080fd5b50610cec6128bb565b6040518082815260200191505060405180910390f35b348015610d0e57600080fd5b50610de860048036036040811015610d2557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610d6257600080fd5b820183602082011115610d7457600080fd5b80359060200191846001830284011164010000000083111715610d9657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506128c1565b005b348015610df657600080fd5b50610f586004803603610100811015610e0e57600080fd5b8101908080359060200190640100000000811115610e2b57600080fd5b820183602082011115610e3d57600080fd5b80359060200191846020830284011164010000000083111715610e5f57600080fd5b909192939192939080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610eaa57600080fd5b820183602082011115610ebc57600080fd5b80359060200191846001830284011164010000000083111715610ede57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128e8565b005b348015610f6657600080fd5b50610fb360048036036040811015610f7d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612aa6565b60405180806020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611012578082015181840152602081019050610ff7565b50505050905001935050505060405180910390f35b34801561103357600080fd5b506110606004803603602081101561104a57600080fd5b8101908080359060200190929190505050612d86565b005b34801561106e57600080fd5b50611186600480360361014081101561108657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156110cd57600080fd5b8201836020820111156110df57600080fd5b8035906020019184600183028401116401000000008311171561110157600080fd5b9091929391929390803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ee1565b6040518082815260200191505060405180910390f35b3480156111a857600080fd5b5061120b600480360360408110156111bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f0e565b005b34801561121957600080fd5b5061125c6004803603602081101561123057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061320b565b005b34801561126a57600080fd5b506112ed6004803603606081101561128157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133b0565b005b3480156112fb57600080fd5b506113046138f8565b6040518082815260200191505060405180910390f35b34801561132657600080fd5b506113ea6004803603604081101561133d57600080fd5b81019080803590602001909291908035906020019064010000000081111561136457600080fd5b82018360208201111561137657600080fd5b8035906020019184600183028401116401000000008311171561139857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613902565b005b3480156113f857600080fd5b5061143b6004803603602081101561140f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613920565b005b34801561144957600080fd5b50611452613977565b6040518082815260200191505060405180910390f35b34801561147457600080fd5b506114e16004803603606081101561148b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506139f3565b005b3480156114ef57600080fd5b506114f8613d4e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561153857808201518184015260208101905061151d565b50505050905090810190601f1680156115655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61157b613d87565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806115e25750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061161857503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611647576116467f4753323033000000000000000000000000000000000000000000000000000000613de6565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611704576117037f4753323034000000000000000000000000000000000000000000000000000000613de6565b5b60026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003600081548092919060010191905055508173ffffffffffffffffffffffffffffffffffffffff167f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2660405160405180910390a280600454146118c9576118c8816123b0565b5b5050565b6118e1604182613e2590919063ffffffff16565b82511015611913576119127f4753303230000000000000000000000000000000000000000000000000000000613de6565b5b6000808060008060005b86811015611ce55761192f8882613e5f565b8260ff16925080945081955082965050505060008414156119ac578260001c9450611964604188613e2590919063ffffffff16565b8260001c1015611998576119977f4753303231000000000000000000000000000000000000000000000000000000613de6565b5b6119a7858a8a8560001c613e8e565b611ba9565b6001841415611a7b578260001c94508473ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614158015611a4757506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002054145b15611a7657611a757f4753303235000000000000000000000000000000000000000000000000000000613de6565b5b611ba8565b601e841115611b405760018960405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018281526020019150506040516020818303038152906040528051906020012060048603858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611b2f573d6000803e3d6000fd5b505050602060405103519450611ba7565b60018985858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611b9a573d6000803e3d6000fd5b5050506020604051035194505b5b5b8573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16111580611c6f5750600073ffffffffffffffffffffffffffffffffffffffff16600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80611ca65750600173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15611cd557611cd47f4753303236000000000000000000000000000000000000000000000000000000613de6565b5b849550808060010191505061191d565b50505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600173ffffffffffffffffffffffffffffffffffffffff1614158015611dbc5750600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b6000600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611e8b5750600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b159050919050565b60007fb648d3644f584ed1c2232d53c46d87e693586486ad0d1175f8656013110b714e3386868686604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001836001811115611f0d57fe5b8152602001828103825284818151815260200191508051906020019080838360005b83811015611f4a578082015181840152602081019050611f2f565b50505050905090810190601f168015611f775780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1611f94858585856140b7565b9050949350505050565b60006060600080611fb188888888614110565b91509150611fe2888888887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6143e2565b9350604051925060203d0183016040523d83523d6000602085013e61200882828661442e565b505094509492505050565b606060006020830267ffffffffffffffff8111801561203157600080fd5b506040519080825280601f01601f1916602001820160405280156120645781602001600182028036833780820191505090505b50905060005b8381101561208f5780850154806020830260208501015250808060010191505061206a565b508091505092915050565b60076020528060005260406000206000915090505481565b6120ba613d87565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806121215750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b156121505761214f7f4753313031000000000000000000000000000000000000000000000000000000613de6565b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461220d5761220c7f4753313032000000000000000000000000000000000000000000000000000000613de6565b5b60016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844060405160405180910390a250565b6123b8613d87565b6003548111156123ec576123eb7f4753323031000000000000000000000000000000000000000000000000000000613de6565b5b600081141561241f5761241e7f4753323032000000000000000000000000000000000000000000000000000000613de6565b5b806004819055507f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c936004546040518082815260200191505060405180910390a150565b6000606060055433600454604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405160208183030381529060405290507f66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed8d8d8d8d8d8d8d8d8d8d8d8c604051808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c8152602001806020018a600181111561251557fe5b81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200184810384528e8e82818152602001925080828437600081840152601f19601f820116905080830192505050848103835286818151815260200191508051906020019080838360005b838110156125cf5780820151818401526020810190506125b4565b50505050905090810190601f1680156125fc5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561263557808201518184015260208101905061261a565b50505050905090810190601f1680156126625780820380516001836020036101000a031916815260200191505b509f5050505050505050505050505050505060405180910390a161268f8d8d8d8d8d8d8d8d8d8d8d61456f565b9150509b9a5050505050505050505050565b6008602052816000526040600020602052806000526040600020600091509150505481565b600060045490506000811415612700576126ff7f4753303031000000000000000000000000000000000000000000000000000000613de6565b5b61270c338584846118cd565b50505050565b6060600060035467ffffffffffffffff8111801561272f57600080fd5b5060405190808252806020026020018201604052801561275e5781602001602082028036833780820191505090505b50905060008060026000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146128b2578083838151811061280957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081806001019250506127c8565b82935050505090565b60055481565b600080825160208401855af46040518181523d60208201523d6000604083013e60403d0181fd5b6129338a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505089614a06565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146129715761297084614dad565b5b6129bf8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050614e31565b60008211156129d9576129d78260006001868561503b565b505b3373ffffffffffffffffffffffffffffffffffffffff167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b8960405180806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252878782818152602001925060200280828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a250505050505050505050565b60606000600173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015612aed5750612aeb84611cf1565b155b15612b1c57612b1b7f4753313035000000000000000000000000000000000000000000000000000000613de6565b5b6000831415612b4f57612b4e7f4753313036000000000000000000000000000000000000000000000000000000613de6565b5b8267ffffffffffffffff81118015612b6657600080fd5b50604051908082528060200260200182016040528015612b955781602001602082028036833780820191505090505b5091506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015612c675750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015612c7257508381105b15612d2d5781838281518110612c8457fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508080600101915050612bfd565b600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612d7b57826001820381518110612d7057fe5b602002602001015191505b808352509250929050565b600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612e4457612e437f4753303330000000000000000000000000000000000000000000000000000000613de6565b5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16817ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c60405160405180910390a350565b6000612ef68c8c8c8c8c8c8c8c8c8c8c6151ef565b8051906020012090509b9a5050505050505050505050565b612f16613d87565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480612f7d5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15612fac57612fab7f4753313031000000000000000000000000000000000000000000000000000000613de6565b5b8073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613068576130677f4753313033000000000000000000000000000000000000000000000000000000613de6565b5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427660405160405180910390a25050565b613213613d87565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561331857508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f945b8148000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b1580156132db57600080fd5b505afa1580156132ef573d6000803e3d6000fd5b505050506040513d602081101561330557600080fd5b8101908080519060200190929190505050155b15613347576133467f4753333030000000000000000000000000000000000000000000000000000000613de6565b5b807f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8558073ffffffffffffffffffffffffffffffffffffffff167f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa260405160405180910390a250565b6133b8613d87565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061341f5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b8061345557503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15613484576134837f4753323033000000000000000000000000000000000000000000000000000000613de6565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613541576135407f4753323034000000000000000000000000000000000000000000000000000000613de6565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806135a85750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156135d7576135d67f4753323033000000000000000000000000000000000000000000000000000000613de6565b5b8173ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613693576136927f4753323035000000000000000000000000000000000000000000000000000000613de6565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf60405160405180910390a28073ffffffffffffffffffffffffffffffffffffffff167f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2660405160405180910390a2505050565b6000600454905090565b61391c8260405180602001604052806000815250836126c6565b5050565b613928613d87565b61393181614dad565b8073ffffffffffffffffffffffffffffffffffffffff167f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b060405160405180910390a250565b6000804690507f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a7946921860001b8130604051602001808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200193505050506040516020818303038152906040528051906020012091505090565b6139fb613d87565b806001600354031015613a3257613a317f4753323031000000000000000000000000000000000000000000000000000000613de6565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480613a995750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15613ac857613ac77f4753323033000000000000000000000000000000000000000000000000000000613de6565b5b8173ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613b8457613b837f4753323035000000000000000000000000000000000000000000000000000000613de6565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008154809291906001900391905055508173ffffffffffffffffffffffffffffffffffffffff167ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf60405160405180910390a28060045414613d4957613d48816123b0565b5b505050565b6040518060400160405280600581526020017f312e342e3100000000000000000000000000000000000000000000000000000081525081565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613de457613de37f4753303331000000000000000000000000000000000000000000000000000000613de6565b5b565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260056024820152816044820152606481fd5b600080831415613e385760009050613e59565b6000828402905082848281613e4957fe5b0414613e5457600080fd5b809150505b92915050565b6000806000836041026020810186015192506040810186015191506060810186015160001a9350509250925092565b8151613ea460208361539790919063ffffffff16565b1115613ed457613ed37f4753303232000000000000000000000000000000000000000000000000000000613de6565b5b60006020828401015190508251613f0782613ef960208661539790919063ffffffff16565b61539790919063ffffffff16565b1115613f3757613f367f4753303233000000000000000000000000000000000000000000000000000000613de6565b5b60606020838501019050631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168673ffffffffffffffffffffffffffffffffffffffff16631626ba7e87846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613fdb578082015181840152602081019050613fc0565b50505050905090810190601f1680156140085780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561402657600080fd5b505afa15801561403a573d6000803e3d6000fd5b505050506040513d602081101561405057600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146140af576140ae7f4753303234000000000000000000000000000000000000000000000000000000613de6565b5b505050505050565b60008060006140c887878787614110565b915091506140f9878787877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6143e2565b925061410682828561442e565b5050949350505050565b60008061411b6153b6565b9150600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156141e65750600073ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b614258576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f475331303400000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146143d9578173ffffffffffffffffffffffffffffffffffffffff1663728c297287878787336040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001806020018460018111156142f257fe5b81526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561434b578082015181840152602081019050614330565b50505050905090810190601f1680156143785780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561439b57600080fd5b505af11580156143af573d6000803e3d6000fd5b505050506040513d60208110156143c557600080fd5b810190808051906020019092919050505090505b94509492505050565b60006001808111156143f057fe5b8360018111156143fc57fe5b1415614415576000808551602087018986f49050614425565b600080855160208701888a87f190505b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146144d8578273ffffffffffffffffffffffffffffffffffffffff16639327136883836040518363ffffffff1660e01b815260040180838152602001821515815260200192505050600060405180830381600087803b1580156144bf57600080fd5b505af11580156144d3573d6000803e3d6000fd5b505050505b8015614526573373ffffffffffffffffffffffffffffffffffffffff167f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb860405160405180910390a261456a565b3373ffffffffffffffffffffffffffffffffffffffff167facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37560405160405180910390a25b505050565b6000806145958d8d8d8d8d8d8d8d8d8d6005600081548092919060010191905055612ee1565b90506145a18184613902565b60006145ab6153b6565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614614791578073ffffffffffffffffffffffffffffffffffffffff166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b8152600401808d73ffffffffffffffffffffffffffffffffffffffff1681526020018c8152602001806020018a600181111561464e57fe5b81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528d8d82818152602001925080828437600081840152601f19601f820116905080830192505050838103825285818151815260200191508051906020019080838360005b83811015614720578082015181840152602081019050614705565b50505050905090810190601f16801561474d5780820380516001836020036101000a031916815260200191505b509e505050505050505050505050505050600060405180830381600087803b15801561477857600080fd5b505af115801561478c573d6000803e3d6000fd5b505050505b6101f46147b86109c48b01603f60408d02816147a957fe5b046153df90919063ffffffff16565b015a10156147ea576147e97f4753303130000000000000000000000000000000000000000000000000000000613de6565b5b60005a90506148538f8f8f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e60008d14614848578e61484e565b6109c45a035b6143e2565b93506148685a826153f990919063ffffffff16565b905083158015614878575060008a145b80156148845750600088145b156148b3576148b27f4753303133000000000000000000000000000000000000000000000000000000613de6565b5b6000808911156148cd576148ca828b8b8b8b61503b565b90505b841561491057837f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e826040518082815260200191505060405180910390a2614949565b837f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23826040518082815260200191505060405180910390a25b5050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146149f5578073ffffffffffffffffffffffffffffffffffffffff16639327136883856040518363ffffffff1660e01b815260040180838152602001821515815260200192505050600060405180830381600087803b1580156149dc57600080fd5b505af11580156149f0573d6000803e3d6000fd5b505050505b50509b9a5050505050505050505050565b60006004541115614a3b57614a3a7f4753323030000000000000000000000000000000000000000000000000000000613de6565b5b8151811115614a6e57614a6d7f4753323031000000000000000000000000000000000000000000000000000000613de6565b5b6000811415614aa157614aa07f4753323032000000000000000000000000000000000000000000000000000000613de6565b5b60006001905060005b8351811015614d19576000848281518110614ac157fe5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480614b325750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80614b6857503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80614b9e57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15614bcd57614bcc7f4753323033000000000000000000000000000000000000000000000000000000613de6565b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614614c8a57614c897f4753323034000000000000000000000000000000000000000000000000000000613de6565b5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550809250508080600101915050614aaa565b506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550825160038190555081600481905550505050565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415614e0b57614e0a7f4753343030000000000000000000000000000000000000000000000000000000613de6565b5b807f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d55550565b600073ffffffffffffffffffffffffffffffffffffffff1660016000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614614eef57614eee7f4753313030000000000000000000000000000000000000000000000000000000613de6565b5b6001806000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461503757614fab82615419565b614fd957614fd87f4753303032000000000000000000000000000000000000000000000000000000613de6565b5b6150088260008360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6143e2565b615036576150357f4753303030000000000000000000000000000000000000000000000000000000613de6565b5b5b5050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614615078578261507a565b325b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415615184576150e43a86106150c1573a6150c3565b855b6150d6888a61539790919063ffffffff16565b613e2590919063ffffffff16565b915060008173ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d8060008114615146576040519150601f19603f3d011682016040523d82523d6000602084013e61514b565b606091505b505090508061517e5761517d7f4753303131000000000000000000000000000000000000000000000000000000613de6565b5b506151e5565b6151a98561519b888a61539790919063ffffffff16565b613e2590919063ffffffff16565b91506151b684828461542c565b6151e4576151e37f4753303132000000000000000000000000000000000000000000000000000000613de6565b5b5b5095945050505050565b606060007fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d860001b8d8d8d8d60405180838380828437808301925050509250505060405180910390208c8c8c8c8c8c8c604051602001808c81526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a815260200189815260200188600181111561528057fe5b81526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b505050505050505050505050604051602081830303815290604052805190602001209050601960f81b600160f81b61530c613977565b8360405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018381526020018281526020019450505050506040516020818303038152906040529150509b9a5050505050505050505050565b6000808284019050838110156153ac57600080fd5b8091505092915050565b60007f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c854905090565b6000818310156153ef57816153f1565b825b905092915050565b60008282111561540857600080fd5b600082840390508091505092915050565b600080823b905060008111915050919050565b60008063a9059cbb8484604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602060008251602084016000896127105a03f13d600081146154d357602081146154db57600093506154e6565b8193506154e6565b600051158215171593505b505050939250505056fea26469706673582212202f50c79b6db946a8dc609a3ffcf9aae233369192241ef41e624d069f09c80d1864736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xE19A9DD9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF08A0323 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF08A0323 EQ PUSH2 0x13EC JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x143D JUMPI DUP1 PUSH4 0xF8DC5DD9 EQ PUSH2 0x1468 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x14E3 JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xE19A9DD9 EQ PUSH2 0x120D JUMPI DUP1 PUSH4 0xE318B52B EQ PUSH2 0x125E JUMPI DUP1 PUSH4 0xE75235B8 EQ PUSH2 0x12EF JUMPI DUP1 PUSH4 0xED516D51 EQ PUSH2 0x131A JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xCC2F8452 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC2F8452 EQ PUSH2 0xF5A JUMPI DUP1 PUSH4 0xD4D9BDCD EQ PUSH2 0x1027 JUMPI DUP1 PUSH4 0xD8D11F78 EQ PUSH2 0x1062 JUMPI DUP1 PUSH4 0xE009CFDE EQ PUSH2 0x119C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0xCD7 JUMPI DUP1 PUSH4 0xB4FABA09 EQ PUSH2 0xD02 JUMPI DUP1 PUSH4 0xB63E800D EQ PUSH2 0xDEA JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x6A761202 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x6A761202 EQ PUSH2 0x8D7 JUMPI DUP1 PUSH4 0x7D832974 EQ PUSH2 0xA93 JUMPI DUP1 PUSH4 0x934F3A11 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0xC6B JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x5AE6BD37 EQ PUSH2 0x7FC JUMPI DUP1 PUSH4 0x610B5925 EQ PUSH2 0x84B JUMPI DUP1 PUSH4 0x694E80C3 EQ PUSH2 0x89C JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0x2F54BF6E GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x2F54BF6E EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x468721A7 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x5229073F EQ PUSH2 0x5BD JUMPI DUP1 PUSH4 0x5624B25B EQ PUSH2 0x73E JUMPI PUSH2 0x21B JUMP JUMPDEST DUP1 PUSH4 0xD582F13 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x1FCAC7F3 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0x2D9AD53D EQ PUSH2 0x3DA JUMPI PUSH2 0x21B JUMP JUMPDEST CALLDATASIZE PUSH2 0x21B JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3D0CE9BFC3ED7D6862DBB28B2DEA94561FE714A1B4D019AA8AF39730D1AD7C3D CALLVALUE PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SLOAD DUP1 PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD CALLDATASIZE PUSH1 0x0 DUP3 CALLDATACOPY CALLER PUSH1 0x60 SHL CALLDATASIZE DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x14 CALLDATASIZE ADD DUP4 PUSH1 0x0 DUP7 GAS CALL RETURNDATASIZE PUSH1 0x0 DUP4 RETURNDATACOPY DUP1 PUSH2 0x27F JUMPI RETURNDATASIZE DUP3 REVERT JUMPDEST RETURNDATASIZE DUP3 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1573 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x18CD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x490 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1E93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x5E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x702 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6E7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x72F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x781 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2013 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x7A6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7EE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x835 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x209A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x89A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x86E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x20B2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x23B0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA7B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2462 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x26A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC69 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xB25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x26C6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC80 PUSH2 0x2712 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCA8 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCEC PUSH2 0x28BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDE8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x28C1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF58 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xE0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xE5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xEDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x28E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFB3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1012 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFF7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1060 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2D86 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x106E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1186 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x1086 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x10CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2EE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x120B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2F0E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x125C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x320B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x126A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x33B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1304 PUSH2 0x38F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13EA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3902 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3920 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1452 PUSH2 0x3977 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x148B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x39F3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F8 PUSH2 0x3D4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1538 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x151D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1565 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157B PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x15E2 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1618 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1647 JUMPI PUSH2 0x1646 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1704 JUMPI PUSH2 0x1703 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x18C9 JUMPI PUSH2 0x18C8 DUP2 PUSH2 0x23B0 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x18E1 PUSH1 0x41 DUP3 PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 MLOAD LT ISZERO PUSH2 0x1913 JUMPI PUSH2 0x1912 PUSH32 0x4753303230000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1CE5 JUMPI PUSH2 0x192F DUP9 DUP3 PUSH2 0x3E5F JUMP JUMPDEST DUP3 PUSH1 0xFF AND SWAP3 POP DUP1 SWAP5 POP DUP2 SWAP6 POP DUP3 SWAP7 POP POP POP POP PUSH1 0x0 DUP5 EQ ISZERO PUSH2 0x19AC JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP PUSH2 0x1964 PUSH1 0x41 DUP9 PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x0 SHR LT ISZERO PUSH2 0x1998 JUMPI PUSH2 0x1997 PUSH32 0x4753303231000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x19A7 DUP6 DUP11 DUP11 DUP6 PUSH1 0x0 SHR PUSH2 0x3E8E JUMP JUMPDEST PUSH2 0x1BA9 JUMP JUMPDEST PUSH1 0x1 DUP5 EQ ISZERO PUSH2 0x1A7B JUMPI DUP3 PUSH1 0x0 SHR SWAP5 POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1A47 JUMPI POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x1A76 JUMPI PUSH2 0x1A75 PUSH32 0x4753303235000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1E DUP5 GT ISZERO PUSH2 0x1B40 JUMPI PUSH1 0x1 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 DUP7 SUB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP PUSH2 0x1BA7 JUMP JUMPDEST PUSH1 0x1 DUP10 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO DUP1 PUSH2 0x1C6F JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x1CA6 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1CD5 JUMPI PUSH2 0x1CD4 PUSH32 0x4753303236000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP5 SWAP6 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x191D JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1DBC JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1E8B JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xB648D3644F584ED1C2232D53C46D87E693586486AD0D1175F8656013110B714E CALLER DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1F0D JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F4A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1F2F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1F77 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1F94 DUP6 DUP6 DUP6 DUP6 PUSH2 0x40B7 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x1FB1 DUP9 DUP9 DUP9 DUP9 PUSH2 0x4110 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1FE2 DUP9 DUP9 DUP9 DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x43E2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 MLOAD SWAP3 POP PUSH1 0x20 RETURNDATASIZE ADD DUP4 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x2008 DUP3 DUP3 DUP7 PUSH2 0x442E JUMP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x20 DUP4 MUL PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2064 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x208F JUMPI DUP1 DUP6 ADD SLOAD DUP1 PUSH1 0x20 DUP4 MUL PUSH1 0x20 DUP6 ADD ADD MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x206A JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20BA PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2121 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2150 JUMPI PUSH2 0x214F PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x220D JUMPI PUSH2 0x220C PUSH32 0x4753313032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xECDF3A3EFFEA5783A3C4C2140E677577666428D44ED9D474A0B3A4C9943F8440 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x23B8 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0x23EC JUMPI PUSH2 0x23EB PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x241F JUMPI PUSH2 0x241E PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0x610F7FF2B304AE8903C3DE74C60C6AB1F7D6226B3F52C5161905BB5AD4039C93 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x5 SLOAD CALLER PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH32 0x66753CD2356569EE081232E3BE8909B950E0A76C1F8460C3A5E3C2BE32B11BED DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP13 PUSH1 0x40 MLOAD DUP1 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP11 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2515 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 SUB DUP5 MSTORE DUP15 DUP15 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP5 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25CF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25B4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x25FC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP5 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2635 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x261A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2662 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP16 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x268F DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x456F JUMP JUMPDEST SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x2700 JUMPI PUSH2 0x26FF PUSH32 0x4753303031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x270C CALLER DUP6 DUP5 DUP5 PUSH2 0x18CD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x272F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x275E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x28B2 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2809 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x2 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x27C8 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD DUP6 GAS DELEGATECALL PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE RETURNDATASIZE PUSH1 0x20 DUP3 ADD MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x40 DUP4 ADD RETURNDATACOPY PUSH1 0x40 RETURNDATASIZE ADD DUP2 REVERT JUMPDEST PUSH2 0x2933 DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP10 PUSH2 0x4A06 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2971 JUMPI PUSH2 0x2970 DUP5 PUSH2 0x4DAD JUMP JUMPDEST JUMPDEST PUSH2 0x29BF DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x4E31 JUMP JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x29D9 JUMPI PUSH2 0x29D7 DUP3 PUSH1 0x0 PUSH1 0x1 DUP7 DUP6 PUSH2 0x503B JUMP JUMPDEST POP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP12 DUP12 DUP12 DUP12 DUP10 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2AED JUMPI POP PUSH2 0x2AEB DUP5 PUSH2 0x1CF1 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2B1C JUMPI PUSH2 0x2B1B PUSH32 0x4753313035000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 EQ ISZERO PUSH2 0x2B4F JUMPI PUSH2 0x2B4E PUSH32 0x4753313036000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2B66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B95 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2C67 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2C72 JUMPI POP DUP4 DUP2 LT JUMPDEST ISZERO PUSH2 0x2D2D JUMPI DUP2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2BFD JUMP JUMPDEST PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2D7B JUMPI DUP3 PUSH1 0x1 DUP3 SUB DUP2 MLOAD DUP2 LT PUSH2 0x2D70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST DUP1 DUP4 MSTORE POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2E44 JUMPI PUSH2 0x2E43 PUSH32 0x4753303330000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xF2A0EB156472D1440255B0D7C1E19CC07115D1051FE605B0DCE69ACFEC884D9C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF6 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x51EF JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2F16 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2F7D JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2FAC JUMPI PUSH2 0x2FAB PUSH32 0x4753313031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3068 JUMPI PUSH2 0x3067 PUSH32 0x4753313033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAB4FA2B463F581B2B32CB3B7E3B704B9CE37CC209B5FB4D77E593ACE4054276 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x3213 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x3318 JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP ISZERO JUMPDEST ISZERO PUSH2 0x3347 JUMPI PUSH2 0x3346 PUSH32 0x4753333030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SSTORE DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1151116914515BC0891FF9047A6CB32CF902546F83066499BCF8BA33D2353FA2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x33B8 PUSH2 0x3D87 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x341F JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x3455 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3484 JUMPI PUSH2 0x3483 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3541 JUMPI PUSH2 0x3540 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x35A8 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x35D7 JUMPI PUSH2 0x35D6 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3693 JUMPI PUSH2 0x3692 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x391C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP4 PUSH2 0x26C6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3928 PUSH2 0x3D87 JUMP JUMPDEST PUSH2 0x3931 DUP2 PUSH2 0x4DAD JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5AC6C46C93C8D0E53714BA3B53DB3E7C046DA994313D7ED0D192028BC7C228B0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CHAINID SWAP1 POP PUSH32 0x47E79534A245952E8B16893A336B85A3D9EA9FA8C573F3D803AFB92A79469218 PUSH1 0x0 SHL DUP2 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x39FB PUSH2 0x3D87 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x3 SLOAD SUB LT ISZERO PUSH2 0x3A32 JUMPI PUSH2 0x3A31 PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3A99 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x3AC8 JUMPI PUSH2 0x3AC7 PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3B84 JUMPI PUSH2 0x3B83 PUSH32 0x4753323035000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 SUB SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x3D49 JUMPI PUSH2 0x3D48 DUP2 PUSH2 0x23B0 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3DE4 JUMPI PUSH2 0x3DE3 PUSH32 0x4753303331000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x3E38 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3E59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x3E49 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3E54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP2 ADD DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x3EA4 PUSH1 0x20 DUP4 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x3ED4 JUMPI PUSH2 0x3ED3 PUSH32 0x4753303232000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MLOAD SWAP1 POP DUP3 MLOAD PUSH2 0x3F07 DUP3 PUSH2 0x3EF9 PUSH1 0x20 DUP7 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x3F37 JUMPI PUSH2 0x3F36 PUSH32 0x4753303233000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x60 PUSH1 0x20 DUP4 DUP6 ADD ADD SWAP1 POP PUSH4 0x1626BA7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1626BA7E DUP8 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3FDB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3FC0 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x4008 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x403A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4050 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x40AF JUMPI PUSH2 0x40AE PUSH32 0x4753303234000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x40C8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x4110 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x40F9 DUP8 DUP8 DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x43E2 JUMP JUMPDEST SWAP3 POP PUSH2 0x4106 DUP3 DUP3 DUP6 PUSH2 0x442E JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x411B PUSH2 0x53B6 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x41E6 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST PUSH2 0x4258 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4753313034000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x43D9 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x728C2972 DUP8 DUP8 DUP8 DUP8 CALLER PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x42F2 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x434B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4330 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x4378 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x439B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x43C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x43F0 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x43FC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4415 JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x4425 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x44D8 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x4526 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6895C13664AA4F67288B25D7A21D7AAA34916E355FB9B6FAE0A139A9085BECB8 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x456A JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xACD2C8702804128FDB0DB2BB49F6D127DD0181C13FD45DBFE16DE0930E2BD375 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4595 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH1 0x5 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE PUSH2 0x2EE1 JUMP JUMPDEST SWAP1 POP PUSH2 0x45A1 DUP2 DUP5 PUSH2 0x3902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45AB PUSH2 0x53B6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4791 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x75F0BB52 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 CALLER PUSH1 0x40 MLOAD DUP14 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP11 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x464E JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP14 DUP14 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4720 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4705 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x474D JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x478C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1F4 PUSH2 0x47B8 PUSH2 0x9C4 DUP12 ADD PUSH1 0x3F PUSH1 0x40 DUP14 MUL DUP2 PUSH2 0x47A9 JUMPI INVALID JUMPDEST DIV PUSH2 0x53DF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ADD GAS LT ISZERO PUSH2 0x47EA JUMPI PUSH2 0x47E9 PUSH32 0x4753303130000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x4853 DUP16 DUP16 DUP16 DUP16 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP15 PUSH1 0x0 DUP14 EQ PUSH2 0x4848 JUMPI DUP15 PUSH2 0x484E JUMP JUMPDEST PUSH2 0x9C4 GAS SUB JUMPDEST PUSH2 0x43E2 JUMP JUMPDEST SWAP4 POP PUSH2 0x4868 GAS DUP3 PUSH2 0x53F9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP4 ISZERO DUP1 ISZERO PUSH2 0x4878 JUMPI POP PUSH1 0x0 DUP11 EQ JUMPDEST DUP1 ISZERO PUSH2 0x4884 JUMPI POP PUSH1 0x0 DUP9 EQ JUMPDEST ISZERO PUSH2 0x48B3 JUMPI PUSH2 0x48B2 PUSH32 0x4753303133000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 DUP10 GT ISZERO PUSH2 0x48CD JUMPI PUSH2 0x48CA DUP3 DUP12 DUP12 DUP12 DUP12 PUSH2 0x503B JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x4910 JUMPI DUP4 PUSH32 0x442E715F626346E8C54381002DA614F62BEE8D27386535B2521EC8540898556E DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x4949 JUMP JUMPDEST DUP4 PUSH32 0x23428B18ACFB3EA64B08DC0C1D296EA9C09702C09083CA5272E64D115B687D23 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x49F5 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x93271368 DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x49F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD GT ISZERO PUSH2 0x4A3B JUMPI PUSH2 0x4A3A PUSH32 0x4753323030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP2 MLOAD DUP2 GT ISZERO PUSH2 0x4A6E JUMPI PUSH2 0x4A6D PUSH32 0x4753323031000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x4AA1 JUMPI PUSH2 0x4AA0 PUSH32 0x4753323032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x4D19 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4B32 JUMPI POP PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4B68 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x4B9E JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x4BCD JUMPI PUSH2 0x4BCC PUSH32 0x4753323033000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4C8A JUMPI PUSH2 0x4C89 PUSH32 0x4753323034000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 SWAP3 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4AAA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 MLOAD PUSH1 0x3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4E0B JUMPI PUSH2 0x4E0A PUSH32 0x4753343030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST DUP1 PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4EEF JUMPI PUSH2 0x4EEE PUSH32 0x4753313030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 PUSH1 0x1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5037 JUMPI PUSH2 0x4FAB DUP3 PUSH2 0x5419 JUMP JUMPDEST PUSH2 0x4FD9 JUMPI PUSH2 0x4FD8 PUSH32 0x4753303032000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST PUSH2 0x5008 DUP3 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x43E2 JUMP JUMPDEST PUSH2 0x5036 JUMPI PUSH2 0x5035 PUSH32 0x4753303030000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5078 JUMPI DUP3 PUSH2 0x507A JUMP JUMPDEST ORIGIN JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5184 JUMPI PUSH2 0x50E4 GASPRICE DUP7 LT PUSH2 0x50C1 JUMPI GASPRICE PUSH2 0x50C3 JUMP JUMPDEST DUP6 JUMPDEST PUSH2 0x50D6 DUP9 DUP11 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5146 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x514B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x517E JUMPI PUSH2 0x517D PUSH32 0x4753303131000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST POP PUSH2 0x51E5 JUMP JUMPDEST PUSH2 0x51A9 DUP6 PUSH2 0x519B DUP9 DUP11 PUSH2 0x5397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3E25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x51B6 DUP5 DUP3 DUP5 PUSH2 0x542C JUMP JUMPDEST PUSH2 0x51E4 JUMPI PUSH2 0x51E3 PUSH32 0x4753303132000000000000000000000000000000000000000000000000000000 PUSH2 0x3DE6 JUMP JUMPDEST JUMPDEST JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xBB8310D486368DB6BD6F849402FDD73AD53D316B5A4B2644AD6EFE0F941286D8 PUSH1 0x0 SHL DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5280 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL PUSH2 0x530C PUSH2 0x3977 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x53AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x53EF JUMPI DUP2 PUSH2 0x53F1 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x5408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x20 PUSH1 0x0 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 DUP10 PUSH2 0x2710 GAS SUB CALL RETURNDATASIZE PUSH1 0x0 DUP2 EQ PUSH2 0x54D3 JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0x54DB JUMPI PUSH1 0x0 SWAP4 POP PUSH2 0x54E6 JUMP JUMPDEST DUP2 SWAP4 POP PUSH2 0x54E6 JUMP JUMPDEST PUSH1 0x0 MLOAD ISZERO DUP3 ISZERO OR ISZERO SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F POP 0xC7 SWAP12 PUSH14 0xB946A8DC609A3FFCF9AAE2333691 SWAP3 0x24 0x1E DELEGATECALL 0x1E PUSH3 0x4D069F MULMOD 0xC8 0xD XOR PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"431:1976:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;551:10:8;538:35;;;563:9;538:35;;;;;;;;;;;;;;;;;;431:1976:1;;;;;;;;;;;;3556:29:4;3550:36;3610:7;3600:2;;3647:1;3644;3637:12;3600:2;3694:4;3688:11;3733:14;3730:1;3725:3;3712:36;3981:8;3977:2;3973:17;3956:14;3951:3;3947:24;3940:51;4142:1;4139;4134:2;4118:14;4114:23;4109:3;4106:1;4097:7;4090:5;4085:59;4181:16;4178:1;4173:3;4158:40;4221:7;4211:2;;4260:16;4255:3;4248:29;4211:2;4316:16;4311:3;4304:29;2220:658:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12811:3372:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6171:160:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5155:150:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2059:346:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5003:1128:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;799:556:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3351:58:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3546:459:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4589:392:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1115:914:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3521:78:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12390:390;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5344:446:7;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3170:29:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1988:666:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4011:1160:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6371:1654:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16214:249:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;18537:487;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4045:456:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3325:437:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3697:853:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5020:96;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12212:147:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2270:170:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;16494:381:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2917:741:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2568:49:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2220:658:7;594:17:10;:15;:17::i;:::-;2418:1:7::1;2401:19;;:5;:19;;;:47;;;;647:3;2424:24;;:5;:24;;;2401:47;:73;;;;2469:4;2452:22;;:5;:22;;;2401:73;2397:103;;;2476:24;;:15;:24::i;:::-;2397:103;2579:1;2554:27;;:6;:13;2561:5;2554:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;2550:57;;2583:24;;:15;:24::i;:::-;2550:57;2633:6;:23;647:3;2633:23;;;;;;;;;;;;;;;;;;;;;;;;;2617:6;:13;2624:5;2617:13;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;;;;;;;2692:5;2666:6;:23;647:3;2666:23;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;2707:10;;:12;;;;;;;;;;;;;2745:5;2734:17;;;;;;;;;;;;2832:10;2819:9;;:23;2815:56;;2844:27;2860:10;2844:15;:27::i;:::-;2815:56;2220:658:::0;;:::o;12811:3372:0:-;13086:26;13109:2;13086:18;:22;;:26;;;;:::i;:::-;13066:10;:17;:46;13062:76;;;13114:24;;:15;:24::i;:::-;13062:76;13200:17;13240:20;13270:9;13388;13407;13426;13445:2732;13461:18;13457:1;:22;13445:2732;;;13512:29;13527:10;13539:1;13512:14;:29::i;:::-;13500:41;;;;;;;;;;;;;;;;;13564:1;13559;:6;13555:2416;;;13784:1;13776:10;;13745:43;;14184:26;14207:2;14184:18;:22;;:26;;;;:::i;:::-;14179:1;14171:10;;:39;14167:69;;;14212:24;;:15;:24::i;:::-;14167:69;14731:70;14754:12;14768:8;14778:10;14798:1;14790:10;;14731:22;:70::i;:::-;13555:2416;;;14831:1;14826;:6;14822:1149;;;15043:1;15035:10;;15004:43;;15226:12;15214:24;;:8;:24;;;;:71;;;;;15284:1;15242:14;:28;15257:12;15242:28;;;;;;;;;;;;;;;:38;15271:8;15242:38;;;;;;;;;;;;:43;15214:71;15210:101;;;15287:24;;:15;:24::i;:::-;15210:101;14822:1149;;;15340:2;15336:1;:6;15332:639;;;15613:104;15686:8;15633:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15623:73;;;;;;15708:1;15704;:5;15712:1;15715;15613:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15598:119;;15332:639;;;15921:35;15931:8;15947:1;15951;15954;15921:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15906:50;;15332:639;14822:1149;13555:2416;16004:9;15988:25;;:12;:25;;;;:63;;;;16049:1;16017:34;;:6;:20;16024:12;16017:20;;;;;;;;;;;;;;;;;;;;;;;;;:34;;;15988:63;:98;;;;647:3:7;16055:31:0;;:12;:31;;;15988:98;15984:144;;;16104:24;;:15;:24::i;:::-;15984:144;16154:12;16142:24;;13481:3;;;;;;;13445:2732;;;12811:3372;;;;;;;;;;:::o;6171:160:6:-;6242:4;6285:6;6265:26;;985:3;6265:26;;;;:59;;;;;6322:1;6295:29;;:7;:15;6303:6;6295:15;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;;6265:59;6258:66;;6171:160;;;:::o;5155:150:7:-;5217:4;647:3;5242:24;;:5;:24;;;:55;;;;5295:1;5270:27;;:6;:13;5277:5;5270:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;5242:55;5240:58;5233:65;;5155:150;;;:::o;2059:346:1:-;2229:12;2258:61;2280:10;2292:2;2296:5;2303:4;2309:9;2258:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2339:59;2371:2;2375:5;2382:4;2388:9;2339:31;:59::i;:::-;2329:69;;2059:346;;;;;;:::o;5003:1128:6:-;5183:12;5197:23;5233:13;5248:17;5269:46;5288:2;5292:5;5299:4;5305:9;5269:18;:46::i;:::-;5232:83;;;;5335:54;5343:2;5347:5;5354:4;5360:9;5371:17;5335:7;:54::i;:::-;5325:64;;5575:4;5569:11;5555:25;;5824:4;5806:16;5802:27;5790:10;5786:44;5780:4;5773:58;5893:16;5881:10;5874:36;5994:16;5991:1;5984:4;5972:10;5968:21;5953:58;6078:46;6098:5;6105:9;6116:7;6078:19;:46::i;:::-;5003:1128;;;;;;;;;:::o;799:556:13:-;874:12;898:19;939:2;930:6;:11;920:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;898:44;;957:13;952:374;984:6;976:5;:14;952:374;;;1172:5;1164:6;1160:18;1154:25;1245:4;1237;1230:5;1226:16;1219:4;1211:6;1207:17;1203:40;1196:54;1124:140;992:7;;;;;;;952:374;;;;1342:6;1335:13;;;799:556;;;;:::o;3351:58:0:-;;;;;;;;;;;;;;;;;:::o;3546:459:6:-;594:17:10;:15;:17::i;:::-;3697:1:6::1;3679:20;;:6;:20;;;:50;;;;985:3;3703:26;;:6;:26;;;3679:50;3675:80;;;3731:24;;:15;:24::i;:::-;3675:80;3837:1;3810:29;;:7;:15;3818:6;3810:15;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;3806:59;;3841:24;;:15;:24::i;:::-;3806:59;3893:7;:25;985:3;3893:25;;;;;;;;;;;;;;;;;;;;;;;;;3875:7;:15;3883:6;3875:15;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;;;;;;3956:6;3928:7;:25;985:3;3928:25;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;3991:6;3977:21;;;;;;;;;;;;3546:459:::0;:::o;4589:392:7:-;594:17:10;:15;:17::i;:::-;4757:10:7::1;;4744;:23;4740:53;;;4769:24;;:15;:24::i;:::-;4740:53;4873:1;4859:10;:15;4855:45;;;4876:24;;:15;:24::i;:::-;4855:45;4922:10;4910:9;:22;;;;4947:27;4964:9;;4947:27;;;;;;;;;;;;;;;;;;4589:392:::0;:::o;1115:914:1:-;1462:4;1478:27;1557:5;;1564:10;1576:9;;1546:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1529:57;;1611:277;1648:2;1664:5;1683:4;;1701:9;1724;1747:7;1768:8;1790;1812:14;1840:10;1864:14;1611:277;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1905:117;1927:2;1931:5;1938:4;;1944:9;1955;1966:7;1975:8;1985;1995:14;2011:10;1905:21;:117::i;:::-;1898:124;;;1115:914;;;;;;;;;;;;;:::o;3521:78:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12390:390::-;12575:18;12596:9;;12575:30;;12674:1;12660:10;:15;12656:45;;;12677:24;;:15;:24::i;:::-;12656:45;12711:62;12728:10;12740:8;12750:10;12762;12711:16;:62::i;:::-;12390:390;;;;:::o;5344:446:7:-;5395:16;5423:22;5462:10;;5448:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5423:50;;5517:13;5544:20;5567:6;:23;647:3;5567:23;;;;;;;;;;;;;;;;;;;;;;;;;5544:46;;5600:162;647:3;5607:31;;:12;:31;;;5600:162;;5669:12;5654:5;5660;5654:12;;;;;;;;;;;;;:27;;;;;;;;;;;5710:6;:20;5717:12;5710:20;;;;;;;;;;;;;;;;;;;;;;;;;5695:35;;5744:7;;;;;;;5600:162;;;5778:5;5771:12;;;;;5344:446;:::o;3170:29:0:-;;;;:::o;1988:666:13:-;2309:1;2306;2288:15;2282:22;2275:4;2258:15;2254:26;2238:14;2231:5;2218:93;2382:4;2376:11;2412:7;2407:3;2400:20;2456:16;2449:4;2444:3;2440:14;2433:40;2520:16;2517:1;2510:4;2505:3;2501:14;2486:51;2584:4;2566:16;2562:27;2557:3;2550:40;4011:1160:0;4419:32;4431:7;;4419:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4440:10;4419:11;:32::i;:::-;4492:1;4465:29;;:15;:29;;;4461:78;;4496:43;4523:15;4496:26;:43::i;:::-;4461:78;4674:22;4687:2;4691:4;;4674:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:22::i;:::-;4721:1;4711:7;:11;4707:380;;;5017:59;5031:7;5040:1;5043;5046:12;5060:15;5017:13;:59::i;:::-;;4707:380;5111:10;5101:63;;;5123:7;;5132:10;5144:2;5148:15;5101:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4011:1160;;;;;;;;;;:::o;6371:1654:6:-;6465:22;6489:12;985:3;6517:25;;:5;:25;;;;:52;;;;;6547:22;6563:5;6547:15;:22::i;:::-;6546:23;6517:52;6513:82;;;6571:24;;:15;:24::i;:::-;6513:82;6621:1;6609:8;:13;6605:43;;;6624:24;;:15;:24::i;:::-;6605:43;6721:8;6707:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6699:31;;6774:19;6814:7;:14;6822:5;6814:14;;;;;;;;;;;;;;;;;;;;;;;;;6807:21;;6838:192;6861:1;6845:18;;:4;:18;;;;:46;;;;;985:3;6867:24;;:4;:24;;;;6845:46;:72;;;;;6909:8;6895:11;:22;6845:72;6838:192;;;6954:4;6933:5;6939:11;6933:18;;;;;;;;;;;;;:25;;;;;;;;;;;6979:7;:13;6987:4;6979:13;;;;;;;;;;;;;;;;;;;;;;;;;6972:20;;7006:13;;;;;;;6838:192;;;985:3;7685:24;;:4;:24;;;7681:84;;7732:5;7752:1;7738:11;:15;7732:22;;;;;;;;;;;;;;7725:29;;7681:84;7949:11;7942:5;7935:26;7921:50;;;;;;:::o;16214:249:0:-;16320:1;16290:32;;:6;:18;16297:10;16290:18;;;;;;;;;;;;;;;;;;;;;;;;;:32;;;16286:62;;;16324:24;;:15;:24::i;:::-;16286:62;16402:1;16358:14;:26;16373:10;16358:26;;;;;;;;;;;;;;;:41;16385:13;16358:41;;;;;;;;;;;:45;;;;16445:10;16418:38;;16430:13;16418:38;;;;;;;;;;16214:249;:::o;18537:487::-;18867:7;18903:113;18925:2;18929:5;18936:4;;18942:9;18953;18964:7;18973:8;18983;18993:14;19009:6;18903:21;:113::i;:::-;18893:124;;;;;;18886:131;;18537:487;;;;;;;;;;;;;:::o;4045:456:6:-;594:17:10;:15;:17::i;:::-;4245:1:6::1;4227:20;;:6;:20;;;:50;;;;985:3;4251:26;;:6;:26;;;4227:50;4223:80;;;4279:24;;:15;:24::i;:::-;4223:80;4340:6;4317:29;;:7;:19;4325:10;4317:19;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;4313:59;;4348:24;;:15;:24::i;:::-;4313:59;4404:7;:15;4412:6;4404:15;;;;;;;;;;;;;;;;;;;;;;;;;4382:7;:19;4390:10;4382:19;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;4455:1;4429:7;:15;4437:6;4429:15;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;4487:6;4472:22;;;;;;;;;;;;4045:456:::0;;:::o;3325:437:5:-;594:17:10;:15;:17::i;:::-;3418:1:5::1;3401:19;;:5;:19;;;;:79;;;;;3431:5;3425:30;;;3456:23;3425:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;3424:56;3401:79;3397:109;;;3482:24;;:15;:24::i;:::-;3397:109;3658:5;3638:18;3631:33;3749:5;3736:19;;;;;;;;;;;;3325:437:::0;:::o;3697:853:7:-;594:17:10;:15;:17::i;:::-;3906:1:7::1;3886:22;;:8;:22;;;:53;;;;647:3;3912:27;;:8;:27;;;3886:53;:82;;;;3963:4;3943:25;;:8;:25;;;3886:82;3882:112;;;3970:24;;:15;:24::i;:::-;3882:112;4076:1;4048:30;;:6;:16;4055:8;4048:16;;;;;;;;;;;;;;;;;;;;;;;;;:30;;;4044:60;;4080:24;;:15;:24::i;:::-;4044:60;4221:1;4201:22;;:8;:22;;;:53;;;;647:3;4227:27;;:8;:27;;;4201:53;4197:83;;;4256:24;;:15;:24::i;:::-;4197:83;4315:8;4294:29;;:6;:17;4301:9;4294:17;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;4290:59;;4325:24;;:15;:24::i;:::-;4290:59;4378:6;:16;4385:8;4378:16;;;;;;;;;;;;;;;;;;;;;;;;;4359:6;:16;4366:8;4359:16;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;4424:8;4404:6;:17;4411:9;4404:17;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;4469:1;4442:6;:16;4449:8;4442:16;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;4499:8;4486:22;;;;;;;;;;;;4534:8;4523:20;;;;;;;;;;;;3697:853:::0;;;:::o;5020:96::-;5074:7;5100:9;;5093:16;;5020:96;:::o;12212:147:0:-;12311:41;12327:8;12311:41;;;;;;;;;;;;12341:10;12311:15;:41::i;:::-;12212:147;;:::o;2270:170:4:-;594:17:10;:15;:17::i;:::-;2352:35:4::1;2379:7;2352:26;:35::i;:::-;2425:7;2402:31;;;;;;;;;;;;2270:170:::0;:::o;16494:381:0:-;16551:7;16570:15;16721:9;16710:20;;2774:66;16826:25;;16853:7;16862:4;16815:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16805:63;;;;;;16798:70;;;16494:381;:::o;2917:741:7:-;594:17:10;:15;:17::i;:::-;3127:10:7::1;3123:1;3110:10;;:14;:27;3106:57;;;3139:24;;:15;:24::i;:::-;3106:57;3274:1;3257:19;;:5;:19;;;:47;;;;647:3;3280:24;;:5;:24;;;3257:47;3253:77;;;3306:24;;:15;:24::i;:::-;3253:77;3365:5;3344:26;;:6;:17;3351:9;3344:17;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;3340:56;;3372:24;;:15;:24::i;:::-;3340:56;3426:6;:13;3433:5;3426:13;;;;;;;;;;;;;;;;;;;;;;;;;3406:6;:17;3413:9;3406:17;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;3473:1;3449:6;:13;3456:5;3449:13;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;3485:10;;:12;;;;;;;;;;;;;;3525:5;3512:19;;;;;;;;;;;;3612:10;3599:9;;:23;3595:56;;3624:27;3640:10;3624:15;:27::i;:::-;3595:56;2917:741:::0;;;:::o;2568:49:0:-;;;;;;;;;;;;;;;;;;;:::o;325:114:10:-;401:4;379:27;;:10;:27;;;375:57;;408:24;;:15;:24::i;:::-;375:57;325:114::o;591:707:34:-;786:4;780:11;816:66;811:3;804:79;958:4;951;946:3;942:14;935:28;1016:4;1009;1004:3;1000:14;993:28;1102:5;1095:4;1090:3;1086:14;1079:29;1150:4;1145:3;1138:17;382:421:19;440:7;685:1;680;:6;676:45;;;709:1;702:8;;;;676:45;731:9;747:1;743;:5;731:17;;775:1;770;766;:5;;;;;;:10;758:19;;;;;;795:1;788:8;;;382:421;;;;;:::o;947:543:11:-;1032:7;1041:9;1052;1218:3;1212:4;1208:14;1280:4;1266:12;1262:23;1250:10;1246:40;1240:47;1235:52;;1345:4;1331:12;1327:23;1315:10;1311:40;1305:47;1300:52;;1418:4;1404:12;1400:23;1388:10;1384:40;1378:47;1375:1;1370:56;1365:61;;1174:262;;;;;;:::o;10800:1381:0:-;11056:10;:17;11039:14;11050:2;11039:6;:10;;:14;;;;:::i;:::-;:34;11035:64;;;11075:24;;:15;:24::i;:::-;11035:64;11227:28;11439:4;11430:6;11418:10;11414:23;11410:34;11404:41;11380:65;;11559:10;:17;11516:40;11535:20;11516:14;11527:2;11516:6;:10;;:14;;;;:::i;:::-;:18;;:40;;;;:::i;:::-;:60;11512:90;;;11578:24;;:15;:24::i;:::-;11512:90;11640:30;11976:4;11967:6;11955:10;11951:23;11947:34;11926:55;;269:10:32;12129:19:0;;12053:95;;;12073:5;12053:43;;;12097:8;12107:17;12053:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:95;;;;12049:125;;12150:24;;:15;:24::i;:::-;12049:125;10800:1381;;;;;;:::o;4541:422:6:-;4719:12;4744:13;4759:17;4780:46;4799:2;4803:5;4810:4;4816:9;4780:18;:46::i;:::-;4743:83;;;;4846:54;4854:2;4858:5;4865:4;4871:9;4882:17;4846:7;:54::i;:::-;4836:64;;4910:46;4930:5;4937:9;4948:7;4910:19;:46::i;:::-;4541:422;;;;;;;;:::o;2288:517::-;2444:13;2459:17;2496:10;:8;:10::i;:::-;2488:18;;985:3;2574:30;;:10;:30;;;;:67;;;;;2639:1;2608:33;;:7;:19;2616:10;2608:19;;;;;;;;;;;;;;;;;;;;;;;;;:33;;;;2574:67;2566:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2683:1;2666:19;;:5;:19;;;2662:137;;2719:5;2713:35;;;2749:2;2753:5;2760:4;2766:9;2777:10;2713:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2701:87;;2662:137;2288:517;;;;;;;:::o;798:823:3:-;966:12;1007:27;994:40;;;;;;;;:9;:40;;;;;;;;;990:625;;;1245:1;1242;1235:4;1229:11;1222:4;1216;1212:15;1208:2;1201:5;1188:59;1177:70;;1159:102;;;1537:1;1534;1527:4;1521:11;1514:4;1508;1504:15;1497:5;1493:2;1486:5;1481:58;1470:69;;1452:101;798:823;;;;;;;:::o;3178:328:6:-;3295:1;3278:19;;:5;:19;;;3274:102;;3319:5;3313:32;;;3346:9;3357:7;3313:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3274:102;3389:7;3385:114;;;3430:10;3403:38;;;;;;;;;;;;3385:114;;;3488:10;3461:38;;;;;;;;;;;;3385:114;3178:328;;;:::o;5202:3538:0:-;5557:12;5581:14;5717:485;5773:2;5793:5;5816:4;;5838:9;5865;5924:7;5949:8;5975;6001:14;6181:5;;:7;;;;;;;;;;;;5717:18;:485::i;:::-;5708:494;;6216:35;6232:6;6240:10;6216:15;:35::i;:::-;6271:13;6287:10;:8;:10::i;:::-;6271:26;;6342:1;6325:19;;:5;:19;;;6321:547;;6370:5;6364:29;;;6455:2;6479:5;6506:4;;6532:9;6563;6630:7;6659:8;6689;6719:14;6793:10;6825;6364:489;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6321:547;7226:3;7178:45;7218:4;7206:9;:16;7198:2;7192;7180:9;:14;7179:21;;;;;;7178:27;;:45;;;;:::i;:::-;:51;7166:9;:63;7162:93;;;7231:24;;:15;:24::i;:::-;7162:93;7368:15;7386:9;7368:27;;7674:83;7682:2;7686:5;7693:4;;7674:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7699:9;7722:1;7710:8;:13;:46;;7747:9;7710:46;;;7739:4;7727:9;:16;7710:46;7674:7;:83::i;:::-;7664:93;;7781:22;7793:9;7781:7;:11;;:22;;;;:::i;:::-;7771:32;;8084:7;8083:8;:26;;;;;8108:1;8095:9;:14;8083:26;:43;;;;;8125:1;8113:8;:13;8083:43;8079:73;;;8128:24;;:15;:24::i;:::-;8079:73;8301:15;8349:1;8338:8;:12;8334:128;;;8380:67;8394:7;8403;8412:8;8422;8432:14;8380:13;:67::i;:::-;8370:77;;8334:128;8479:7;8475:108;;;8510:6;8493:33;8518:7;8493:33;;;;;;;;;;;;;;;;;;8475:108;;;8567:6;8550:33;8575:7;8550:33;;;;;;;;;;;;;;;;;;8475:108;5202:3538;;8638:1;8621:19;;:5;:19;;;8617:107;;8666:5;8660:32;;;8693:6;8701:7;8660:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8617:107;5202:3538;;;;;;;;;;;;;;;:::o;971:1210:7:-;1197:1;1185:9;;:13;1181:43;;;1200:24;;:15;:24::i;:::-;1181:43;1326:7;:14;1313:10;:27;1309:57;;;1342:24;;:15;:24::i;:::-;1309:57;1446:1;1432:10;:15;1428:45;;;1449:24;;:15;:24::i;:::-;1428:45;1520:20;647:3;1520:38;;1573:9;1568:490;1592:7;:14;1588:1;:18;1568:490;;;1672:13;1688:7;1696:1;1688:10;;;;;;;;;;;;;;1672:26;;1733:1;1716:19;;:5;:19;;;:47;;;;647:3;1739:24;;:5;:24;;;1716:47;:73;;;;1784:4;1767:22;;:5;:22;;;1716:73;:98;;;;1809:5;1793:21;;:12;:21;;;1716:98;1712:144;;;1832:24;;:15;:24::i;:::-;1712:144;1943:1;1918:27;;:6;:13;1925:5;1918:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;1914:57;;1947:24;;:15;:24::i;:::-;1914:57;2008:5;1985:6;:20;1992:12;1985:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;2042:5;2027:20;;1568:490;1608:3;;;;;;;1568:490;;;;647:3;2067:6;:20;2074:12;2067:20;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;2128:7;:14;2115:10;:27;;;;2164:10;2152:9;:22;;;;971:1210;;;:::o;738:1490:4:-;1961:4;1942:24;;:7;:24;;;1938:54;;;1968:24;;:15;:24::i;:::-;1938:54;2156:7;2125:29;2118:46;2104:70;:::o;1347:488:6:-;1460:1;1423:39;;:7;:25;985:3;1423:25;;;;;;;;;;;;;;;;;;;;;;;;;:39;;;1419:69;;1464:24;;:15;:24::i;:::-;1419:69;985:3;1498:7;:25;985:3;1498:25;;;;;;;;;;;;;;;;:44;;;;;;;;;;;;;;;;;;1570:1;1556:16;;:2;:16;;;1552:277;;1593:14;1604:2;1593:10;:14::i;:::-;1588:45;;1609:24;;:15;:24::i;:::-;1588:45;1724:68;1732:2;1736:1;1739:4;1745:27;1774:17;1724:7;:68::i;:::-;1719:99;;1794:24;;:15;:24::i;:::-;1719:99;1552:277;1347:488;;:::o;9265:923:0:-;9453:15;9533:24;9586:1;9560:28;;:14;:28;;;:66;;9612:14;9560:66;;;9599:9;9560:66;9533:93;;9660:1;9640:22;;:8;:22;;;9636:546;;;9806:73;9842:11;9831:8;:22;:47;;9867:11;9831:47;;;9856:8;9831:47;9806:20;9818:7;9806;:11;;:20;;;;:::i;:::-;:24;;:73;;;;:::i;:::-;9796:83;;9894:18;9918:8;:13;;9939:7;9918:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9893:58;;;9970:13;9965:44;;9985:24;;:15;:24::i;:::-;9965:44;9636:546;;;;10050:34;10075:8;10050:20;10062:7;10050;:11;;:20;;;;:::i;:::-;:24;;:34;;;;:::i;:::-;10040:44;;10103:42;10117:8;10127;10137:7;10103:13;:42::i;:::-;10098:73;;10147:24;;:15;:24::i;:::-;10098:73;9636:546;9265:923;;;;;;;;:::o;17683:823::-;18008:12;18032:18;3097:66;18104:16;;18138:2;18158:5;18191:4;;18181:15;;;;;;;;;;;;;;;;;;;;;;;;;;;18214:9;18241;18268:7;18293:8;18319;18345:14;18377:6;18076:321;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18053:354;;;;;;18032:375;;18448:4;18441:12;;18462:4;18455:12;;18469:17;:15;:17::i;:::-;18488:10;18424:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18417:82;;;17683:823;;;;;;;;;;;;;:::o;1335:145:19:-;1393:7;1412:9;1428:1;1424;:5;1412:17;;1452:1;1447;:6;;1439:15;;;;;;1472:1;1465:8;;;1335:145;;;;:::o;4126:281:5:-;4169:13;4324:18;4318:25;4309:34;;4295:58;:::o;1646:105:19:-;1704:7;1735:1;1730;:6;;:14;;1743:1;1730:14;;;1739:1;1730:14;1723:21;;1646:105;;;;:::o;1025:145::-;1083:7;1115:1;1110;:6;;1102:15;;;;;;1127:9;1143:1;1139;:5;1127:17;;1162:1;1155:8;;;1025:145;;;;:::o;8330:330:6:-;8390:4;8406:12;8563:7;8551:20;8543:28;;8652:1;8645:4;:8;8638:15;;;8330:330;;;:::o;763:988:9:-;853:16;942:17;985:10;997:8;1007:6;962:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;942:72;;1388:4;1385:1;1378:4;1372:11;1365:4;1359;1355:15;1352:1;1345:5;1337;1330;1326:17;1321:72;1413:16;1447:1;1442:61;;;;1521:4;1516:102;;;;1672:1;1657:16;;1406:281;;1442:61;1482:7;1467:22;;1442:61;;1516:102;1599:1;1593:8;1586:16;1576:7;1569:15;1566:37;1559:45;1544:60;;1406:281;;1125:572;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"4359600","executionCost":"25065","totalCost":"4384665"},"external":{"":"infinite","VERSION()":"infinite","addOwnerWithThreshold(address,uint256)":"infinite","approveHash(bytes32)":"22977","approvedHashes(address,bytes32)":"1328","changeThreshold(uint256)":"23108","checkNSignatures(address,bytes32,bytes,uint256)":"infinite","checkSignatures(bytes32,bytes)":"infinite","checkSignatures(bytes32,bytes,bytes)":"infinite","disableModule(address,address)":"45477","domainSeparator()":"490","enableModule(address)":"45399","execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":"infinite","execTransactionFromModule(address,uint256,bytes,uint8)":"infinite","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"infinite","getModulesPaginated(address,uint256)":"infinite","getOwners()":"infinite","getStorageAt(uint256,uint256)":"infinite","getThreshold()":"1102","getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"infinite","isModuleEnabled(address)":"1396","isOwner(address)":"1345","nonce()":"1051","removeOwner(address,address,uint256)":"infinite","setFallbackHandler(address)":"21568","setGuard(address)":"infinite","setup(address[],uint256,address,bytes,address,address,uint256,address)":"infinite","signedMessages(bytes32)":"1209","simulateAndRevert(address,bytes)":"infinite","swapOwner(address,address,address)":"68664"}},"methodIdentifiers":{"VERSION()":"ffa1ad74","addOwnerWithThreshold(address,uint256)":"0d582f13","approveHash(bytes32)":"d4d9bdcd","approvedHashes(address,bytes32)":"7d832974","changeThreshold(uint256)":"694e80c3","checkNSignatures(address,bytes32,bytes,uint256)":"1fcac7f3","checkSignatures(bytes32,bytes)":"ed516d51","checkSignatures(bytes32,bytes,bytes)":"934f3a11","disableModule(address,address)":"e009cfde","domainSeparator()":"f698da25","enableModule(address)":"610b5925","execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":"6a761202","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getModulesPaginated(address,uint256)":"cc2f8452","getOwners()":"a0e67e2b","getStorageAt(uint256,uint256)":"5624b25b","getThreshold()":"e75235b8","getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"d8d11f78","isModuleEnabled(address)":"2d9ad53d","isOwner(address)":"2f54bf6e","nonce()":"affed0e0","removeOwner(address,address,uint256)":"f8dc5dd9","setFallbackHandler(address)":"f08a0323","setGuard(address)":"e19a9dd9","setup(address[],uint256,address,bytes,address,address,uint256,address)":"b63e800d","signedMessages(bytes32)":"5ae6bd37","simulateAndRevert(address,bytes)":"b4faba09","swapOwner(address,address,address)":"e318b52b"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"approvedHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ApproveHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"SafeModuleTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"additionalInfo\",\"type\":\"bytes\"}],\"name\":\"SafeMultiSigTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"}],\"name\":\"SafeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"SignMsg\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashToApprove\",\"type\":\"bytes32\"}],\"name\":\"approveHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"execTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"approveHash(bytes32)\":{\"details\":\"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\",\"params\":{\"hashToApprove\":\"The hash to mark as approved for signatures that are verified by this contract.\"}},\"changeThreshold(uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"checkNSignatures(address,bytes32,bytes,uint256)\":{\"details\":\"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\",\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"executor\":\"Address that executing the transaction.        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\",\"requiredSignatures\":\"Amount of required valid signatures.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes)\":{\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes,bytes)\":{\"details\":\"This function makes it compatible with previous versions.\",\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"disableModule(address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Previous module in the modules linked list.\"}},\"domainSeparator()\":{\"details\":\"Returns the domain separator for this contract, as defined in the EIP-712 standard.\",\"returns\":{\"_0\":\"bytes32 The domain separator hash.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.\",\"params\":{\"baseGas\":\"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload of Safe transaction.\",\"gasPrice\":\"Gas price that should be used for the payment calculation.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type of Safe transaction.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the Safe transaction.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"},\"returns\":{\"_0\":\"Boolean indicating transaction's success.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getModulesPaginated(address,uint256)\":{\"params\":{\"pageSize\":\"Maximum number of modules that should be returned. Has to be > 0\",\"start\":\"Start of the page. Has to be a module or start pointer (0x1 address)\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getStorageAt(uint256,uint256)\":{\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"getThreshold()\":{\"returns\":{\"_0\":\"Threshold number.\"}},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"params\":{\"_nonce\":\"Transaction nonce.\",\"baseGas\":\"Gas costs for data used to trigger the safe transaction.\",\"data\":\"Data payload.\",\"gasPrice\":\"Maximum gas price that should be used for this transaction.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the safe transaction.\",\"to\":\"Destination address.\",\"value\":\"Ether value.\"},\"returns\":{\"_0\":\"Transaction hash.\"}},\"isModuleEnabled(address)\":{\"returns\":{\"_0\":\"True if the module is enabled\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"Boolean if owner is an owner of the Safe.\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"setFallbackHandler(address)\":{\"details\":\"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}},\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"details\":\"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.\",\"params\":{\"_owners\":\"List of Safe owners.\",\"_threshold\":\"Number of required confirmations for a Safe transaction.\",\"data\":\"Data payload for optional delegate call.\",\"fallbackHandler\":\"Handler for fallback calls to this contract\",\"payment\":\"Value that should be paid\",\"paymentReceiver\":\"Address that should receive the payment (or 0 if tx.origin)\",\"paymentToken\":\"Token that should be used for the payment (0 is ETH)\",\"to\":\"Contract address for optional delegate call.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"swapOwner(address,address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"title\":\"SafeL2 - An implementation of the Safe contract that emits additional events on transaction executions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Returns the version of the Safe contract.\"},\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"approveHash(bytes32)\":{\"notice\":\"Marks hash `hashToApprove` as approved.\"},\"approvedHashes(address,bytes32)\":{\"notice\":\"Returns a uint if the messageHash is approved by the owner.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"checkNSignatures(address,bytes32,bytes,uint256)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"checkSignatures(bytes32,bytes)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"checkSignatures(bytes32,bytes,bytes)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\"},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"},\"getModulesPaginated(address,uint256)\":{\"notice\":\"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array.\"},\"getOwners()\":{\"notice\":\"Returns a list of Safe owners.\"},\"getStorageAt(uint256,uint256)\":{\"notice\":\"Reads `length` bytes of storage in the currents contract\"},\"getThreshold()\":{\"notice\":\"Returns the number of required confirmations for a Safe transaction aka the threshold.\"},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"notice\":\"Returns transaction hash to be signed by owners.\"},\"isModuleEnabled(address)\":{\"notice\":\"Returns if an module is enabled\"},\"isOwner(address)\":{\"notice\":\"Returns if `owner` is an owner of the Safe.\"},\"nonce()\":{\"notice\":\"Returns the nonce of the Safe contract.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"setFallbackHandler(address)\":{\"notice\":\"Set Fallback Handler to `handler` for the Safe.\"},\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"notice\":\"Sets an initial storage of the Safe contract.\"},\"signedMessages(bytes32)\":{\"notice\":\"Returns a uint if the messageHash is signed by the owner.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"notice\":\"For a more complete description of the Safe contract, please refer to the main Safe contract `Safe.sol`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeL2.sol\":\"SafeL2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Safe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Guard} from \\\"./base/GuardManager.sol\\\";\\nimport {ModuleManager} from \\\"./base/ModuleManager.sol\\\";\\nimport {OwnerManager} from \\\"./base/OwnerManager.sol\\\";\\nimport {FallbackManager} from \\\"./base/FallbackManager.sol\\\";\\nimport {NativeCurrencyPaymentFallback} from \\\"./common/NativeCurrencyPaymentFallback.sol\\\";\\nimport {Singleton} from \\\"./common/Singleton.sol\\\";\\nimport {SignatureDecoder} from \\\"./common/SignatureDecoder.sol\\\";\\nimport {SecuredTokenTransfer} from \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport {StorageAccessible} from \\\"./common/StorageAccessible.sol\\\";\\nimport {Enum} from \\\"./libraries/Enum.sol\\\";\\nimport {ISignatureValidator, ISignatureValidatorConstants} from \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport {SafeMath} from \\\"./external/SafeMath.sol\\\";\\nimport {ISafe} from \\\"./interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\\n * @dev Most important concepts:\\n *      - Threshold: Number of required confirmations for a Safe transaction.\\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\\n *        approve transactions. Managed in `OwnerManager`.\\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\\n *      For the events-based implementation see `SafeL2.sol`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract Safe is\\n    Singleton,\\n    NativeCurrencyPaymentFallback,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    ISafe\\n{\\n    using SafeMath for uint256;\\n\\n    string public constant override VERSION = \\\"1.4.1\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    uint256 public override nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public override signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public override approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\\n    constructor() {\\n        /**\\n         * By setting the threshold it is not possible to call setup anymore,\\n         * so we create a Safe with 0 owners and threshold 1.\\n         * This is an unusable Safe, perfect for the singleton\\n         */\\n        threshold = 1;\\n    }\\n\\n    // @inheritdoc ISafe\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external override {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual override returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            txHash = getTransactionHash( // Transaction info\\n                to,\\n                value,\\n                data,\\n                operation,\\n                safeTxGas,\\n                // Payment info\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                // Signature info\\n                // We use the post-increment here, so the current nonce value is used and incremented afterwards.\\n                nonce++\\n            );\\n            checkSignatures(txHash, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        if (gasleft() < ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500) revertWithError(\\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            if (!success && safeTxGas == 0 && gasPrice == 0) revertWithError(\\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles the payment for a Safe transaction.\\n     * @param gasUsed Gas used by the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return payment The amount of payment made in the specified token.\\n     */\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For native tokens, we will only adjust the gas price to not be higher than the actually used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            (bool refundSuccess, ) = receiver.call{value: payment}(\\\"\\\");\\n            if (!refundSuccess) revertWithError(\\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            if (!transferToken(gasToken, receiver, payment)) revertWithError(\\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the contract signature is valid. Reverts otherwise.\\n     * @dev This is extracted to a separate function for better compatibility with Certora's prover.\\n     *      More info here: https://github.com/safe-global/safe-smart-account/pull/661\\n     * @param owner Address of the owner used to sign the message\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     * @param offset Offset to the start of the contract signature in the signatures byte array\\n     */\\n    function checkContractSignature(address owner, bytes32 dataHash, bytes memory signatures, uint256 offset) internal view {\\n        // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n        if (offset.add(32) > signatures.length) revertWithError(\\\"GS022\\\");\\n\\n        // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n        uint256 contractSignatureLen;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            contractSignatureLen := mload(add(add(signatures, offset), 0x20))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        if (offset.add(32).add(contractSignatureLen) > signatures.length) revertWithError(\\\"GS023\\\");\\n\\n        // Check signature\\n        bytes memory contractSignature;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n            contractSignature := add(add(signatures, offset), 0x20)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        if (ISignatureValidator(owner).isValidSignature(dataHash, contractSignature) != EIP1271_MAGIC_VALUE) revertWithError(\\\"GS024\\\");\\n    }\\n\\n    // @inheritdoc ISafe\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) public view override {\\n        checkSignatures(dataHash, \\\"\\\", signatures);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) public view override {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        if (_threshold == 0) revertWithError(\\\"GS001\\\");\\n        checkNSignatures(msg.sender, dataHash, signatures, _threshold);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function checkNSignatures(\\n        address executor,\\n        bytes32 dataHash,\\n        bytes memory signatures,\\n        uint256 requiredSignatures\\n    ) public view override {\\n        // Check that the provided signature data is not too short\\n        if (signatures.length < requiredSignatures.mul(65)) revertWithError(\\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint256 v; // Implicit conversion from uint8 to uint256 will be done for v received from signatureSplit(...).\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                if (uint256(s) < requiredSignatures.mul(65)) revertWithError(\\\"GS021\\\");\\n\\n                // The contract signature check is extracted to a separate function for better compatibility with formal verification\\n                // A quote from the Certora team:\\n                // \\\"The assembly code broke the pointer analysis, which switched the prover in failsafe mode, where it is (a) much slower and (b) computes different hashes than in the normal mode.\\\"\\n                // More info here: https://github.com/safe-global/safe-smart-account/pull/661\\n                checkContractSignature(currentOwner, dataHash, signatures, uint256(s));\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                if (executor != currentOwner && approvedHashes[currentOwner][dataHash] == 0) revertWithError(\\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), uint8(v - 4), r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, uint8(v), r, s);\\n            }\\n            if (currentOwner <= lastOwner || owners[currentOwner] == address(0) || currentOwner == SENTINEL_OWNERS)\\n                revertWithError(\\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    // @inheritdoc ISafe\\n    function approveHash(bytes32 hashToApprove) external override {\\n        if (owners[msg.sender] == address(0)) revertWithError(\\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function domainSeparator() public view override returns (bytes32) {\\n        uint256 chainId;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, this));\\n    }\\n\\n    /**\\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash bytes.\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) private view returns (bytes memory) {\\n        bytes32 safeTxHash = keccak256(\\n            abi.encode(\\n                SAFE_TX_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                safeTxGas,\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    // @inheritdoc ISafe\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view override returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\",\"keccak256\":\"0xcfc43e753589ce56c42f1d18136a9c8356b6f5a85262c76a80ef02cba1058f00\",\"license\":\"LGPL-3.0-only\"},\"contracts/SafeL2.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Safe, Enum} from \\\"./Safe.sol\\\";\\n\\n/**\\n * @title SafeL2 - An implementation of the Safe contract that emits additional events on transaction executions.\\n * @notice For a more complete description of the Safe contract, please refer to the main Safe contract `Safe.sol`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeL2 is Safe {\\n    event SafeMultiSigTransaction(\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes signatures,\\n        // We combine nonce, sender and threshold into one to avoid stack too deep\\n        // Dev note: additionalInfo should not contain `bytes`, as this complicates decoding\\n        bytes additionalInfo\\n    );\\n\\n    event SafeModuleTransaction(address module, address to, uint256 value, bytes data, Enum.Operation operation);\\n\\n    // @inheritdoc Safe\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable override returns (bool) {\\n        bytes memory additionalInfo;\\n        {\\n            additionalInfo = abi.encode(nonce, msg.sender, threshold);\\n        }\\n        emit SafeMultiSigTransaction(\\n            to,\\n            value,\\n            data,\\n            operation,\\n            safeTxGas,\\n            baseGas,\\n            gasPrice,\\n            gasToken,\\n            refundReceiver,\\n            signatures,\\n            additionalInfo\\n        );\\n        return super.execTransaction(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures);\\n    }\\n\\n    // @inheritdoc Safe\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public override returns (bool success) {\\n        emit SafeModuleTransaction(msg.sender, to, value, data, operation);\\n        success = super.execTransactionFromModule(to, value, data, operation);\\n    }\\n}\\n\",\"keccak256\":\"0xb22e41693f0ba95076640540a6ab117077cc2d5dd4e3f48aecaae381e3c7d82b\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e0179af7f1475fead89a26badd804382f1661e82e0cc27f3cfa6b08ac970862\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IFallbackManager} from \\\"../interfaces/IFallbackManager.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized, IFallbackManager {\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        if (handler == address(this)) revertWithError(\\\"GS400\\\");\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    // @inheritdoc IFallbackManager\\n    function setFallbackHandler(address handler) public override authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // When compiled with the optimizer, the compiler relies on a certain assumptions on how the\\n            // memory is used, therefore we need to guarantee memory safety (keeping the free memory point 0x40 slot intact,\\n            // not going beyond the scratch space, etc)\\n            // Solidity docs: https://docs.soliditylang.org/en/latest/assembly.html#memory-safety\\n\\n            let handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\\n\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(add(ptr, calldatasize()), shl(96, caller()))\\n\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, ptr, add(calldatasize(), 20), 0, 0)\\n\\n            returndatacopy(ptr, 0, returndatasize())\\n            if iszero(success) {\\n                revert(ptr, returndatasize())\\n            }\\n            return(ptr, returndatasize())\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x07a3a038074e619472c3fe196a160a7e1e394523e7547812ec55f38f83e2edc5\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {Executor} from \\\"./Executor.sol\\\";\\nimport {GuardManager, Guard} from \\\"./GuardManager.sol\\\";\\nimport {IModuleManager} from \\\"../interfaces/IModuleManager.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor, GuardManager, IModuleManager {\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        if (modules[SENTINEL_MODULES] != address(0)) revertWithError(\\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            if (!isContract(to)) revertWithError(\\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            if (!execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max)) revertWithError(\\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Runs pre-execution checks for module transactions if a guard is enabled.\\n     * @param to Target address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return guard Guard to be used for checking.\\n     * @return guardHash Hash returned from the guard tx check.\\n     */\\n    function preModuleExecution(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (address guard, bytes32 guardHash) {\\n        guard = getGuard();\\n\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n\\n        if (guard != address(0)) {\\n            guardHash = Guard(guard).checkModuleTransaction(to, value, data, operation, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Runs post-execution checks for module transactions if a guard is enabled.\\n     * @param guardHash Hash returned from the guard during pre execution check.\\n     * @param success Boolean flag indicating if the call succeeded.\\n     * @param guard Guard to be used for checking.\\n     * @dev Emits event based on module transaction success.\\n     */\\n    function postModuleExecution(address guard, bytes32 guardHash, bool success) internal {\\n        if (guard != address(0)) {\\n            Guard(guard).checkAfterExecution(guardHash, success);\\n        }\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function enableModule(address module) public override authorized {\\n        // Module address cannot be null or sentinel.\\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\\\"GS101\\\");\\n        // Module cannot be added twice.\\n        if (modules[module] != address(0)) revertWithError(\\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function disableModule(address prevModule, address module) public override authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\\\"GS101\\\");\\n        if (modules[prevModule] != module) revertWithError(\\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual override returns (bool success) {\\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        postModuleExecution(guard, guardHash, success);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public override returns (bool success, bytes memory returnData) {\\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load free memory location\\n            returnData := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(returnData, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(returnData, returndatasize())\\n            // Store the data\\n            returndatacopy(add(returnData, 0x20), 0, returndatasize())\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        postModuleExecution(guard, guardHash, success);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function isModuleEnabled(address module) public view override returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function getModulesPaginated(address start, uint256 pageSize) external view override returns (address[] memory array, address next) {\\n        if (start != SENTINEL_MODULES && !isModuleEnabled(start)) revertWithError(\\\"GS105\\\");\\n        if (pageSize == 0) revertWithError(\\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xde09a7c26b2caadda53ded5d92ec8763492435054618a9661760f0f33e5b9ac5\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IOwnerManager} from \\\"../interfaces/IOwnerManager.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized, IOwnerManager {\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        if (threshold > 0) revertWithError(\\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        if (_threshold > _owners.length) revertWithError(\\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        if (_threshold == 0) revertWithError(\\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this) || currentOwner == owner)\\n                revertWithError(\\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            if (owners[owner] != address(0)) revertWithError(\\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public override authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this)) revertWithError(\\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        if (owners[owner] != address(0)) revertWithError(\\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public override authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        if (ownerCount - 1 < _threshold) revertWithError(\\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        if (owner == address(0) || owner == SENTINEL_OWNERS) revertWithError(\\\"GS203\\\");\\n        if (owners[prevOwner] != owner) revertWithError(\\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public override authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        if (newOwner == address(0) || newOwner == SENTINEL_OWNERS || newOwner == address(this)) revertWithError(\\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        if (owners[newOwner] != address(0)) revertWithError(\\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        if (oldOwner == address(0) || oldOwner == SENTINEL_OWNERS) revertWithError(\\\"GS203\\\");\\n        if (owners[prevOwner] != oldOwner) revertWithError(\\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function changeThreshold(uint256 _threshold) public override authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        if (_threshold > ownerCount) revertWithError(\\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        if (_threshold == 0) revertWithError(\\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function getThreshold() public view override returns (uint256) {\\n        return threshold;\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function isOwner(address owner) public view override returns (bool) {\\n        return !(owner == SENTINEL_OWNERS || owners[owner] == address(0));\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function getOwners() public view override returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xdcc21ddf05668e451b2cdeb4d28f2c7a3a2fc73a20b3cf592dcebbe335e3b1ff\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/NativeCurrencyPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x90afdfd7ecdf7d18e4a3d73a55e51387713bb69dfcc4490ff7348d6126ba3197\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            v := byte(0, mload(add(signatures, add(signaturePos, 0x60))))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xc811f101acdc7e0bf0c04307a36889a5a5834a2163e4ad2d20f7bd3fd95d8796\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe Smart Account contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            mstore(ptr, success)\\n            mstore(add(ptr, 0x20), returndatasize())\\n            returndatacopy(add(ptr, 0x40), 0, returndatasize())\\n            revert(ptr, add(returndatasize(), 0x40))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xfce71a03d9a54d9404db5d8cf177d93c2983a651070293e2fa2d8c4e5bba5a0c\",\"license\":\"LGPL-3.0-only\"},\"contracts/external/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice EIP1271 method to validate a signature.\\n     * @param _hash Hash of the data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0xae1d485aedcb9dd2c4a4eaba3d4183ccefc5604d0160b9ae0eaf1fe5566df7e2\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2561,"contract":"contracts/SafeL2.sol:SafeL2","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":1422,"contract":"contracts/SafeL2.sol:SafeL2","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":1953,"contract":"contracts/SafeL2.sol:SafeL2","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":1955,"contract":"contracts/SafeL2.sol:SafeL2","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":1957,"contract":"contracts/SafeL2.sol:SafeL2","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":65,"contract":"contracts/SafeL2.sol:SafeL2","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":67,"contract":"contracts/SafeL2.sol:SafeL2","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":72,"contract":"contracts/SafeL2.sol:SafeL2","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":79,"contract":"contracts/SafeL2.sol:SafeL2","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"VERSION()":{"notice":"Returns the version of the Safe contract."},"addOwnerWithThreshold(address,uint256)":{"notice":"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."},"approveHash(bytes32)":{"notice":"Marks hash `hashToApprove` as approved."},"approvedHashes(address,bytes32)":{"notice":"Returns a uint if the messageHash is approved by the owner."},"changeThreshold(uint256)":{"notice":"Changes the threshold of the Safe to `_threshold`."},"checkNSignatures(address,bytes32,bytes,uint256)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"checkSignatures(bytes32,bytes)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"checkSignatures(bytes32,bytes,bytes)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"disableModule(address,address)":{"notice":"Disables the module `module` for the Safe."},"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"notice":"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`."},"execTransactionFromModule(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"},"getModulesPaginated(address,uint256)":{"notice":"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."},"getOwners()":{"notice":"Returns a list of Safe owners."},"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the currents contract"},"getThreshold()":{"notice":"Returns the number of required confirmations for a Safe transaction aka the threshold."},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"notice":"Returns transaction hash to be signed by owners."},"isModuleEnabled(address)":{"notice":"Returns if an module is enabled"},"isOwner(address)":{"notice":"Returns if `owner` is an owner of the Safe."},"nonce()":{"notice":"Returns the nonce of the Safe contract."},"removeOwner(address,address,uint256)":{"notice":"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."},"setFallbackHandler(address)":{"notice":"Set Fallback Handler to `handler` for the Safe."},"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"notice":"Sets an initial storage of the Safe contract."},"signedMessages(bytes32)":{"notice":"Returns a uint if the messageHash is signed by the owner."},"swapOwner(address,address,address)":{"notice":"Replaces the owner `oldOwner` in the Safe with `newOwner`."}},"notice":"For a more complete description of the Safe contract, please refer to the main Safe contract `Safe.sol`.","version":1}}},"contracts/accessors/SimulateTxAccessor.sol":{"SimulateTxAccessor":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"simulate","outputs":[{"internalType":"uint256","name":"estimate","type":"uint256"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"simulate(address,uint256,bytes,uint8)":{"details":"Executes the specified operation {Call, DelegateCall} and returns operation-specific data.      Has to be called via delegatecall.      This returns the data equal to `abi.encode(uint256(estimate), bool(success), bytes(returnData))`.      Specifically, the returndata will be:      `estimate:uint256 || success:bool || returnData.length:uint256 || returnData:bytes`.","params":{"data":"Data payload.","operation":"Operation type {Call, DelegateCall}.","to":"Destination address .","value":"Native token value."},"returns":{"estimate":"Gas used.","returnData":"Return data.","success":"Success boolean value."}}},"title":"Simulate Transaction Accessor.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60a060405234801561001057600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c6103526100656000398061017052506103526000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631c5fb21114610030575b600080fd5b6100de6004803603608081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561008d57600080fd5b82018360208201111561009f57600080fd5b803590602001918460018302840111640100000000831117156100c157600080fd5b9091929391929390803560ff169060200190929190505050610169565b60405180848152602001831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561012c578082015181840152602081019050610111565b50505050905090810190601f1680156101595780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610213576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806102e46039913960400191505060405180910390fd5b60005a9050610269898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050885a610297565b92505a8103935060405160203d0181016040523d81523d6000602083013e8092505050955095509592505050565b60006001808111156102a557fe5b8360018111156102b157fe5b14156102ca576000808551602087018986f490506102da565b600080855160208701888a87f190505b9594505050505056fe53696d756c61746554784163636573736f722073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6ca2646970667358221220fd430144adb49f3c41232dfb6304536647edd8ba193872e74bf6864e1b781cca64736f6c63430007060033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x352 PUSH2 0x65 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x170 MSTORE POP PUSH2 0x352 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1C5FB211 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x169 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x111 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x159 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x213 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E4 PUSH1 0x39 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x269 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 GAS PUSH2 0x297 JUMP JUMPDEST SWAP3 POP GAS DUP2 SUB SWAP4 POP PUSH1 0x40 MLOAD PUSH1 0x20 RETURNDATASIZE ADD DUP2 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY DUP1 SWAP3 POP POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x2A5 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2B1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID MSTORE8 PUSH10 0x6D756C61746554784163 PUSH4 0x6573736F PUSH19 0x2073686F756C64206F6E6C792062652063616C PUSH13 0x6564207669612064656C656761 PUSH21 0x6563616C6CA2646970667358221220FD430144ADB4 SWAP16 EXTCODECOPY COINBASE 0x23 0x2D 0xFB PUSH4 0x4536647 0xED 0xD8 0xBA NOT CODESIZE PUSH19 0xE74BF6864E1B781CCA64736F6C634300070600 CALLER ","sourceMap":"296:2446:2:-:0;;;393:65;;;;;;;;;;446:4;417:34;;;;;;;;;;;;296:2446;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{"1086":[{"length":32,"start":368}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c80631c5fb21114610030575b600080fd5b6100de6004803603608081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561008d57600080fd5b82018360208201111561009f57600080fd5b803590602001918460018302840111640100000000831117156100c157600080fd5b9091929391929390803560ff169060200190929190505050610169565b60405180848152602001831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561012c578082015181840152602081019050610111565b50505050905090810190601f1680156101595780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610213576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806102e46039913960400191505060405180910390fd5b60005a9050610269898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050885a610297565b92505a8103935060405160203d0181016040523d81523d6000602083013e8092505050955095509592505050565b60006001808111156102a557fe5b8360018111156102b157fe5b14156102ca576000808551602087018986f490506102da565b600080855160208701888a87f190505b9594505050505056fe53696d756c61746554784163636573736f722073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6ca2646970667358221220fd430144adb49f3c41232dfb6304536647edd8ba193872e74bf6864e1b781cca64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1C5FB211 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x169 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x111 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x159 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x213 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E4 PUSH1 0x39 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x269 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 GAS PUSH2 0x297 JUMP JUMPDEST SWAP3 POP GAS DUP2 SUB SWAP4 POP PUSH1 0x40 MLOAD PUSH1 0x20 RETURNDATASIZE ADD DUP2 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY DUP1 SWAP3 POP POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x2A5 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2B1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID MSTORE8 PUSH10 0x6D756C61746554784163 PUSH4 0x6573736F PUSH19 0x2073686F756C64206F6E6C792062652063616C PUSH13 0x6564207669612064656C656761 PUSH21 0x6563616C6CA2646970667358221220FD430144ADB4 SWAP16 EXTCODECOPY COINBASE 0x23 0x2D 0xFB PUSH4 0x4536647 0xED 0xD8 0xBA NOT CODESIZE PUSH19 0xE74BF6864E1B781CCA64736F6C634300070600 CALLER ","sourceMap":"296:2446:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1613:1127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1778:16;1796:12;1810:23;687:18;670:35;;678:4;670:35;;;;662:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1845:16:::1;1864:9;1845:28;;1893:46;1901:2;1905:5;1912:4;;1893:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1918:9;1929;1893:7;:46::i;:::-;1883:56;;1971:9;1960:8;:20;1949:31;;2163:4;2157:11;2405:4;2387:16;2383:27;2378:3;2374:37;2368:4;2361:51;2467:16;2462:3;2455:29;2561:16;2558:1;2551:4;2546:3;2542:14;2527:51;2673:3;2659:17;;2091:595;;1613:1127:::0;;;;;;;;;:::o;798:823:3:-;966:12;1007:27;994:40;;;;;;;;:9;:40;;;;;;;;;990:625;;;1245:1;1242;1235:4;1229:11;1222:4;1216;1212:15;1208:2;1201:5;1188:59;1177:70;;1159:102;;;1537:1;1534;1527:4;1521:11;1514:4;1508;1504:15;1497:5;1493:2;1486:5;1481:58;1470:69;;1452:101;798:823;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"170000","executionCost":"infinite","totalCost":"infinite"},"external":{"simulate(address,uint256,bytes,uint8)":"infinite"}},"methodIdentifiers":{"simulate(address,uint256,bytes,uint8)":"1c5fb211"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"simulate(address,uint256,bytes,uint8)\":{\"details\":\"Executes the specified operation {Call, DelegateCall} and returns operation-specific data.      Has to be called via delegatecall.      This returns the data equal to `abi.encode(uint256(estimate), bool(success), bytes(returnData))`.      Specifically, the returndata will be:      `estimate:uint256 || success:bool || returnData.length:uint256 || returnData:bytes`.\",\"params\":{\"data\":\"Data payload.\",\"operation\":\"Operation type {Call, DelegateCall}.\",\"to\":\"Destination address .\",\"value\":\"Native token value.\"},\"returns\":{\"estimate\":\"Gas used.\",\"returnData\":\"Return data.\",\"success\":\"Success boolean value.\"}}},\"title\":\"Simulate Transaction Accessor.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"simulate(address,uint256,bytes,uint8)\":{\"notice\":\"Simulates a Safe transaction and returns the used gas, success boolean and the return data.\"}},\"notice\":\"Can be used with StorageAccessible to simulate Safe transactions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/accessors/SimulateTxAccessor.sol\":\"SimulateTxAccessor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/accessors/SimulateTxAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Executor, Enum} from \\\"../base/Executor.sol\\\";\\n\\n/**\\n * @title Simulate Transaction Accessor.\\n * @notice Can be used with StorageAccessible to simulate Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SimulateTxAccessor is Executor {\\n    address private immutable ACCESSOR_SINGLETON;\\n\\n    constructor() {\\n        ACCESSOR_SINGLETON = address(this);\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable via delegatecall only.\\n     * If the function is called via a regular call, it will revert.\\n     */\\n    modifier onlyDelegateCall() {\\n        require(address(this) != ACCESSOR_SINGLETON, \\\"SimulateTxAccessor should only be called via delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Simulates a Safe transaction and returns the used gas, success boolean and the return data.\\n     * @dev Executes the specified operation {Call, DelegateCall} and returns operation-specific data.\\n     *      Has to be called via delegatecall.\\n     *      This returns the data equal to `abi.encode(uint256(estimate), bool(success), bytes(returnData))`.\\n     *      Specifically, the returndata will be:\\n     *      `estimate:uint256 || success:bool || returnData.length:uint256 || returnData:bytes`.\\n     * @param to Destination address .\\n     * @param value Native token value.\\n     * @param data Data payload.\\n     * @param operation Operation type {Call, DelegateCall}.\\n     * @return estimate Gas used.\\n     * @return success Success boolean value.\\n     * @return returnData Return data.\\n     */\\n    function simulate(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external onlyDelegateCall returns (uint256 estimate, bool success, bytes memory returnData) {\\n        uint256 startGas = gasleft();\\n        success = execute(to, value, data, operation, gasleft());\\n        estimate = startGas - gasleft();\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x5bb92fe82690ab4f5d9b4eb8202d1b4ce3b568d3970903eaa20ee07cb3cdab5d\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e0179af7f1475fead89a26badd804382f1661e82e0cc27f3cfa6b08ac970862\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"simulate(address,uint256,bytes,uint8)":{"notice":"Simulates a Safe transaction and returns the used gas, success boolean and the return data."}},"notice":"Can be used with StorageAccessible to simulate Safe transactions.","version":1}}},"contracts/base/Executor.sol":{"Executor":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"Executor - A contract that can execute transactions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Executor - A contract that can execute transactions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/Executor.sol\":\"Executor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e0179af7f1475fead89a26badd804382f1661e82e0cc27f3cfa6b08ac970862\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/base/FallbackManager.sol":{"FallbackManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"setFallbackHandler(address)":{"details":"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.","params":{"handler":"contract to handle fallback calls."}}},"title":"Fallback Manager - A contract managing fallback calls made to this contract","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setFallbackHandler(address)":"f08a0323"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"setFallbackHandler(address)\":{\"details\":\"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}}},\"title\":\"Fallback Manager - A contract managing fallback calls made to this contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setFallbackHandler(address)\":{\"notice\":\"Set Fallback Handler to `handler` for the Safe.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/FallbackManager.sol\":\"FallbackManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IFallbackManager} from \\\"../interfaces/IFallbackManager.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized, IFallbackManager {\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        if (handler == address(this)) revertWithError(\\\"GS400\\\");\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    // @inheritdoc IFallbackManager\\n    function setFallbackHandler(address handler) public override authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // When compiled with the optimizer, the compiler relies on a certain assumptions on how the\\n            // memory is used, therefore we need to guarantee memory safety (keeping the free memory point 0x40 slot intact,\\n            // not going beyond the scratch space, etc)\\n            // Solidity docs: https://docs.soliditylang.org/en/latest/assembly.html#memory-safety\\n\\n            let handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\\n\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(add(ptr, calldatasize()), shl(96, caller()))\\n\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, ptr, add(calldatasize(), 20), 0, 0)\\n\\n            returndatacopy(ptr, 0, returndatasize())\\n            if iszero(success) {\\n                revert(ptr, returndatasize())\\n            }\\n            return(ptr, returndatasize())\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x07a3a038074e619472c3fe196a160a7e1e394523e7547812ec55f38f83e2edc5\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setFallbackHandler(address)":{"notice":"Set Fallback Handler to `handler` for the Safe."}},"version":1}}},"contracts/base/GuardManager.sol":{"BaseGuard":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bool","name":"success","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"module","type":"address"}],"name":"checkModuleTransaction","outputs":[{"internalType":"bytes32","name":"moduleTxHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"address","name":"msgSender","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkAfterExecution(bytes32,bool)":{"details":"The function needs to implement a check after the execution of the transaction.","params":{"hash":"The hash of the transaction.","success":"The status of the transaction execution."}},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"details":"The function needs to implement module transaction validation logic.","params":{"data":"The transaction data.","module":"The module involved in the transaction.","operation":"The type of operation of the transaction.","to":"The address to which the transaction is intended.","value":"The value of the transaction in Wei."},"returns":{"moduleTxHash":"The hash of the module transaction."}},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"details":"The function needs to implement transaction validation logic.","params":{"baseGas":"The base gas for the transaction.","data":"The transaction data.","gasPrice":"The price of gas in Wei for the transaction.","gasToken":"The token used to pay for gas.","msgSender":"The address of the message sender.","operation":"The type of operation of the transaction.","refundReceiver":"The address which should receive the refund.","safeTxGas":"Gas used for the transaction.","signatures":"The signatures of the transaction.","to":"The address to which the transaction is intended.","value":"The value of the transaction in Wei."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkModuleTransaction(address,uint256,bytes,uint8,address)":"728c2972","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"checkModuleTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"moduleTxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"details\":\"The function needs to implement a check after the execution of the transaction.\",\"params\":{\"hash\":\"The hash of the transaction.\",\"success\":\"The status of the transaction execution.\"}},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"details\":\"The function needs to implement module transaction validation logic.\",\"params\":{\"data\":\"The transaction data.\",\"module\":\"The module involved in the transaction.\",\"operation\":\"The type of operation of the transaction.\",\"to\":\"The address to which the transaction is intended.\",\"value\":\"The value of the transaction in Wei.\"},\"returns\":{\"moduleTxHash\":\"The hash of the module transaction.\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"details\":\"The function needs to implement transaction validation logic.\",\"params\":{\"baseGas\":\"The base gas for the transaction.\",\"data\":\"The transaction data.\",\"gasPrice\":\"The price of gas in Wei for the transaction.\",\"gasToken\":\"The token used to pay for gas.\",\"msgSender\":\"The address of the message sender.\",\"operation\":\"The type of operation of the transaction.\",\"refundReceiver\":\"The address which should receive the refund.\",\"safeTxGas\":\"Gas used for the transaction.\",\"signatures\":\"The signatures of the transaction.\",\"to\":\"The address to which the transaction is intended.\",\"value\":\"The value of the transaction in Wei.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"notice\":\"Checks after execution of transaction.\"},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"notice\":\"Checks the module transaction details.\"},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"notice\":\"Checks the transaction details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/GuardManager.sol\":\"BaseGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkAfterExecution(bytes32,bool)":{"notice":"Checks after execution of transaction."},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"notice":"Checks the module transaction details."},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"notice":"Checks the transaction details."}},"version":1}},"Guard":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bool","name":"success","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"module","type":"address"}],"name":"checkModuleTransaction","outputs":[{"internalType":"bytes32","name":"moduleTxHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"address","name":"msgSender","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkAfterExecution(bytes32,bool)":{"details":"The function needs to implement a check after the execution of the transaction.","params":{"hash":"The hash of the transaction.","success":"The status of the transaction execution."}},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"details":"The function needs to implement module transaction validation logic.","params":{"data":"The transaction data.","module":"The module involved in the transaction.","operation":"The type of operation of the transaction.","to":"The address to which the transaction is intended.","value":"The value of the transaction in Wei."},"returns":{"moduleTxHash":"The hash of the module transaction."}},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"details":"The function needs to implement transaction validation logic.","params":{"baseGas":"The base gas for the transaction.","data":"The transaction data.","gasPrice":"The price of gas in Wei for the transaction.","gasToken":"The token used to pay for gas.","msgSender":"The address of the message sender.","operation":"The type of operation of the transaction.","refundReceiver":"The address which should receive the refund.","safeTxGas":"Gas used for the transaction.","signatures":"The signatures of the transaction.","to":"The address to which the transaction is intended.","value":"The value of the transaction in Wei."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"Guard Interface","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkModuleTransaction(address,uint256,bytes,uint8,address)":"728c2972","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"checkModuleTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"moduleTxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"details\":\"The function needs to implement a check after the execution of the transaction.\",\"params\":{\"hash\":\"The hash of the transaction.\",\"success\":\"The status of the transaction execution.\"}},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"details\":\"The function needs to implement module transaction validation logic.\",\"params\":{\"data\":\"The transaction data.\",\"module\":\"The module involved in the transaction.\",\"operation\":\"The type of operation of the transaction.\",\"to\":\"The address to which the transaction is intended.\",\"value\":\"The value of the transaction in Wei.\"},\"returns\":{\"moduleTxHash\":\"The hash of the module transaction.\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"details\":\"The function needs to implement transaction validation logic.\",\"params\":{\"baseGas\":\"The base gas for the transaction.\",\"data\":\"The transaction data.\",\"gasPrice\":\"The price of gas in Wei for the transaction.\",\"gasToken\":\"The token used to pay for gas.\",\"msgSender\":\"The address of the message sender.\",\"operation\":\"The type of operation of the transaction.\",\"refundReceiver\":\"The address which should receive the refund.\",\"safeTxGas\":\"Gas used for the transaction.\",\"signatures\":\"The signatures of the transaction.\",\"to\":\"The address to which the transaction is intended.\",\"value\":\"The value of the transaction in Wei.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"Guard Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"notice\":\"Checks after execution of transaction.\"},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"notice\":\"Checks the module transaction details.\"},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"notice\":\"Checks the transaction details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/GuardManager.sol\":\"Guard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkAfterExecution(bytes32,bool)":{"notice":"Checks after execution of transaction."},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"notice":"Checks the module transaction details."},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"notice":"Checks the transaction details."}},"version":1}},"GuardManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}}},"title":"Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setGuard(address)":"e19a9dd9"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}}},\"title\":\"Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/GuardManager.sol\":\"GuardManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."}},"version":1}}},"contracts/base/ModuleManager.sol":{"ModuleManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Stefan George - @Georgi87Richard Meissner - @rmeissner","kind":"dev","methods":{"disableModule(address,address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be removed.","prevModule":"Previous module in the modules linked list."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be whitelisted."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"success":"Boolean flag indicating if the call succeeded."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getModulesPaginated(address,uint256)":{"params":{"pageSize":"Maximum number of modules that should be returned. Has to be > 0","start":"Start of the page. Has to be a module or start pointer (0x1 address)"},"returns":{"array":"Array of modules.","next":"Start of the next page."}},"isModuleEnabled(address)":{"returns":{"_0":"True if the module is enabled"}},"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}}},"title":"Module Manager - A contract managing Safe modules","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"disableModule(address,address)":"e009cfde","enableModule(address)":"610b5925","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getModulesPaginated(address,uint256)":"cc2f8452","isModuleEnabled(address)":"2d9ad53d","setGuard(address)":"e19a9dd9"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"disableModule(address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Previous module in the modules linked list.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getModulesPaginated(address,uint256)\":{\"params\":{\"pageSize\":\"Maximum number of modules that should be returned. Has to be > 0\",\"start\":\"Start of the page. Has to be a module or start pointer (0x1 address)\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"isModuleEnabled(address)\":{\"returns\":{\"_0\":\"True if the module is enabled\"}},\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}}},\"title\":\"Module Manager - A contract managing Safe modules\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"},\"getModulesPaginated(address,uint256)\":{\"notice\":\"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array.\"},\"isModuleEnabled(address)\":{\"notice\":\"Returns if an module is enabled\"},\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"}},\"notice\":\"Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners. \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions,  so only trusted and audited modules should be added to a Safe. A malicious module can completely takeover a Safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ModuleManager.sol\":\"ModuleManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e0179af7f1475fead89a26badd804382f1661e82e0cc27f3cfa6b08ac970862\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {Executor} from \\\"./Executor.sol\\\";\\nimport {GuardManager, Guard} from \\\"./GuardManager.sol\\\";\\nimport {IModuleManager} from \\\"../interfaces/IModuleManager.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor, GuardManager, IModuleManager {\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        if (modules[SENTINEL_MODULES] != address(0)) revertWithError(\\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            if (!isContract(to)) revertWithError(\\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            if (!execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max)) revertWithError(\\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Runs pre-execution checks for module transactions if a guard is enabled.\\n     * @param to Target address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return guard Guard to be used for checking.\\n     * @return guardHash Hash returned from the guard tx check.\\n     */\\n    function preModuleExecution(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (address guard, bytes32 guardHash) {\\n        guard = getGuard();\\n\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n\\n        if (guard != address(0)) {\\n            guardHash = Guard(guard).checkModuleTransaction(to, value, data, operation, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Runs post-execution checks for module transactions if a guard is enabled.\\n     * @param guardHash Hash returned from the guard during pre execution check.\\n     * @param success Boolean flag indicating if the call succeeded.\\n     * @param guard Guard to be used for checking.\\n     * @dev Emits event based on module transaction success.\\n     */\\n    function postModuleExecution(address guard, bytes32 guardHash, bool success) internal {\\n        if (guard != address(0)) {\\n            Guard(guard).checkAfterExecution(guardHash, success);\\n        }\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function enableModule(address module) public override authorized {\\n        // Module address cannot be null or sentinel.\\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\\\"GS101\\\");\\n        // Module cannot be added twice.\\n        if (modules[module] != address(0)) revertWithError(\\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function disableModule(address prevModule, address module) public override authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\\\"GS101\\\");\\n        if (modules[prevModule] != module) revertWithError(\\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual override returns (bool success) {\\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        postModuleExecution(guard, guardHash, success);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public override returns (bool success, bytes memory returnData) {\\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load free memory location\\n            returnData := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(returnData, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(returnData, returndatasize())\\n            // Store the data\\n            returndatacopy(add(returnData, 0x20), 0, returndatasize())\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        postModuleExecution(guard, guardHash, success);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function isModuleEnabled(address module) public view override returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    // @inheritdoc IModuleManager\\n    function getModulesPaginated(address start, uint256 pageSize) external view override returns (address[] memory array, address next) {\\n        if (start != SENTINEL_MODULES && !isModuleEnabled(start)) revertWithError(\\\"GS105\\\");\\n        if (pageSize == 0) revertWithError(\\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xde09a7c26b2caadda53ded5d92ec8763492435054618a9661760f0f33e5b9ac5\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1422,"contract":"contracts/base/ModuleManager.sol:ModuleManager","label":"modules","offset":0,"slot":"0","type":"t_mapping(t_address,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"}}},"userdoc":{"kind":"user","methods":{"disableModule(address,address)":{"notice":"Disables the module `module` for the Safe."},"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"execTransactionFromModule(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"},"getModulesPaginated(address,uint256)":{"notice":"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."},"isModuleEnabled(address)":{"notice":"Returns if an module is enabled"},"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."}},"notice":"Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners. ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions,  so only trusted and audited modules should be added to a Safe. A malicious module can completely takeover a Safe.","version":1}}},"contracts/base/OwnerManager.sol":{"OwnerManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Stefan George - @Georgi87Richard Meissner - @rmeissner","details":"Uses a linked list to store the owners because the code generate by the solidity compiler      is more efficient than using a dynamic array.","kind":"dev","methods":{"addOwnerWithThreshold(address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"New owner address."}},"changeThreshold(uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold."}},"getOwners()":{"returns":{"_0":"Array of Safe owners."}},"getThreshold()":{"returns":{"_0":"Threshold number."}},"isOwner(address)":{"returns":{"_0":"Boolean if owner is an owner of the Safe."}},"removeOwner(address,address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"Owner address to be removed.","prevOwner":"Owner that pointed to the owner to be removed in the linked list"}},"swapOwner(address,address,address)":{"details":"This can only be done via a Safe transaction.","params":{"newOwner":"New owner address.","oldOwner":"Owner address to be replaced.","prevOwner":"Owner that pointed to the owner to be replaced in the linked list"}}},"title":"OwnerManager - Manages Safe owners and a threshold to authorize transactions.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addOwnerWithThreshold(address,uint256)":"0d582f13","changeThreshold(uint256)":"694e80c3","getOwners()":"a0e67e2b","getThreshold()":"e75235b8","isOwner(address)":"2f54bf6e","removeOwner(address,address,uint256)":"f8dc5dd9","swapOwner(address,address,address)":"e318b52b"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"details\":\"Uses a linked list to store the owners because the code generate by the solidity compiler      is more efficient than using a dynamic array.\",\"kind\":\"dev\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"changeThreshold(uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getThreshold()\":{\"returns\":{\"_0\":\"Threshold number.\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"Boolean if owner is an owner of the Safe.\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"swapOwner(address,address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"title\":\"OwnerManager - Manages Safe owners and a threshold to authorize transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"getOwners()\":{\"notice\":\"Returns a list of Safe owners.\"},\"getThreshold()\":{\"notice\":\"Returns the number of required confirmations for a Safe transaction aka the threshold.\"},\"isOwner(address)\":{\"notice\":\"Returns if `owner` is an owner of the Safe.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/OwnerManager.sol\":\"OwnerManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IOwnerManager} from \\\"../interfaces/IOwnerManager.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized, IOwnerManager {\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        if (threshold > 0) revertWithError(\\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        if (_threshold > _owners.length) revertWithError(\\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        if (_threshold == 0) revertWithError(\\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this) || currentOwner == owner)\\n                revertWithError(\\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            if (owners[owner] != address(0)) revertWithError(\\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public override authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this)) revertWithError(\\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        if (owners[owner] != address(0)) revertWithError(\\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public override authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        if (ownerCount - 1 < _threshold) revertWithError(\\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        if (owner == address(0) || owner == SENTINEL_OWNERS) revertWithError(\\\"GS203\\\");\\n        if (owners[prevOwner] != owner) revertWithError(\\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public override authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        if (newOwner == address(0) || newOwner == SENTINEL_OWNERS || newOwner == address(this)) revertWithError(\\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        if (owners[newOwner] != address(0)) revertWithError(\\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        if (oldOwner == address(0) || oldOwner == SENTINEL_OWNERS) revertWithError(\\\"GS203\\\");\\n        if (owners[prevOwner] != oldOwner) revertWithError(\\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function changeThreshold(uint256 _threshold) public override authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        if (_threshold > ownerCount) revertWithError(\\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        if (_threshold == 0) revertWithError(\\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function getThreshold() public view override returns (uint256) {\\n        return threshold;\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function isOwner(address owner) public view override returns (bool) {\\n        return !(owner == SENTINEL_OWNERS || owners[owner] == address(0));\\n    }\\n\\n    // @inheritdoc IOwnerManager\\n    function getOwners() public view override returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xdcc21ddf05668e451b2cdeb4d28f2c7a3a2fc73a20b3cf592dcebbe335e3b1ff\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1953,"contract":"contracts/base/OwnerManager.sol:OwnerManager","label":"owners","offset":0,"slot":"0","type":"t_mapping(t_address,t_address)"},{"astId":1955,"contract":"contracts/base/OwnerManager.sol:OwnerManager","label":"ownerCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":1957,"contract":"contracts/base/OwnerManager.sol:OwnerManager","label":"threshold","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"addOwnerWithThreshold(address,uint256)":{"notice":"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."},"changeThreshold(uint256)":{"notice":"Changes the threshold of the Safe to `_threshold`."},"getOwners()":{"notice":"Returns a list of Safe owners."},"getThreshold()":{"notice":"Returns the number of required confirmations for a Safe transaction aka the threshold."},"isOwner(address)":{"notice":"Returns if `owner` is an owner of the Safe."},"removeOwner(address,address,uint256)":{"notice":"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."},"swapOwner(address,address,address)":{"notice":"Replaces the owner `oldOwner` in the Safe with `newOwner`."}},"version":1}}},"contracts/common/NativeCurrencyPaymentFallback.sol":{"NativeCurrencyPaymentFallback":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeReceived","type":"event"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/NativeCurrencyPaymentFallback.sol\":\"NativeCurrencyPaymentFallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/common/NativeCurrencyPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/common/SecuredTokenTransfer.sol":{"SecuredTokenTransfer":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"SecuredTokenTransfer - Secure token transfer.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SecuredTokenTransfer - Secure token transfer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/SecuredTokenTransfer.sol\":\"SecuredTokenTransfer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x90afdfd7ecdf7d18e4a3d73a55e51387713bb69dfcc4490ff7348d6126ba3197\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/common/SelfAuthorized.sol":{"SelfAuthorized":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"SelfAuthorized - Authorizes current contract to perform actions to itself.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SelfAuthorized - Authorizes current contract to perform actions to itself.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/SelfAuthorized.sol\":\"SelfAuthorized\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/common/SignatureDecoder.sol":{"SignatureDecoder":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"SignatureDecoder - Decodes signatures encoded as bytes","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SignatureDecoder - Decodes signatures encoded as bytes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/SignatureDecoder.sol\":\"SignatureDecoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            v := byte(0, mload(add(signatures, add(signaturePos, 0x60))))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xc811f101acdc7e0bf0c04307a36889a5a5834a2163e4ad2d20f7bd3fd95d8796\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/common/Singleton.sol":{"Singleton":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"Singleton - Base for singleton contracts (should always be the first super contract)        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Singleton - Base for singleton contracts (should always be the first super contract)        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/Singleton.sol\":\"Singleton\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2561,"contract":"contracts/common/Singleton.sol:Singleton","label":"singleton","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/common/StorageAccessible.sol":{"StorageAccessible":{"abi":[{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulateAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Gnosis Developers","kind":"dev","methods":{"getStorageAt(uint256,uint256)":{"params":{"length":"- the number of words (32 bytes) of data to read","offset":"- the offset in the current contract's storage in words to start reading from"},"returns":{"_0":"the bytes that were read."}},"simulateAndRevert(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}}},"title":"StorageAccessible - A generic base contract that allows callers to access all internal storage.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getStorageAt(uint256,uint256)":"5624b25b","simulateAndRevert(address,bytes)":"b4faba09"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gnosis Developers\",\"kind\":\"dev\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}}},\"title\":\"StorageAccessible - A generic base contract that allows callers to access all internal storage.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"notice\":\"Reads `length` bytes of storage in the currents contract\"}},\"notice\":\"See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol         It removes a method from the original contract not needed for the Safe Smart Account contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/StorageAccessible.sol\":\"StorageAccessible\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe Smart Account contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            mstore(ptr, success)\\n            mstore(add(ptr, 0x20), returndatasize())\\n            returndatacopy(add(ptr, 0x40), 0, returndatasize())\\n            revert(ptr, add(returndatasize(), 0x40))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xfce71a03d9a54d9404db5d8cf177d93c2983a651070293e2fa2d8c4e5bba5a0c\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the currents contract"}},"notice":"See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol         It removes a method from the original contract not needed for the Safe Smart Account contracts.","version":1}}},"contracts/examples/guards/DebugTransactionGuard.sol":{"DebugTransactionGuard":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"safe","type":"address"},{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"GasUsage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"indexed":false,"internalType":"address","name":"module","type":"address"}],"name":"ModuleTransasctionDetails","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"safe","type":"address"},{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"indexed":false,"internalType":"bool","name":"usesRefund","type":"bool"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"signatures","type":"bytes"},{"indexed":false,"internalType":"address","name":"executor","type":"address"}],"name":"TransactionDetails","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"},{"internalType":"bool","name":"success","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"module","type":"address"}],"name":"checkModuleTransaction","outputs":[{"internalType":"bytes32","name":"moduleTxHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"address","name":"executor","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"txNonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","details":"This guard is only meant as a development tool and example","kind":"dev","methods":{"checkAfterExecution(bytes32,bool)":{"params":{"success":"True if the transaction was successful.","txHash":"Hash of the executed transaction."}},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"params":{"data":"Data payload of Safe transaction.","module":"Account executing the transaction.","operation":"Operation type of Safe transaction.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."},"returns":{"moduleTxHash":"Hash of the module transaction."}},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"params":{"baseGas":"Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)","data":"Data payload of Safe transaction.","executor":"Account executing the transaction.","gasPrice":"Gas price that should be used for the payment calculation.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type of Safe transaction.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the Safe transaction.","signatures":"Signature data that should be verified. Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"Debug Transaction Guard - Emits transaction events with extended information.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610c2d806100206000396000f3fe608060405234801561001057600080fd5b506004361061005b5760003560e01c806301ffc9a71461005e578063728c2972146100c157806375f0bb52146101e757806393271368146103ef578063ddbdba63146104295761005c565b5b005b6100a96004803603602081101561007457600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061046b565b60405180821515815260200191505060405180910390f35b6101d1600480360360a08110156100d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561011e57600080fd5b82018360208201111561013057600080fd5b8035906020019184600183028401116401000000008311171561015257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061053d565b6040518082815260200191505060405180910390f35b6103ed60048036036101608110156101fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561024557600080fd5b82018360208201111561025757600080fd5b8035906020019184600183028401116401000000008311171561027957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561034757600080fd5b82018360208201111561035957600080fd5b8035906020019184600183028401116401000000008311171561037b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610710565b005b6104276004803603604081101561040557600080fd5b8101908080359060200190929190803515159060200190929190505050610ae2565b005b6104556004803603602081101561043f57600080fd5b8101908080359060200190929190505050610bdf565b6040518082815260200191505060405180910390f35b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061053657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1660601b815260140185815260200184805190602001908083835b6020831061059f578051825260208201915060208101905060208303925061057c565b6001836020036101000a0380198251168184511680821785525050505050509050018360018111156105cd57fe5b60f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140195505050505050604051602081830303815290604052805190602001209050807f3c6faeabb77e6f2d036d756deaa3888179c615795ab4b4329874c29b03a732c78787878787604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200184600181111561067057fe5b81526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156106c95780820151818401526020810190506106ae565b50505050905090810190601f1680156106f65780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a295945050505050565b600080600033905060018173ffffffffffffffffffffffffffffffffffffffff1663affed0e06040518163ffffffff1660e01b815260040160206040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d602081101561078a57600080fd5b81019080805190602001909291905050500392508073ffffffffffffffffffffffffffffffffffffffff1663d8d11f788f8f8f8f8f8f8f8f8f8d6040518b63ffffffff1660e01b8152600401808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018060200189600181111561080957fe5b81526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182810382528a818151815260200191508051906020019080838360005b8381101561089657808201518184015260208101905061087b565b50505050905090810190601f1680156108c35780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b1580156108e957600080fd5b505afa1580156108fd573d6000803e3d6000fd5b505050506040513d602081101561091357600080fd5b8101908080519060200190929190505050915050803373ffffffffffffffffffffffffffffffffffffffff167fa65fef32cd19a6639a4bf7a6d196f132c151e4f0bbd2706f7f831b3a778e1ac08f8f8f8f8f60008f118a8d8d604051808a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001806020018860018111156109a257fe5b81526020018781526020018615158152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528a818151815260200191508051906020019080838360005b83811015610a135780820151818401526020810190506109f8565b50505050905090810190601f168015610a405780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610a79578082015181840152602081019050610a5e565b50505050905090810190601f168015610aa65780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a3816000808381526020019081526020016000208190555050505050505050505050505050565b60008060008481526020019081526020016000205490506000811415610b70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f756c64206e6f7420676574206e6f6e63650000000000000000000000000081525060200191505060405180910390fd5b60008060008581526020019081526020016000208190555080833373ffffffffffffffffffffffffffffffffffffffff167f0dcc0fb56a30b6fe6b188f45b47369bc7f3c928a9748e245a79fc3f54ddd05688560405180821515815260200191505060405180910390a4505050565b6000602052806000526040600020600091509050548156fea2646970667358221220cd3980ea55898bdbacf99e3979878dec432bfaf1dfb8d86b046a5ac64e93b19f64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC2D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0xDDBDBA63 EQ PUSH2 0x429 JUMPI PUSH2 0x5C JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x53D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x710 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x427 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xAE2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x455 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x536 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x59F JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x57C JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5CD JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP1 PUSH32 0x3C6FAEABB77E6F2D036D756DEAA3888179C615795AB4B4329874C29B03A732C7 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x670 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6C9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6AE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x6F6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAFFED0E0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x774 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SUB SWAP3 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD8D11F78 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP14 PUSH1 0x40 MLOAD DUP12 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x809 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP11 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x896 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x87B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x8C3 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP2 POP POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA65FEF32CD19A6639A4BF7A6D196F132C151E4F0BBD2706F7F831B3A778E1AC0 DUP16 DUP16 DUP16 DUP16 DUP16 PUSH1 0x0 DUP16 GT DUP11 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9A2 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP11 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA13 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x9F8 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xA40 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA79 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA5E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xAA6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x436F756C64206E6F7420676574206E6F6E636500000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDCC0FB56A30B6FE6B188F45B47369BC7F3C928A9748E245A79FC3F54DDD0568 DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD CODECOPY DUP1 0xEA SSTORE DUP10 DUP12 0xDB 0xAC 0xF9 SWAP15 CODECOPY PUSH26 0x878DEC432BFAF1DFB8D86B046A5AC64E93B19F64736F6C634300 SMOD MOD STOP CALLER ","sourceMap":"432:4220:14:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061005b5760003560e01c806301ffc9a71461005e578063728c2972146100c157806375f0bb52146101e757806393271368146103ef578063ddbdba63146104295761005c565b5b005b6100a96004803603602081101561007457600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061046b565b60405180821515815260200191505060405180910390f35b6101d1600480360360a08110156100d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561011e57600080fd5b82018360208201111561013057600080fd5b8035906020019184600183028401116401000000008311171561015257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061053d565b6040518082815260200191505060405180910390f35b6103ed60048036036101608110156101fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561024557600080fd5b82018360208201111561025757600080fd5b8035906020019184600183028401116401000000008311171561027957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561034757600080fd5b82018360208201111561035957600080fd5b8035906020019184600183028401116401000000008311171561037b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610710565b005b6104276004803603604081101561040557600080fd5b8101908080359060200190929190803515159060200190929190505050610ae2565b005b6104556004803603602081101561043f57600080fd5b8101908080359060200190929190505050610bdf565b6040518082815260200191505060405180910390f35b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061053657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1660601b815260140185815260200184805190602001908083835b6020831061059f578051825260208201915060208101905060208303925061057c565b6001836020036101000a0380198251168184511680821785525050505050509050018360018111156105cd57fe5b60f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140195505050505050604051602081830303815290604052805190602001209050807f3c6faeabb77e6f2d036d756deaa3888179c615795ab4b4329874c29b03a732c78787878787604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200184600181111561067057fe5b81526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156106c95780820151818401526020810190506106ae565b50505050905090810190601f1680156106f65780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a295945050505050565b600080600033905060018173ffffffffffffffffffffffffffffffffffffffff1663affed0e06040518163ffffffff1660e01b815260040160206040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d602081101561078a57600080fd5b81019080805190602001909291905050500392508073ffffffffffffffffffffffffffffffffffffffff1663d8d11f788f8f8f8f8f8f8f8f8f8d6040518b63ffffffff1660e01b8152600401808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018060200189600181111561080957fe5b81526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182810382528a818151815260200191508051906020019080838360005b8381101561089657808201518184015260208101905061087b565b50505050905090810190601f1680156108c35780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b1580156108e957600080fd5b505afa1580156108fd573d6000803e3d6000fd5b505050506040513d602081101561091357600080fd5b8101908080519060200190929190505050915050803373ffffffffffffffffffffffffffffffffffffffff167fa65fef32cd19a6639a4bf7a6d196f132c151e4f0bbd2706f7f831b3a778e1ac08f8f8f8f8f60008f118a8d8d604051808a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001806020018860018111156109a257fe5b81526020018781526020018615158152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528a818151815260200191508051906020019080838360005b83811015610a135780820151818401526020810190506109f8565b50505050905090810190601f168015610a405780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610a79578082015181840152602081019050610a5e565b50505050905090810190601f168015610aa65780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a3816000808381526020019081526020016000208190555050505050505050505050505050565b60008060008481526020019081526020016000205490506000811415610b70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f436f756c64206e6f7420676574206e6f6e63650000000000000000000000000081525060200191505060405180910390fd5b60008060008581526020019081526020016000208190555080833373ffffffffffffffffffffffffffffffffffffffff167f0dcc0fb56a30b6fe6b188f45b47369bc7f3c928a9748e245a79fc3f54ddd05688560405180821515815260200191505060405180910390a4505050565b6000602052806000526040600020600091509050548156fea2646970667358221220cd3980ea55898bdbacf99e3979878dec432bfaf1dfb8d86b046a5ac64e93b19f64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0xDDBDBA63 EQ PUSH2 0x429 JUMPI PUSH2 0x5C JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x53D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3ED PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x710 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x427 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xAE2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x455 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x536 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x59F JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x57C JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5CD JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP1 PUSH32 0x3C6FAEABB77E6F2D036D756DEAA3888179C615795AB4B4329874C29B03A732C7 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x670 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6C9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6AE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x6F6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAFFED0E0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x760 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x774 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SUB SWAP3 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD8D11F78 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP14 PUSH1 0x40 MLOAD DUP12 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x809 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP11 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x896 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x87B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x8C3 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP2 POP POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA65FEF32CD19A6639A4BF7A6D196F132C151E4F0BBD2706F7F831B3A778E1AC0 DUP16 DUP16 DUP16 DUP16 DUP16 PUSH1 0x0 DUP16 GT DUP11 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9A2 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP11 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA13 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x9F8 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xA40 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA79 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA5E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xAA6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x436F756C64206E6F7420676574206E6F6E636500000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDCC0FB56A30B6FE6B188F45B47369BC7F3C928A9748E245A79FC3F54DDD0568 DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD CODECOPY DUP1 0xEA SSTORE DUP10 DUP12 0xDB 0xAC 0xF9 SWAP15 CODECOPY PUSH26 0x878DEC432BFAF1DFB8D86B046A5AC64E93B19F64736F6C634300 SMOD MOD STOP CALLER ","sourceMap":"432:4220:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2629:251:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4249:401:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2435:880;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3530:267;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1360:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2629:251:5;2716:4;2766:23;2751:38;;;:11;:38;;;;:108;;;;2834:25;2819:40;;;:11;:40;;;;2751:108;2732:127;;2629:251;;;:::o;4249:401:14:-;4442:20;4516:2;4520:5;4527:4;4533:9;4544:6;4499:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4489:63;;;;;;4474:78;;4594:12;4568:75;4608:2;4612:5;4619:4;4625:9;4636:6;4568:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4249:401;;;;;;;:::o;2435:880::-;2854:13;2877:14;2915:10;2942;2915:39;;2991:1;2976:4;:10;;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;2968:24;;3015:4;:23;;;3039:2;3043:5;3050:4;3056:9;3067;3078:7;3087:8;3097;3107:14;3123:5;3015:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3006:123;;2435:880;3185:6;3173:10;3154:120;;;3193:2;3197:5;3204:4;3210:9;3221;3243:1;3232:8;:12;3246:5;3253:10;3265:8;3154:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3303:5;3284:8;:16;3293:6;3284:16;;;;;;;;;;;:24;;;;2435:880;;;;;;;;;;;;;:::o;3530:267::-;3617:13;3633:8;:16;3642:6;3633:16;;;;;;;;;;;;3617:32;;3676:1;3667:5;:10;;3659:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3730:1;3711:8;:16;3720:6;3711:16;;;;;;;;;;;:20;;;;3775:5;3767:6;3755:10;3746:44;;;3782:7;3746:44;;;;;;;;;;;;;;;;;;;;3530:267;;;:::o;1360:43::-;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"623400","executionCost":"657","totalCost":"624057"},"external":{"":"197","checkAfterExecution(bytes32,bool)":"8528","checkModuleTransaction(address,uint256,bytes,uint8,address)":"infinite","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"infinite","supportsInterface(bytes4)":"363","txNonces(bytes32)":"1229"}},"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkModuleTransaction(address,uint256,bytes,uint8,address)":"728c2972","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7","txNonces(bytes32)":"ddbdba63"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"GasUsage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleTransasctionDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usesRefund\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TransactionDetails\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"checkModuleTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"moduleTxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"txNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"details\":\"This guard is only meant as a development tool and example\",\"kind\":\"dev\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"params\":{\"success\":\"True if the transaction was successful.\",\"txHash\":\"Hash of the executed transaction.\"}},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"params\":{\"data\":\"Data payload of Safe transaction.\",\"module\":\"Account executing the transaction.\",\"operation\":\"Operation type of Safe transaction.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"},\"returns\":{\"moduleTxHash\":\"Hash of the module transaction.\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"params\":{\"baseGas\":\"Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload of Safe transaction.\",\"executor\":\"Account executing the transaction.\",\"gasPrice\":\"Gas price that should be used for the payment calculation.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type of Safe transaction.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the Safe transaction.\",\"signatures\":\"Signature data that should be verified. Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"Debug Transaction Guard - Emits transaction events with extended information.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"notice\":\"Called by the Safe contract after a transaction is executed.\"},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed via a module.\"},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/guards/DebugTransactionGuard.sol\":\"DebugTransactionGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/examples/guards/DebugTransactionGuard.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../../libraries/Enum.sol\\\";\\nimport {BaseGuard} from \\\"../../base/GuardManager.sol\\\";\\nimport {ISafe} from \\\"../../interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title Debug Transaction Guard - Emits transaction events with extended information.\\n * @dev This guard is only meant as a development tool and example\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract DebugTransactionGuard is BaseGuard {\\n    // solhint-disable-next-line payable-fallback\\n    fallback() external {\\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\\n        // E.g. The expected check method might change and then the Safe would be locked.\\n    }\\n\\n    event TransactionDetails(\\n        address indexed safe,\\n        bytes32 indexed txHash,\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        bool usesRefund,\\n        uint256 nonce,\\n        bytes signatures,\\n        address executor\\n    );\\n\\n    event ModuleTransasctionDetails(\\n        bytes32 indexed txHash,\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        Enum.Operation operation,\\n        address module\\n    );\\n\\n    event GasUsage(address indexed safe, bytes32 indexed txHash, uint256 indexed nonce, bool success);\\n\\n    mapping(bytes32 => uint256) public txNonces;\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified. Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param executor Account executing the transaction.\\n     */\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        // solhint-disable-next-line no-unused-vars\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address executor\\n    ) external override {\\n        uint256 nonce;\\n        bytes32 txHash;\\n        {\\n            ISafe safe = ISafe(payable(msg.sender));\\n            nonce = safe.nonce() - 1;\\n            txHash = safe.getTransactionHash(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, nonce);\\n        }\\n        emit TransactionDetails(msg.sender, txHash, to, value, data, operation, safeTxGas, gasPrice > 0, nonce, signatures, executor);\\n        txNonces[txHash] = nonce;\\n    }\\n\\n    /**\\n     * @notice Called by the Safe contract after a transaction is executed.\\n     * @param txHash Hash of the executed transaction.\\n     * @param success True if the transaction was successful.\\n     */\\n    function checkAfterExecution(bytes32 txHash, bool success) external override {\\n        uint256 nonce = txNonces[txHash];\\n        require(nonce != 0, \\\"Could not get nonce\\\");\\n        txNonces[txHash] = 0;\\n        emit GasUsage(msg.sender, txHash, nonce, success);\\n    }\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed via a module.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param module Account executing the transaction.\\n     * @return moduleTxHash Hash of the module transaction.\\n     */\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external override returns (bytes32 moduleTxHash) {\\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\\n\\n        emit ModuleTransasctionDetails(moduleTxHash, to, value, data, operation, module);\\n    }\\n}\\n\",\"keccak256\":\"0xfad202ef11a2bc854ee3c4ee6edf8a0e4e92609e85e63ebde9e0c4afaa11afc2\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2678,"contract":"contracts/examples/guards/DebugTransactionGuard.sol:DebugTransactionGuard","label":"txNonces","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint256)"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"checkAfterExecution(bytes32,bool)":{"notice":"Called by the Safe contract after a transaction is executed."},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"notice":"Called by the Safe contract before a transaction is executed via a module."},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"notice":"Called by the Safe contract before a transaction is executed."}},"version":1}}},"contracts/examples/guards/DelegateCallTransactionGuard.sol":{"DelegateCallTransactionGuard":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[],"name":"ALLOWED_TARGET","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bool","name":"","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"module","type":"address"}],"name":"checkModuleTransaction","outputs":[{"internalType":"bytes32","name":"moduleTxHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"address payable","name":"","type":"address"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"address","name":"","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"params":{"data":"Data payload of Safe transaction.","module":"Module executing the transaction.","operation":"Operation type of Safe transaction.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."}},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"details":"Reverts if the transaction is a delegate call to contract other than the allowed one.","params":{"operation":"Operation type of Safe transaction.","to":"Destination address of Safe transaction."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"DelegateCallTransactionGuard - Limits delegate calls to a specific target.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60a060405234801561001057600080fd5b506040516108e03803806108e08339818101604052602081101561003357600080fd5b81019080805190602001909291905050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505060805160601c61083d6100a36000398061053152806105775280610736525061083d6000f3fe608060405234801561001057600080fd5b506004361061005b5760003560e01c806301ffc9a71461005e578063250d6a91146100c1578063728c2972146100f557806375f0bb521461021b57806393271368146104235761005c565b5b005b6100a96004803603602081101561007457600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061045d565b60405180821515815260200191505060405180910390f35b6100c961052f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610205600480360360a081101561010b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561015257600080fd5b82018360208201111561016457600080fd5b8035906020019184600183028401116401000000008311171561018657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610553565b6040518082815260200191505060405180910390f35b610421600480360361016081101561023257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561027957600080fd5b82018360208201111561028b57600080fd5b803590602001918460018302840111640100000000831117156102ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561037b57600080fd5b82018360208201111561038d57600080fd5b803590602001918460018302840111640100000000831117156103af57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610714565b005b61045b6004803603604081101561043957600080fd5b8101908080359060200190929190803515159060200190929190505050610803565b005b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061052857507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060018081111561056157fe5b83600181111561056d57fe5b1415806105c557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b610637576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546869732063616c6c206973207265737472696374656400000000000000000081525060200191505060405180910390fd5b8585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1660601b815260140185815260200184805190602001908083835b602083106106975780518252602082019150602081019050602083039250610674565b6001836020036101000a0380198251168184511680821785525050505050509050018360018111156106c557fe5b60f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019550505050505060405160208183030381529060405280519060200120905095945050505050565b60018081111561072057fe5b88600181111561072c57fe5b14158061078457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16145b6107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546869732063616c6c206973207265737472696374656400000000000000000081525060200191505060405180910390fd5b5050505050505050505050565b505056fea264697066735822122006b2fd379e15484c947bcc16c8d8e6285f7b969850cabeeedd207c95ec97a93e64736f6c63430007060033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x8E0 CODESIZE SUB DUP1 PUSH2 0x8E0 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x83D PUSH2 0xA3 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x531 MSTORE DUP1 PUSH2 0x577 MSTORE DUP1 PUSH2 0x736 MSTORE POP PUSH2 0x83D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x250D6A91 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x423 JUMPI PUSH2 0x5C JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x45D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x553 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x421 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x714 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x45B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x803 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x528 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x561 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x56D JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x5C5 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x546869732063616C6C2069732072657374726963746564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x697 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x674 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6C5 JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x720 JUMPI INVALID JUMPDEST DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x72C JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x784 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x546869732063616C6C2069732072657374726963746564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xB2 REVERT CALLDATACOPY SWAP15 ISZERO 0x48 0x4C SWAP5 PUSH28 0xCC16C8D8E6285F7B969850CABEEEDD207C95EC97A93E64736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"312:2083:15:-:0;;;415:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;470:6;453:23;;;;;;;;;;;;415:68;312:2083;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{"2859":[{"length":32,"start":1329},{"length":32,"start":1399},{"length":32,"start":1846}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061005b5760003560e01c806301ffc9a71461005e578063250d6a91146100c1578063728c2972146100f557806375f0bb521461021b57806393271368146104235761005c565b5b005b6100a96004803603602081101561007457600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061045d565b60405180821515815260200191505060405180910390f35b6100c961052f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610205600480360360a081101561010b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561015257600080fd5b82018360208201111561016457600080fd5b8035906020019184600183028401116401000000008311171561018657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610553565b6040518082815260200191505060405180910390f35b610421600480360361016081101561023257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561027957600080fd5b82018360208201111561028b57600080fd5b803590602001918460018302840111640100000000831117156102ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561037b57600080fd5b82018360208201111561038d57600080fd5b803590602001918460018302840111640100000000831117156103af57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610714565b005b61045b6004803603604081101561043957600080fd5b8101908080359060200190929190803515159060200190929190505050610803565b005b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061052857507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060018081111561056157fe5b83600181111561056d57fe5b1415806105c557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b610637576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546869732063616c6c206973207265737472696374656400000000000000000081525060200191505060405180910390fd5b8585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1660601b815260140185815260200184805190602001908083835b602083106106975780518252602082019150602081019050602083039250610674565b6001836020036101000a0380198251168184511680821785525050505050509050018360018111156106c557fe5b60f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019550505050505060405160208183030381529060405280519060200120905095945050505050565b60018081111561072057fe5b88600181111561072c57fe5b14158061078457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16145b6107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546869732063616c6c206973207265737472696374656400000000000000000081525060200191505060405180910390fd5b5050505050505050505050565b505056fea264697066735822122006b2fd379e15484c947bcc16c8d8e6285f7b969850cabeeedd207c95ec97a93e64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x250D6A91 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x423 JUMPI PUSH2 0x5C JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x45D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x553 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x421 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x38D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x714 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x45B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x803 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x528 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x561 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x56D JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x5C5 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x637 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x546869732063616C6C2069732072657374726963746564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x697 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x674 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6C5 JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x720 JUMPI INVALID JUMPDEST DUP9 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x72C JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x784 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x7F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x546869732063616C6C2069732072657374726963746564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xB2 REVERT CALLDATACOPY SWAP15 ISZERO 0x48 0x4C SWAP5 PUSH28 0xCC16C8D8E6285F7B969850CABEEEDD207C95EC97A93E64736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"312:2083:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2629:251:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;369:39:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1968:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1053:449;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1508:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2629:251:5;2716:4;2766:23;2751:38;;;:11;:38;;;;:108;;;;2834:25;2819:40;;;:11;:40;;;;2751:108;2732:127;;2629:251;;;:::o;369:39:15:-;;;:::o;1968:425::-;2166:20;2219:27;2206:40;;;;;;;;:9;:40;;;;;;;;;;:64;;;;2256:14;2250:20;;:2;:20;;;2206:64;2198:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2350:2;2354:5;2361:4;2367:9;2378:6;2333:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2323:63;;;;;;2308:78;;1968:425;;;;;;;:::o;1053:449::-;1416:27;1403:40;;;;;;;;:9;:40;;;;;;;;;;:64;;;;1453:14;1447:20;;:2;:20;;;1403:64;1395:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1053:449;;;;;;;;;;;:::o;1508:69::-;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"421800","executionCost":"infinite","totalCost":"infinite"},"external":{"":"197","ALLOWED_TARGET()":"infinite","checkAfterExecution(bytes32,bool)":"329","checkModuleTransaction(address,uint256,bytes,uint8,address)":"infinite","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"infinite","supportsInterface(bytes4)":"363"}},"methodIdentifiers":{"ALLOWED_TARGET()":"250d6a91","checkAfterExecution(bytes32,bool)":"93271368","checkModuleTransaction(address,uint256,bytes,uint8,address)":"728c2972","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ALLOWED_TARGET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"checkModuleTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"moduleTxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"params\":{\"data\":\"Data payload of Safe transaction.\",\"module\":\"Module executing the transaction.\",\"operation\":\"Operation type of Safe transaction.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"details\":\"Reverts if the transaction is a delegate call to contract other than the allowed one.\",\"params\":{\"operation\":\"Operation type of Safe transaction.\",\"to\":\"Destination address of Safe transaction.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"DelegateCallTransactionGuard - Limits delegate calls to a specific target.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed via a module.\"},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/guards/DelegateCallTransactionGuard.sol\":\"DelegateCallTransactionGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/examples/guards/DelegateCallTransactionGuard.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../../libraries/Enum.sol\\\";\\nimport {BaseGuard} from \\\"../../base/GuardManager.sol\\\";\\n\\n/**\\n * @title DelegateCallTransactionGuard - Limits delegate calls to a specific target.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract DelegateCallTransactionGuard is BaseGuard {\\n    address public immutable ALLOWED_TARGET;\\n\\n    constructor(address target) {\\n        ALLOWED_TARGET = target;\\n    }\\n\\n    // solhint-disable-next-line payable-fallback\\n    fallback() external {\\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\\n        // E.g. The expected check method might change and then the Safe would be locked.\\n    }\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed.\\n     * @dev  Reverts if the transaction is a delegate call to contract other than the allowed one.\\n     * @param to Destination address of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     */\\n    function checkTransaction(\\n        address to,\\n        uint256,\\n        bytes memory,\\n        Enum.Operation operation,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        // solhint-disable-next-line no-unused-vars\\n        address payable,\\n        bytes memory,\\n        address\\n    ) external view override {\\n        require(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET, \\\"This call is restricted\\\");\\n    }\\n\\n    function checkAfterExecution(bytes32, bool) external view override {}\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed via a module.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param module Module executing the transaction.\\n     */\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external view override returns (bytes32 moduleTxHash) {\\n        require(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET, \\\"This call is restricted\\\");\\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\\n    }\\n}\\n\",\"keccak256\":\"0x47075ee04be86df65dbab48d870e40c25869ea4514e1d2e4871583db0a146dac\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"notice":"Called by the Safe contract before a transaction is executed via a module."},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"notice":"Called by the Safe contract before a transaction is executed."}},"version":1}}},"contracts/examples/guards/OnlyOwnersGuard.sol":{"OnlyOwnersGuard":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bool","name":"","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"module","type":"address"}],"name":"checkModuleTransaction","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"enum Enum.Operation","name":"","type":"uint8"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"address payable","name":"","type":"address"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"address","name":"msgSender","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"params":{"data":"Data payload of Safe transaction.","module":"Module executing the transaction.","operation":"Operation type of Safe transaction.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."}},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"details":"Reverts if the transaction is not executed by an owner.","params":{"msgSender":"Executor of the transaction."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"OnlyOwnersGuard - Only allows owners to execute transactions.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061065a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100505760003560e01c806301ffc9a714610053578063728c2972146100b657806375f0bb52146101dc57806393271368146103e457610051565b5b005b61009e6004803603602081101561006957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061041e565b60405180821515815260200191505060405180910390f35b6101c6600480360360a08110156100cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561011357600080fd5b82018360208201111561012557600080fd5b8035906020019184600183028401116401000000008311171561014757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104f0565b6040518082815260200191505060405180910390f35b6103e260048036036101608110156101f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561023a57600080fd5b82018360208201111561024c57600080fd5b8035906020019184600183028401116401000000008311171561026e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561033c57600080fd5b82018360208201111561034e57600080fd5b8035906020019184600183028401116401000000008311171561037057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104fb565b005b61041c600480360360408110156103fa57600080fd5b81019080803590602001909291908035151590602001909291905050506105ff565b005b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104e957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff16632f54bf6e826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561056257600080fd5b505afa158015610576573d6000803e3d6000fd5b505050506040513d602081101561058c57600080fd5b81019080805190602001909291905050506105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106046021913960400191505060405180910390fd5b5050505050505050505050565b505056fe6d73672073656e646572206973206e6f7420616c6c6f77656420746f2065786563a26469706673582212208dedca9571c9495b83eb9dde8684b9d412926a8be01ae5e51631fa62ec30744d64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x50 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x53 JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x3E4 JUMPI PUSH2 0x51 JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4FB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5FF JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4E9 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2F54BF6E DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x576 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x604 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP JUMP INVALID PUSH14 0x73672073656E646572206973206E PUSH16 0x7420616C6C6F77656420746F20657865 PUSH4 0xA2646970 PUSH7 0x73582212208DED 0xCA SWAP6 PUSH18 0xC9495B83EB9DDE8684B9D412926A8BE01AE5 0xE5 AND BALANCE STATICCALL PUSH3 0xEC3074 0x4D PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"393:1634:16:-:0;;;437:16;;;;;;;;;;393:1634;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100505760003560e01c806301ffc9a714610053578063728c2972146100b657806375f0bb52146101dc57806393271368146103e457610051565b5b005b61009e6004803603602081101561006957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061041e565b60405180821515815260200191505060405180910390f35b6101c6600480360360a08110156100cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561011357600080fd5b82018360208201111561012557600080fd5b8035906020019184600183028401116401000000008311171561014757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104f0565b6040518082815260200191505060405180910390f35b6103e260048036036101608110156101f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561023a57600080fd5b82018360208201111561024c57600080fd5b8035906020019184600183028401116401000000008311171561026e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561033c57600080fd5b82018360208201111561034e57600080fd5b8035906020019184600183028401116401000000008311171561037057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104fb565b005b61041c600480360360408110156103fa57600080fd5b81019080803590602001909291908035151590602001909291905050506105ff565b005b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104e957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff16632f54bf6e826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561056257600080fd5b505afa158015610576573d6000803e3d6000fd5b505050506040513d602081101561058c57600080fd5b81019080805190602001909291905050506105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106046021913960400191505060405180910390fd5b5050505050505050505050565b505056fe6d73672073656e646572206973206e6f7420616c6c6f77656420746f2065786563a26469706673582212208dedca9571c9495b83eb9dde8684b9d412926a8be01ae5e51631fa62ec30744d64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x50 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x53 JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x3E4 JUMPI PUSH2 0x51 JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4FB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5FF JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4E9 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2F54BF6E DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x576 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x604 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST POP POP JUMP INVALID PUSH14 0x73672073656E646572206973206E PUSH16 0x7420616C6C6F77656420746F20657865 PUSH4 0xA2646970 PUSH7 0x73582212208DED 0xCA SWAP6 PUSH18 0xC9495B83EB9DDE8684B9D412926A8BE01AE5 0xE5 AND BALANCE STATICCALL PUSH3 0xEC3074 0x4D PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"393:1634:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2629:251:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1821:204:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;927:428;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1361:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2629:251:5;2716:4;2766:23;2751:38;;;:11;:38;;;;:108;;;;2834:25;2819:40;;;:11;:40;;;;2751:108;2732:127;;2629:251;;;:::o;1821:204:16:-;2014:7;1821:204;;;;;;;:::o;927:428::-;1280:10;1274:25;;;1300:9;1274:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1266:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;927:428;;;;;;;;;;;:::o;1361:69::-;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"325200","executionCost":"362","totalCost":"325562"},"external":{"":"175","checkAfterExecution(bytes32,bool)":"307","checkModuleTransaction(address,uint256,bytes,uint8,address)":"infinite","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"infinite","supportsInterface(bytes4)":"363"}},"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkModuleTransaction(address,uint256,bytes,uint8,address)":"728c2972","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"checkModuleTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"params\":{\"data\":\"Data payload of Safe transaction.\",\"module\":\"Module executing the transaction.\",\"operation\":\"Operation type of Safe transaction.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"details\":\"Reverts if the transaction is not executed by an owner.\",\"params\":{\"msgSender\":\"Executor of the transaction.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"OnlyOwnersGuard - Only allows owners to execute transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed via a module.\"},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/guards/OnlyOwnersGuard.sol\":\"OnlyOwnersGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/examples/guards/OnlyOwnersGuard.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../../libraries/Enum.sol\\\";\\nimport {BaseGuard} from \\\"../../base/GuardManager.sol\\\";\\nimport {ISafe} from \\\"../../interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title OnlyOwnersGuard - Only allows owners to execute transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract OnlyOwnersGuard is BaseGuard {\\n    constructor() {}\\n\\n    // solhint-disable-next-line payable-fallback\\n    fallback() external {\\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\\n        // E.g. The expected check method might change and then the Safe would be locked.\\n    }\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed.\\n     * @dev Reverts if the transaction is not executed by an owner.\\n     * @param msgSender Executor of the transaction.\\n     */\\n    function checkTransaction(\\n        address,\\n        uint256,\\n        bytes memory,\\n        Enum.Operation,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        // solhint-disable-next-line no-unused-vars\\n        address payable,\\n        bytes memory,\\n        address msgSender\\n    ) external view override {\\n        require(ISafe(msg.sender).isOwner(msgSender), \\\"msg sender is not allowed to exec\\\");\\n    }\\n\\n    function checkAfterExecution(bytes32, bool) external view override {}\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed via a module.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param module Module executing the transaction.\\n     */\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external override returns (bytes32) {}\\n}\\n\",\"keccak256\":\"0x4bf5662d6b4a9bc2891bb53292a0aed622f999ec9fb91803f4ba4c29a290f1c4\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"notice":"Called by the Safe contract before a transaction is executed via a module."},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"notice":"Called by the Safe contract before a transaction is executed."}},"version":1}}},"contracts/examples/guards/ReentrancyTransactionGuard.sol":{"ReentrancyTransactionGuard":{"abi":[{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bool","name":"","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"module","type":"address"}],"name":"checkModuleTransaction","outputs":[{"internalType":"bytes32","name":"moduleTxHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"enum Enum.Operation","name":"","type":"uint8"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"address payable","name":"","type":"address"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"address","name":"","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"checkAfterExecution(bytes32,bool)":{"details":"Resets the guard value."},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"params":{"data":"Data payload of Safe transaction.","module":"Account executing the transaction.","operation":"Operation type of Safe transaction.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."}},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"details":"Reverts if reentrancy is detected."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"ReentrancyTransactionGuard - Prevents reentrancy into the transaction execution function.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506107c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100505760003560e01c806301ffc9a714610053578063728c2972146100b657806375f0bb52146101dc57806393271368146103e457610051565b5b005b61009e6004803603602081101561006957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061041e565b60405180821515815260200191505060405180910390f35b6101c6600480360360a08110156100cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561011357600080fd5b82018360208201111561012557600080fd5b8035906020019184600183028401116401000000008311171561014757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104f0565b6040518082815260200191505060405180910390f35b6103e260048036036101608110156101f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561023a57600080fd5b82018360208201111561024c57600080fd5b8035906020019184600183028401116401000000008311171561026e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561033c57600080fd5b82018360208201111561034e57600080fd5b8035906020019184600183028401116401000000008311171561037057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061067e565b005b61041c600480360360408110156103fa57600080fd5b810190808035906020019092919080351515906020019092919050505061073a565b005b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104e957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1660601b815260140185815260200184805190602001908083835b60208310610552578051825260208201915060208101905060208303925061052f565b6001836020036101000a03801982511681845116808217855250505050505090500183600181111561058057fe5b60f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019550505050505060405160208183030381529060405280519060200120905060006105d0610762565b90508060000160009054906101000a900460ff1615610657576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5265656e7472616e63792064657465637465640000000000000000000000000081525060200191505060405180910390fd5b60018160000160006101000a81548160ff0219169083151502179055505095945050505050565b6000610688610762565b90508060000160009054906101000a900460ff161561070f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5265656e7472616e63792064657465637465640000000000000000000000000081525060200191505060405180910390fd5b60018160000160006101000a81548160ff021916908315150217905550505050505050505050505050565b6000610744610762565b60000160006101000a81548160ff0219169083151502179055505050565b6000807f7c1d45961c2d0298f999d2c3d4a7a5e0f688d137f4c32466e3056a97e673b83a9050809150509056fea2646970667358221220d75f1c336205e75ff298a824b90a37716fefc8902239b531be7377a77c353e5564736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7C5 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x50 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x53 JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x3E4 JUMPI PUSH2 0x51 JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x67E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x73A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4E9 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x552 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x52F JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x580 JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x5D0 PUSH2 0x762 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637920646574656374656400000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x688 PUSH2 0x762 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x70F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637920646574656374656400000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x744 PUSH2 0x762 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7C1D45961C2D0298F999D2C3D4A7A5E0F688D137F4C32466E3056A97E673B83A SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 0x5F SHR CALLER PUSH3 0x5E75F CALLCODE SWAP9 0xA8 0x24 0xB9 EXP CALLDATACOPY PUSH18 0x6FEFC8902239B531BE7377A77C353E556473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"327:2694:17:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100505760003560e01c806301ffc9a714610053578063728c2972146100b657806375f0bb52146101dc57806393271368146103e457610051565b5b005b61009e6004803603602081101561006957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061041e565b60405180821515815260200191505060405180910390f35b6101c6600480360360a08110156100cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561011357600080fd5b82018360208201111561012557600080fd5b8035906020019184600183028401116401000000008311171561014757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104f0565b6040518082815260200191505060405180910390f35b6103e260048036036101608110156101f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561023a57600080fd5b82018360208201111561024c57600080fd5b8035906020019184600183028401116401000000008311171561026e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561033c57600080fd5b82018360208201111561034e57600080fd5b8035906020019184600183028401116401000000008311171561037057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061067e565b005b61041c600480360360408110156103fa57600080fd5b810190808035906020019092919080351515906020019092919050505061073a565b005b60007f945b8148000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104e957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1660601b815260140185815260200184805190602001908083835b60208310610552578051825260208201915060208101905060208303925061052f565b6001836020036101000a03801982511681845116808217855250505050505090500183600181111561058057fe5b60f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019550505050505060405160208183030381529060405280519060200120905060006105d0610762565b90508060000160009054906101000a900460ff1615610657576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5265656e7472616e63792064657465637465640000000000000000000000000081525060200191505060405180910390fd5b60018160000160006101000a81548160ff0219169083151502179055505095945050505050565b6000610688610762565b90508060000160009054906101000a900460ff161561070f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5265656e7472616e63792064657465637465640000000000000000000000000081525060200191505060405180910390fd5b60018160000160006101000a81548160ff021916908315150217905550505050505050505050505050565b6000610744610762565b60000160006101000a81548160ff0219169083151502179055505050565b6000807f7c1d45961c2d0298f999d2c3d4a7a5e0f688d137f4c32466e3056a97e673b83a9050809150509056fea2646970667358221220d75f1c336205e75ff298a824b90a37716fefc8902239b531be7377a77c353e5564736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x50 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x53 JUMPI DUP1 PUSH4 0x728C2972 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x75F0BB52 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x93271368 EQ PUSH2 0x3E4 JUMPI PUSH2 0x51 JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x41E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x67E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x73A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4E9 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x552 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x52F JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x580 JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x5D0 PUSH2 0x762 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637920646574656374656400000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x688 PUSH2 0x762 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x70F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637920646574656374656400000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x744 PUSH2 0x762 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7C1D45961C2D0298F999D2C3D4A7A5E0F688D137F4C32466E3056A97E673B83A SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 0x5F SHR CALLER PUSH3 0x5E75F CALLCODE SWAP9 0xA8 0x24 0xB9 EXP CALLDATACOPY PUSH18 0x6FEFC8902239B531BE7377A77C353E556473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"327:2694:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2629:251:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2577:442:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1495:452;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2081:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2629:251:5;2716:4;2766:23;2751:38;;;:11;:38;;;;:108;;;;2834:25;2819:40;;;:11;:40;;;;2751:108;2732:127;;2629:251;;;:::o;2577:442:17:-;2770:20;2844:2;2848:5;2855:4;2861:9;2872:6;2827:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2817:63;;;;;;2802:78;;2891:24;2918:10;:8;:10::i;:::-;2891:37;;2947:5;:12;;;;;;;;;;;;2946:13;2938:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3008:4;2993:5;:12;;;:19;;;;;;;;;;;;;;;;;;2577:442;;;;;;;;:::o;1495:452::-;1819:24;1846:10;:8;:10::i;:::-;1819:37;;1875:5;:12;;;;;;;;;;;;1874:13;1866:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1936:4;1921:5;:12;;;:19;;;;;;;;;;;;;;;;;;1495:452;;;;;;;;;;;;:::o;2081:104::-;2173:5;2153:10;:8;:10::i;:::-;:17;;;:25;;;;;;;;;;;;;;;;;;2081:104;;:::o;1030:319::-;1073:24;1109:12;429:42;1109:33;;1281:4;1267:18;;1253:42;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"397800","executionCost":"436","totalCost":"398236"},"external":{"":"175","checkAfterExecution(bytes32,bool)":"21228","checkModuleTransaction(address,uint256,bytes,uint8,address)":"infinite","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"infinite","supportsInterface(bytes4)":"363"},"internal":{"getGuard()":"36"}},"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkModuleTransaction(address,uint256,bytes,uint8,address)":"728c2972","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"checkModuleTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"moduleTxHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"details\":\"Resets the guard value.\"},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"params\":{\"data\":\"Data payload of Safe transaction.\",\"module\":\"Account executing the transaction.\",\"operation\":\"Operation type of Safe transaction.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"details\":\"Reverts if reentrancy is detected.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"ReentrancyTransactionGuard - Prevents reentrancy into the transaction execution function.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"notice\":\"Called by the Safe contract after a transaction is executed.\"},\"checkModuleTransaction(address,uint256,bytes,uint8,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed via a module.\"},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"notice\":\"Called by the Safe contract before a transaction is executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/guards/ReentrancyTransactionGuard.sol\":\"ReentrancyTransactionGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/examples/guards/ReentrancyTransactionGuard.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../../libraries/Enum.sol\\\";\\nimport {BaseGuard} from \\\"../../base/GuardManager.sol\\\";\\n\\n/**\\n * @title ReentrancyTransactionGuard - Prevents reentrancy into the transaction execution function.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract ReentrancyTransactionGuard is BaseGuard {\\n    bytes32 internal constant GUARD_STORAGE_SLOT = keccak256(\\\"reentrancy_guard.guard.struct\\\");\\n\\n    struct GuardValue {\\n        bool active;\\n    }\\n\\n    // solhint-disable-next-line payable-fallback\\n    fallback() external {\\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\\n        // E.g. The expected check method might change and then the Safe would be locked.\\n    }\\n\\n    /**\\n     * @notice Returns the guard value for the current context.\\n     * @dev The guard value is stored in a slot that is unique to the contract instance and the function in which it is called.\\n     * @return guard The guard value.\\n     */\\n    function getGuard() internal pure returns (GuardValue storage guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard.slot := slot\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed.\\n     * @dev Reverts if reentrancy is detected.\\n     */\\n    function checkTransaction(\\n        address,\\n        uint256,\\n        bytes memory,\\n        Enum.Operation,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        // solhint-disable-next-line no-unused-vars\\n        address payable,\\n        bytes memory,\\n        address\\n    ) external override {\\n        GuardValue storage guard = getGuard();\\n        require(!guard.active, \\\"Reentrancy detected\\\");\\n        guard.active = true;\\n    }\\n\\n    /**\\n     * @notice Called by the Safe contract after a transaction is executed.\\n     * @dev Resets the guard value.\\n     */\\n    function checkAfterExecution(bytes32, bool) external override {\\n        getGuard().active = false;\\n    }\\n\\n    /**\\n     * @notice Called by the Safe contract before a transaction is executed via a module.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param module Account executing the transaction.\\n     */\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external override returns (bytes32 moduleTxHash) {\\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\\n\\n        GuardValue storage guard = getGuard();\\n        require(!guard.active, \\\"Reentrancy detected\\\");\\n        guard.active = true;\\n    }\\n}\\n\",\"keccak256\":\"0x91dc6d40165cb36933d6545618bf6642ff14cc16968939aa5441860ab6a8806f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkAfterExecution(bytes32,bool)":{"notice":"Called by the Safe contract after a transaction is executed."},"checkModuleTransaction(address,uint256,bytes,uint8,address)":{"notice":"Called by the Safe contract before a transaction is executed via a module."},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"notice":"Called by the Safe contract before a transaction is executed."}},"version":1}}},"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol":{"Migration":{"abi":[{"inputs":[{"internalType":"address","name":"targetSingleton","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"singleton","type":"address"}],"name":"ChangedMasterCopy","type":"event"},{"inputs":[],"name":"MIGRATION_SINGLETON","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SAFE_120_SINGLETON","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"migrate","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"migrate()":{"details":"This can only be called via a delegatecall."}},"title":"Migration - Migrates a Safe contract from 1.3.0 to 1.2.0","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60c060405234801561001057600080fd5b506040516104d43803806104d48339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806104b26022913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505060805160601c60a05160601c61034861016a6000398060ba52806101a752508060de528061010252506103486000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806310dfd5061461004657806372f7a9561461007a5780638fd3ab80146100ae575b600080fd5b61004e6100b8565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100826100dc565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100b6610100565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156101a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806102e36030913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d474960001b30604051602001808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051602081830303815290604052805190602001206006819055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a156fe4d6967726174696f6e2073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6ca2646970667358221220439513640813d1fe3090885dc04f84edfee78da22daa5a884a788199408ed1ad64736f6c63430007060033496e76616c69642073696e676c65746f6e20616464726573732070726f7669646564","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x4D4 CODESIZE SUB DUP1 PUSH2 0x4D4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B2 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x348 PUSH2 0x16A PUSH1 0x0 CODECOPY DUP1 PUSH1 0xBA MSTORE DUP1 PUSH2 0x1A7 MSTORE POP DUP1 PUSH1 0xDE MSTORE DUP1 PUSH2 0x102 MSTORE POP PUSH2 0x348 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x10DFD506 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x72F7A956 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xAE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0xDC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB6 PUSH2 0x100 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E3 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x35AFF83D86937D35B32E04F0DDC6FF469290EEF2F1B692D8A815C89404D4749 PUSH1 0x0 SHL ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP INVALID 0x4D PUSH10 0x67726174696F6E207368 PUSH16 0x756C64206F6E6C792062652063616C6C PUSH6 0x642076696120 PUSH5 0x656C656761 PUSH21 0x6563616C6CA2646970667358221220439513640813 0xD1 INVALID ADDRESS SWAP1 DUP9 0x5D 0xC0 0x4F DUP5 0xED INVALID 0xE7 DUP14 LOG2 0x2D 0xAA GAS DUP9 0x4A PUSH25 0x8199408ED1AD64736F6C63430007060033496E76616C696420 PUSH20 0x696E676C65746F6E20616464726573732070726F PUSH23 0x6964656400000000000000000000000000000000000000 ","sourceMap":"252:1070:18:-:0;;;518:274;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;653:1;626:29;;:15;:29;;;;618:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;725:15;704:36;;;;;;;;;;;;780:4;750:35;;;;;;;;;;;;518:274;252:1070;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{"3211":[{"length":32,"start":222},{"length":32,"start":258}],"3213":[{"length":32,"start":186},{"length":32,"start":423}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806310dfd5061461004657806372f7a9561461007a5780638fd3ab80146100ae575b600080fd5b61004e6100b8565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100826100dc565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100b6610100565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156101a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806102e36030913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d474960001b30604051602001808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051602081830303815290604052805190602001206006819055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a156fe4d6967726174696f6e2073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6ca2646970667358221220439513640813d1fe3090885dc04f84edfee78da22daa5a884a788199408ed1ad64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x10DFD506 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x72F7A956 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xAE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x82 PUSH2 0xDC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB6 PUSH2 0x100 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2E3 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x35AFF83D86937D35B32E04F0DDC6FF469290EEF2F1B692D8A815C89404D4749 PUSH1 0x0 SHL ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP INVALID 0x4D PUSH10 0x67726174696F6E207368 PUSH16 0x756C64206F6E6C792062652063616C6C PUSH6 0x642076696120 PUSH5 0x656C656761 PUSH21 0x6563616C6CA2646970667358221220439513640813 0xD1 INVALID ADDRESS SWAP1 DUP9 0x5D 0xC0 0x4F DUP5 0xED INVALID 0xE7 DUP14 LOG2 0x2D 0xAA GAS DUP9 0x4A PUSH25 0x8199408ED1AD64736F6C634300070600330000000000000000 ","sourceMap":"252:1070:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;468:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;418:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1003:317;;;:::i;:::-;;468:43;;;:::o;418:44::-;;;:::o;1003:317::-;1064:19;1047:36;;1055:4;1047:36;;;;1039:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1159:18;1147:9;;:30;;;;;;;;;;;;;;;;;;345:66;1237:25;;1264:4;1226:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1216:54;;;;;;1187:26;:83;;;;1285:28;1303:9;;;;;;;;;;1285:28;;;;;;;;;;;;;;;;;;;;1003:317::o"},"gasEstimates":{"creation":{"codeDepositCost":"168000","executionCost":"infinite","totalCost":"infinite"},"external":{"MIGRATION_SINGLETON()":"infinite","SAFE_120_SINGLETON()":"infinite","migrate()":"infinite"}},"methodIdentifiers":{"MIGRATION_SINGLETON()":"72f7a956","SAFE_120_SINGLETON()":"10dfd506","migrate()":"8fd3ab80"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetSingleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"name\":\"ChangedMasterCopy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIGRATION_SINGLETON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_120_SINGLETON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"migrate()\":{\"details\":\"This can only be called via a delegatecall.\"}},\"title\":\"Migration - Migrates a Safe contract from 1.3.0 to 1.2.0\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"migrate()\":{\"notice\":\"Migrates the Safe to the Singleton contract at `migrationSingleton`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol\":\"Migration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {SafeStorage} from \\\"../../libraries/SafeStorage.sol\\\";\\n\\n/**\\n * @title Migration - Migrates a Safe contract from 1.3.0 to 1.2.0\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract Migration is SafeStorage {\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749;\\n\\n    address public immutable MIGRATION_SINGLETON;\\n    address public immutable SAFE_120_SINGLETON;\\n\\n    constructor(address targetSingleton) {\\n        // Singleton address cannot be zero address.\\n        require(targetSingleton != address(0), \\\"Invalid singleton address provided\\\");\\n        SAFE_120_SINGLETON = targetSingleton;\\n        MIGRATION_SINGLETON = address(this);\\n    }\\n\\n    event ChangedMasterCopy(address singleton);\\n\\n    /**\\n     * @notice Migrates the Safe to the Singleton contract at `migrationSingleton`.\\n     * @dev This can only be called via a delegatecall.\\n     */\\n    function migrate() public {\\n        require(address(this) != MIGRATION_SINGLETON, \\\"Migration should only be called via delegatecall\\\");\\n\\n        singleton = SAFE_120_SINGLETON;\\n        _deprecatedDomainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, this));\\n        emit ChangedMasterCopy(singleton);\\n    }\\n}\\n\",\"keccak256\":\"0x981824b010ba7505e2990a87554d220da04bc2e2975c9f68967eedd33bb7e623\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xd2e19f98127e3edf29613dd9c91f74853574a5116a96541a5fadb3133abfc752\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4784,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":4788,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":4792,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":4794,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":4796,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":4798,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":4800,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":4804,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":4810,"contract":"contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol:Migration","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"migrate()":{"notice":"Migrates the Safe to the Singleton contract at `migrationSingleton`."}},"version":1}}},"contracts/external/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"SafeMath","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220edbefc8269fd702dc28be5ef0eac4030c6ed319ab071cfe57d1eda75e1f0dd6464736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xBE 0xFC DUP3 PUSH10 0xFD702DC28BE5EF0EAC40 ADDRESS 0xC6 0xED BALANCE SWAP11 0xB0 PUSH18 0xCFE57D1EDA75E1F0DD6464736F6C63430007 MOD STOP CALLER ","sourceMap":"190:1563:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220edbefc8269fd702dc28be5ef0eac4030c6ed319ab071cfe57d1eda75e1f0dd6464736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xBE 0xFC DUP3 PUSH10 0xFD702DC28BE5EF0EAC40 ADDRESS 0xC6 0xED BALANCE SWAP11 0xB0 PUSH18 0xCFE57D1EDA75E1F0DD6464736F6C63430007 MOD STOP CALLER ","sourceMap":"190:1563:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","max(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Math operations with safety checks that revert on error (overflow/underflow)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Math operations with safety checks that revert on error (overflow/underflow)","version":1}}},"contracts/handler/CompatibilityFallbackHandler.sol":{"CompatibilityFallbackHandler":{"abi":[{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"uint256","name":"requiredSignatures","type":"uint256"}],"name":"checkNSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"encodeMessageDataForSafe","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ISafe","name":"safe","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHashForSafe","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_dataHash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulate","outputs":[{"internalType":"bytes","name":"response","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"checkNSignatures(bytes32,bytes,bytes,uint256)":{"details":"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.      The function was moved to the fallback handler as a part of      1.5.0 contract upgrade. It used to be a part of the Safe core contract, but      was replaced by the same function that also accepts an executor address.","params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","requiredSignatures":"Amount of required valid signatures.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"encodeMessageDataForSafe(address,bytes)":{"details":"Returns the pre-image of the message hash (see getMessageHashForSafe).","params":{"message":"Message that should be encoded.","safe":"Safe to which the message is targeted."},"returns":{"_0":"Encoded message."}},"getMessageHash(bytes)":{"details":"Returns the hash of a message to be signed by owners.","params":{"message":"Raw message bytes."},"returns":{"_0":"Message hash."}},"getMessageHashForSafe(address,bytes)":{"details":"Returns hash of a message that can be signed by owners.","params":{"message":"Message that should be hashed.","safe":"Safe to which the message is targeted."},"returns":{"_0":"Message hash."}},"getModules()":{"details":"Returns array of first 10 modules.","returns":{"_0":"Array of modules."}},"isValidSignature(bytes32,bytes)":{"params":{"_dataHash":"Hash of the data signed on the behalf of address(msg.sender)","_signature":"Signature byte array associated with _dataHash"},"returns":{"_0":"Updated EIP1271 magic value if signature is valid, otherwise 0x0"}},"simulate(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}},"supportsInterface(bytes4)":{"params":{"interfaceId":"Id of the interface."},"returns":{"_0":"if the interface is supported."}}},"title":"Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe Smart Account contracts.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506114d1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c8063230316401161007157806323031640146106345780636ac2478414610788578063b2494df314610877578063bc197c81146108d6578063bd61951d14610a6c578063f23a6e6114610b7e576100b3565b806223de29146100b857806301ffc9a7146101f05780630a1028c41461025357806312fb68e014610322578063150b7a02146104885780631626ba7e1461057e575b600080fd5b6101ee600480360360c08110156100ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561015557600080fd5b82018360208201111561016757600080fd5b8035906020019184600183028401116401000000008311171561018957600080fd5b9091929391929390803590602001906401000000008111156101aa57600080fd5b8201836020820111156101bc57600080fd5b803590602001918460018302840111640100000000831117156101de57600080fd5b9091929391929390505050610c7e565b005b61023b6004803603602081101561020657600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610c88565b60405180821515815260200191505060405180910390f35b61030c6004803603602081101561026957600080fd5b810190808035906020019064010000000081111561028657600080fd5b82018360208201111561029857600080fd5b803590602001918460018302840111640100000000831117156102ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610dc2565b6040518082815260200191505060405180910390f35b6104866004803603608081101561033857600080fd5b81019080803590602001909291908035906020019064010000000081111561035f57600080fd5b82018360208201111561037157600080fd5b8035906020019184600183028401116401000000008311171561039357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103f657600080fd5b82018360208201111561040857600080fd5b8035906020019184600183028401116401000000008311171561042a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610dd5565b005b6105496004803603608081101561049e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561050557600080fd5b82018360208201111561051757600080fd5b8035906020019184600183028401116401000000008311171561053957600080fd5b9091929391929390505050610ee5565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6105ff6004803603604081101561059457600080fd5b8101908080359060200190929190803590602001906401000000008111156105bb57600080fd5b8201836020820111156105cd57600080fd5b803590602001918460018302840111640100000000831117156105ef57600080fd5b9091929391929390505050610efa565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61070d6004803603604081101561064a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561068757600080fd5b82018360208201111561069957600080fd5b803590602001918460018302840111640100000000831117156106bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506110fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074d578082015181840152602081019050610732565b50505050905090810190601f16801561077a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108616004803603604081101561079e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156107db57600080fd5b8201836020820111156107ed57600080fd5b8035906020019184600183028401116401000000008311171561080f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061126a565b6040518082815260200191505060405180910390f35b61087f611285565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108c25780820151818401526020810190506108a7565b505050509050019250505060405180910390f35b610a37600480360360a08110156108ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561094957600080fd5b82018360208201111561095b57600080fd5b8035906020019184602083028401116401000000008311171561097d57600080fd5b90919293919293908035906020019064010000000081111561099e57600080fd5b8201836020820111156109b057600080fd5b803590602001918460208302840111640100000000831117156109d257600080fd5b9091929391929390803590602001906401000000008111156109f357600080fd5b820183602082011115610a0557600080fd5b80359060200191846001830284011164010000000083111715610a2757600080fd5b90919293919293905050506113ec565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610b0360048036036040811015610a8257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610abf57600080fd5b820183602082011115610ad157600080fd5b80359060200191846001830284011164010000000083111715610af357600080fd5b9091929391929390505050611404565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b43578082015181840152602081019050610b28565b50505050905090810190601f168015610b705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610c49600480360360a0811015610b9457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610c0557600080fd5b820183602082011115610c1757600080fd5b80359060200191846001830284011164010000000083111715610c3957600080fd5b909192939192939050505061146e565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b5050505050505050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610d5357507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610dbb57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000610dce338361126a565b9050919050565b610ddd611484565b73ffffffffffffffffffffffffffffffffffffffff16631fcac7f3610e0061148c565b8685856040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610e7a578082015181840152602081019050610e5f565b50505050905090810190601f168015610ea75780820380516001836020036101000a031916815260200191505b509550505050505060006040518083038186803b158015610ec757600080fd5b505afa158015610edb573d6000803e3d6000fd5b5050505050505050565b600063150b7a0260e01b905095945050505050565b6000803390506000610f2b8287604051602001808281526020019150506040516020818303038152906040526110fe565b9050600081805190602001209050600086869050141561104c5760008373ffffffffffffffffffffffffffffffffffffffff16635ae6bd37836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d6020811015610fc257600080fd5b81019080805190602001909291905050501415611047576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f48617368206e6f7420617070726f76656400000000000000000000000000000081525060200191505060405180910390fd5b6110ea565b8273ffffffffffffffffffffffffffffffffffffffff1663ed516d518288886040518463ffffffff1660e01b815260040180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060006040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050505b631626ba7e60e01b93505050509392505050565b606060007f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050601960f81b600160f81b8573ffffffffffffffffffffffffffffffffffffffff1663f698da256040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ad57600080fd5b505afa1580156111c1573d6000803e3d6000fd5b505050506040513d60208110156111d757600080fd5b81019080805190602001909291905050508360405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010183815260200182815260200194505050505060405160208183030381529060405291505092915050565b600061127683836110fe565b80519060200120905092915050565b6060600033905060008173ffffffffffffffffffffffffffffffffffffffff1663cc2f84526001600a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060006040518083038186803b1580156112ff57600080fd5b505afa158015611313573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561133d57600080fd5b810190808051604051939291908464010000000082111561135d57600080fd5b8382019150602082018581111561137357600080fd5b825186602082028301116401000000008211171561139057600080fd5b8083526020830192505050908051906020019060200280838360005b838110156113c75780820151818401526020810190506113ac565b5050505090500160405260200180519060200190929190505050509050809250505090565b600063bc197c8160e01b905098975050505050505050565b60606040517fb4faba09000000000000000000000000000000000000000000000000000000008152600436036004808301376020600036836000335af15060203d036040519250808301604052806020843e60005161146557825160208401fd5b50509392505050565b600063f23a6e6160e01b90509695505050505050565b600033905090565b6000601436033560601c90509056fea26469706673582212209499f6ddbe2148eb45e6e13c46f2bdf67e2e105bfc5369426ec70bb14406fe8664736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x23031640 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x23031640 EQ PUSH2 0x634 JUMPI DUP1 PUSH4 0x6AC24784 EQ PUSH2 0x788 JUMPI DUP1 PUSH4 0xB2494DF3 EQ PUSH2 0x877 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x8D6 JUMPI DUP1 PUSH4 0xBD61951D EQ PUSH2 0xA6C JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0xB7E JUMPI PUSH2 0xB3 JUMP JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xA1028C4 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x12FB68E0 EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x57E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xC7E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x486 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xDD5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x549 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xEE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5FF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x5BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x70D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x687 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x6BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x10FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x74D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x732 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x77A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x861 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x7DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x7ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x80F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x126A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x87F PUSH2 0x1285 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8C2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x8A7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA37 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x97D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x99E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x9B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x9D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x9F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x13EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB03 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x1404 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB43 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB28 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xB70 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC49 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xB94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x146E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xD53 JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xDBB JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDCE CALLER DUP4 PUSH2 0x126A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDDD PUSH2 0x1484 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FCAC7F3 PUSH2 0xE00 PUSH2 0x148C JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE7A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE5F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEA7 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH1 0x0 PUSH2 0xF2B DUP3 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x10FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP7 DUP7 SWAP1 POP EQ ISZERO PUSH2 0x104C JUMPI PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5AE6BD37 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP EQ ISZERO PUSH2 0x1047 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x48617368206E6F7420617070726F766564000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10EA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xED516D51 DUP3 DUP9 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH4 0x1626BA7E PUSH1 0xE0 SHL SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1276 DUP4 DUP4 PUSH2 0x10FE JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCC2F8452 PUSH1 0x1 PUSH1 0xA PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1313 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x1390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13C7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13AC JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP SWAP1 POP DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH32 0xB4FABA0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE SUB PUSH1 0x4 DUP1 DUP4 ADD CALLDATACOPY PUSH1 0x20 PUSH1 0x0 CALLDATASIZE DUP4 PUSH1 0x0 CALLER GAS CALL POP PUSH1 0x20 RETURNDATASIZE SUB PUSH1 0x40 MLOAD SWAP3 POP DUP1 DUP4 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP5 RETURNDATACOPY PUSH1 0x0 MLOAD PUSH2 0x1465 JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD REVERT JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 CALLDATASIZE SUB CALLDATALOAD PUSH1 0x60 SHR SWAP1 POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 SWAP10 0xF6 0xDD 0xBE 0x21 0x48 0xEB GASLIMIT 0xE6 0xE1 EXTCODECOPY CHAINID CALLCODE 0xBD 0xF6 PUSH31 0x2E105BFC5369426EC70BB14406FE8664736F6C634300070600330000000000 ","sourceMap":"490:7785:20:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100b35760003560e01c8063230316401161007157806323031640146106345780636ac2478414610788578063b2494df314610877578063bc197c81146108d6578063bd61951d14610a6c578063f23a6e6114610b7e576100b3565b806223de29146100b857806301ffc9a7146101f05780630a1028c41461025357806312fb68e014610322578063150b7a02146104885780631626ba7e1461057e575b600080fd5b6101ee600480360360c08110156100ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561015557600080fd5b82018360208201111561016757600080fd5b8035906020019184600183028401116401000000008311171561018957600080fd5b9091929391929390803590602001906401000000008111156101aa57600080fd5b8201836020820111156101bc57600080fd5b803590602001918460018302840111640100000000831117156101de57600080fd5b9091929391929390505050610c7e565b005b61023b6004803603602081101561020657600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610c88565b60405180821515815260200191505060405180910390f35b61030c6004803603602081101561026957600080fd5b810190808035906020019064010000000081111561028657600080fd5b82018360208201111561029857600080fd5b803590602001918460018302840111640100000000831117156102ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610dc2565b6040518082815260200191505060405180910390f35b6104866004803603608081101561033857600080fd5b81019080803590602001909291908035906020019064010000000081111561035f57600080fd5b82018360208201111561037157600080fd5b8035906020019184600183028401116401000000008311171561039357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103f657600080fd5b82018360208201111561040857600080fd5b8035906020019184600183028401116401000000008311171561042a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610dd5565b005b6105496004803603608081101561049e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561050557600080fd5b82018360208201111561051757600080fd5b8035906020019184600183028401116401000000008311171561053957600080fd5b9091929391929390505050610ee5565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6105ff6004803603604081101561059457600080fd5b8101908080359060200190929190803590602001906401000000008111156105bb57600080fd5b8201836020820111156105cd57600080fd5b803590602001918460018302840111640100000000831117156105ef57600080fd5b9091929391929390505050610efa565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61070d6004803603604081101561064a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561068757600080fd5b82018360208201111561069957600080fd5b803590602001918460018302840111640100000000831117156106bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506110fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074d578082015181840152602081019050610732565b50505050905090810190601f16801561077a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108616004803603604081101561079e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156107db57600080fd5b8201836020820111156107ed57600080fd5b8035906020019184600183028401116401000000008311171561080f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061126a565b6040518082815260200191505060405180910390f35b61087f611285565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108c25780820151818401526020810190506108a7565b505050509050019250505060405180910390f35b610a37600480360360a08110156108ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561094957600080fd5b82018360208201111561095b57600080fd5b8035906020019184602083028401116401000000008311171561097d57600080fd5b90919293919293908035906020019064010000000081111561099e57600080fd5b8201836020820111156109b057600080fd5b803590602001918460208302840111640100000000831117156109d257600080fd5b9091929391929390803590602001906401000000008111156109f357600080fd5b820183602082011115610a0557600080fd5b80359060200191846001830284011164010000000083111715610a2757600080fd5b90919293919293905050506113ec565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610b0360048036036040811015610a8257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610abf57600080fd5b820183602082011115610ad157600080fd5b80359060200191846001830284011164010000000083111715610af357600080fd5b9091929391929390505050611404565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b43578082015181840152602081019050610b28565b50505050905090810190601f168015610b705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610c49600480360360a0811015610b9457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610c0557600080fd5b820183602082011115610c1757600080fd5b80359060200191846001830284011164010000000083111715610c3957600080fd5b909192939192939050505061146e565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b5050505050505050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610d5357507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610dbb57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000610dce338361126a565b9050919050565b610ddd611484565b73ffffffffffffffffffffffffffffffffffffffff16631fcac7f3610e0061148c565b8685856040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610e7a578082015181840152602081019050610e5f565b50505050905090810190601f168015610ea75780820380516001836020036101000a031916815260200191505b509550505050505060006040518083038186803b158015610ec757600080fd5b505afa158015610edb573d6000803e3d6000fd5b5050505050505050565b600063150b7a0260e01b905095945050505050565b6000803390506000610f2b8287604051602001808281526020019150506040516020818303038152906040526110fe565b9050600081805190602001209050600086869050141561104c5760008373ffffffffffffffffffffffffffffffffffffffff16635ae6bd37836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d6020811015610fc257600080fd5b81019080805190602001909291905050501415611047576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f48617368206e6f7420617070726f76656400000000000000000000000000000081525060200191505060405180910390fd5b6110ea565b8273ffffffffffffffffffffffffffffffffffffffff1663ed516d518288886040518463ffffffff1660e01b815260040180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060006040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050505b631626ba7e60e01b93505050509392505050565b606060007f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050601960f81b600160f81b8573ffffffffffffffffffffffffffffffffffffffff1663f698da256040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ad57600080fd5b505afa1580156111c1573d6000803e3d6000fd5b505050506040513d60208110156111d757600080fd5b81019080805190602001909291905050508360405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010183815260200182815260200194505050505060405160208183030381529060405291505092915050565b600061127683836110fe565b80519060200120905092915050565b6060600033905060008173ffffffffffffffffffffffffffffffffffffffff1663cc2f84526001600a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060006040518083038186803b1580156112ff57600080fd5b505afa158015611313573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561133d57600080fd5b810190808051604051939291908464010000000082111561135d57600080fd5b8382019150602082018581111561137357600080fd5b825186602082028301116401000000008211171561139057600080fd5b8083526020830192505050908051906020019060200280838360005b838110156113c75780820151818401526020810190506113ac565b5050505090500160405260200180519060200190929190505050509050809250505090565b600063bc197c8160e01b905098975050505050505050565b60606040517fb4faba09000000000000000000000000000000000000000000000000000000008152600436036004808301376020600036836000335af15060203d036040519250808301604052806020843e60005161146557825160208401fd5b50509392505050565b600063f23a6e6160e01b90509695505050505050565b600033905090565b6000601436033560601c90509056fea26469706673582212209499f6ddbe2148eb45e6e13c46f2bdf67e2e105bfc5369426ec70bb14406fe8664736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x23031640 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x23031640 EQ PUSH2 0x634 JUMPI DUP1 PUSH4 0x6AC24784 EQ PUSH2 0x788 JUMPI DUP1 PUSH4 0xB2494DF3 EQ PUSH2 0x877 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x8D6 JUMPI DUP1 PUSH4 0xBD61951D EQ PUSH2 0xA6C JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0xB7E JUMPI PUSH2 0xB3 JUMP JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xA1028C4 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x12FB68E0 EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x57E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xC7E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x486 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xDD5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x549 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xEE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5FF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x5BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x5CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x70D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x687 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x6BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x10FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x74D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x732 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x77A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x861 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x7DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x7ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x80F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x126A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x87F PUSH2 0x1285 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8C2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x8A7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA37 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x97D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x99E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x9B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x9D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x9F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x13EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB03 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x1404 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB43 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB28 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xB70 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC49 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xB94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x146E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xD53 JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xDBB JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDCE CALLER DUP4 PUSH2 0x126A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDDD PUSH2 0x1484 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FCAC7F3 PUSH2 0xE00 PUSH2 0x148C JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE7A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE5F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEA7 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEDB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH1 0x0 PUSH2 0xF2B DUP3 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x10FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP7 DUP7 SWAP1 POP EQ ISZERO PUSH2 0x104C JUMPI PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5AE6BD37 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP EQ ISZERO PUSH2 0x1047 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x48617368206E6F7420617070726F766564000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10EA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xED516D51 DUP3 DUP9 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH4 0x1626BA7E PUSH1 0xE0 SHL SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1276 DUP4 DUP4 PUSH2 0x10FE JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCC2F8452 PUSH1 0x1 PUSH1 0xA PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1313 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x1390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13C7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13AC JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP SWAP1 POP DUP1 SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH32 0xB4FABA0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE SUB PUSH1 0x4 DUP1 DUP4 ADD CALLDATACOPY PUSH1 0x20 PUSH1 0x0 CALLDATASIZE DUP4 PUSH1 0x0 CALLER GAS CALL POP PUSH1 0x20 RETURNDATASIZE SUB PUSH1 0x40 MLOAD SWAP3 POP DUP1 DUP4 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP5 RETURNDATACOPY PUSH1 0x0 MLOAD PUSH2 0x1465 JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD REVERT JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 CALLDATASIZE SUB CALLDATALOAD PUSH1 0x60 SHR SWAP1 POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 SWAP10 0xF6 0xDD 0xBE 0x21 0x48 0xEB GASLIMIT 0xE6 0xE1 EXTCODECOPY CHAINID CALLCODE 0xBD 0xF6 PUSH31 0x2E105BFC5369426EC70BB14406FE8664736F6C634300070600330000000000 ","sourceMap":"490:7785:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1652:199:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2076:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1073:158:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7982:291;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1400:143:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;2525:586:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1480:308;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2018:169;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3213:261;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1047:226:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;4053:3095:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;755:153:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1652:199;;;;;;;;;:::o;2076:306::-;2163:4;2213:38;2198:53;;;:11;:53;;;;:121;;;;2282:37;2267:52;;;:11;:52;;;;2198:121;:177;;;;2350:25;2335:40;;;:11;:40;;;;2198:177;2179:196;;2076:306;;;:::o;1073:158:20:-;1140:7;1166:58;1202:10;1216:7;1166:21;:58::i;:::-;1159:65;;1073:158;;;:::o;7982:291::-;8181:10;:8;:10::i;:::-;8167:43;;;8211:12;:10;:12::i;:::-;8225:8;8235:10;8247:18;8167:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7982:291;;;;:::o;1400:143:22:-;1501:6;1526:10;1519:17;;;;1400:143;;;;;;;:::o;2525:586:20:-;2627:6;2680:10;2707;2680:39;;2729:24;2756:53;2781:4;2798:9;2787:21;;;;;;;;;;;;;;;;;;;;;;;;;2756:24;:53::i;:::-;2729:80;;2819:19;2851:11;2841:22;;;;;;2819:44;;2898:1;2877:10;;:17;;:22;2873:196;;;2959:1;2923:4;:19;;;2943:11;2923:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:37;;2915:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2873:196;;;3013:4;:20;;;3034:11;3047:10;;3013:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2873:196;269:10:32;3085:19:20;;3078:26;;;;;2525:586;;;;;:::o;1480:308::-;1569:12;1593:23;688:66;1640:17;;1669:7;1659:18;;;;;;1629:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1619:60;;;;;;1593:86;;1720:4;1713:12;;1734:4;1727:12;;1741:4;:20;;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1765:15;1696:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1689:92;;;1480:308;;;;:::o;2018:169::-;2104:7;2140:39;2165:4;2171:7;2140:24;:39::i;:::-;2130:50;;;;;;2123:57;;2018:169;;;;:::o;3213:261::-;3258:16;3321:10;3348;3321:39;;3371:22;3399:4;:24;;;910:3;3442:2;3399:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3370:75;;;3462:5;3455:12;;;;3213:261;:::o;1047:226:22:-;1231:6;1256:10;1249:17;;;;1047:226;;;;;;;;;;:::o;4053:3095:20:-;4145:21;4569:4;4563:11;4750:18;4745:3;4738:31;5222:4;5206:14;5202:25;5196:4;5189;5184:3;5180:14;5167:61;6348:4;6322;5840:14;5815:3;5792:1;5762:8;5635:5;5609:761;5588:796;6819:4;6801:16;6797:27;6855:4;6849:11;6837:23;;6900:12;6890:8;6886:27;6880:4;6873:41;6958:12;6952:4;6942:8;6927:44;7001:4;6995:11;6985:2;;7060:8;7054:15;7047:4;7037:8;7033:19;7026:44;6985:2;4538:2556;;;;;;;:::o;755:153:22:-;866:6;891:10;884:17;;;;755:153;;;;;;;;:::o;1562:86:21:-;1605:7;1631:10;1624:17;;1562:86;:::o;1053:396::-;1098:14;1380:2;1364:14;1360:23;1347:37;1343:2;1339:46;1329:56;;1315:80;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1065800","executionCost":"1107","totalCost":"1066907"},"external":{"checkNSignatures(bytes32,bytes,bytes,uint256)":"infinite","encodeMessageDataForSafe(address,bytes)":"infinite","getMessageHash(bytes)":"infinite","getMessageHashForSafe(address,bytes)":"infinite","getModules()":"infinite","isValidSignature(bytes32,bytes)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"962","onERC1155Received(address,address,uint256,uint256,bytes)":"704","onERC721Received(address,address,uint256,bytes)":"654","simulate(address,bytes)":"infinite","supportsInterface(bytes4)":"454","tokensReceived(address,address,address,uint256,bytes,bytes)":"694"}},"methodIdentifiers":{"checkNSignatures(bytes32,bytes,bytes,uint256)":"12fb68e0","encodeMessageDataForSafe(address,bytes)":"23031640","getMessageHash(bytes)":"0a1028c4","getMessageHashForSafe(address,bytes)":"6ac24784","getModules()":"b2494df3","isValidSignature(bytes32,bytes)":"1626ba7e","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","simulate(address,bytes)":"bd61951d","supportsInterface(bytes4)":"01ffc9a7","tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"encodeMessageDataForSafe\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHashForSafe\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"checkNSignatures(bytes32,bytes,bytes,uint256)\":{\"details\":\"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.      The function was moved to the fallback handler as a part of      1.5.0 contract upgrade. It used to be a part of the Safe core contract, but      was replaced by the same function that also accepts an executor address.\",\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"requiredSignatures\":\"Amount of required valid signatures.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"encodeMessageDataForSafe(address,bytes)\":{\"details\":\"Returns the pre-image of the message hash (see getMessageHashForSafe).\",\"params\":{\"message\":\"Message that should be encoded.\",\"safe\":\"Safe to which the message is targeted.\"},\"returns\":{\"_0\":\"Encoded message.\"}},\"getMessageHash(bytes)\":{\"details\":\"Returns the hash of a message to be signed by owners.\",\"params\":{\"message\":\"Raw message bytes.\"},\"returns\":{\"_0\":\"Message hash.\"}},\"getMessageHashForSafe(address,bytes)\":{\"details\":\"Returns hash of a message that can be signed by owners.\",\"params\":{\"message\":\"Message that should be hashed.\",\"safe\":\"Safe to which the message is targeted.\"},\"returns\":{\"_0\":\"Message hash.\"}},\"getModules()\":{\"details\":\"Returns array of first 10 modules.\",\"returns\":{\"_0\":\"Array of modules.\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_dataHash\":\"Hash of the data signed on the behalf of address(msg.sender)\",\"_signature\":\"Signature byte array associated with _dataHash\"},\"returns\":{\"_0\":\"Updated EIP1271 magic value if signature is valid, otherwise 0x0\"}},\"simulate(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface.\"},\"returns\":{\"_0\":\"if the interface is supported.\"}}},\"title\":\"Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe Smart Account contracts.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkNSignatures(bytes32,bytes,bytes,uint256)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Implementation of updated EIP-1271 signature validation method.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles ERC1155 Token callback. return Standardized onERC1155Received return value.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles ERC721 Token callback.  return Standardized onERC721Received return value.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Handles ERC777 Token callback. return nothing (not standardized)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handler/CompatibilityFallbackHandler.sol\":\"CompatibilityFallbackHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/handler/CompatibilityFallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {TokenCallbackHandler} from \\\"./TokenCallbackHandler.sol\\\";\\nimport {ISignatureValidator} from \\\"../interfaces/ISignatureValidator.sol\\\";\\nimport {ISafe} from \\\"../interfaces/ISafe.sol\\\";\\nimport {HandlerContext} from \\\"./HandlerContext.sol\\\";\\n\\n/**\\n * @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe Smart Account contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract CompatibilityFallbackHandler is TokenCallbackHandler, ISignatureValidator, HandlerContext {\\n    // keccak256(\\\"SafeMessage(bytes message)\\\");\\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\\n\\n    bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\\\"simulate(address,bytes)\\\"));\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    /**\\n     * @dev Returns the hash of a message to be signed by owners.\\n     * @param message Raw message bytes.\\n     * @return Message hash.\\n     */\\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\\n        return getMessageHashForSafe(ISafe(payable(msg.sender)), message);\\n    }\\n\\n    /**\\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\\n     * @param safe Safe to which the message is targeted.\\n     * @param message Message that should be encoded.\\n     * @return Encoded message.\\n     */\\n    function encodeMessageDataForSafe(ISafe safe, bytes memory message) public view returns (bytes memory) {\\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), safe.domainSeparator(), safeMessageHash);\\n    }\\n\\n    /**\\n     * @dev Returns hash of a message that can be signed by owners.\\n     * @param safe Safe to which the message is targeted.\\n     * @param message Message that should be hashed.\\n     * @return Message hash.\\n     */\\n    function getMessageHashForSafe(ISafe safe, bytes memory message) public view returns (bytes32) {\\n        return keccak256(encodeMessageDataForSafe(safe, message));\\n    }\\n\\n    /**\\n     * @notice Implementation of updated EIP-1271 signature validation method.\\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _dataHash\\n     * @return Updated EIP1271 magic value if signature is valid, otherwise 0x0\\n     */\\n    function isValidSignature(bytes32 _dataHash, bytes calldata _signature) public view override returns (bytes4) {\\n        // Caller should be a Safe\\n        ISafe safe = ISafe(payable(msg.sender));\\n        bytes memory messageData = encodeMessageDataForSafe(safe, abi.encode(_dataHash));\\n        bytes32 messageHash = keccak256(messageData);\\n        if (_signature.length == 0) {\\n            require(safe.signedMessages(messageHash) != 0, \\\"Hash not approved\\\");\\n        } else {\\n            safe.checkSignatures(messageHash, _signature);\\n        }\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /**\\n     * @dev Returns array of first 10 modules.\\n     * @return Array of modules.\\n     */\\n    function getModules() external view returns (address[] memory) {\\n        // Caller should be a Safe\\n        ISafe safe = ISafe(payable(msg.sender));\\n        (address[] memory array, ) = safe.getModulesPaginated(SENTINEL_MODULES, 10);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\\n     * @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulate(address targetContract, bytes calldata calldataPayload) external returns (bytes memory response) {\\n        /**\\n         * Suppress compiler warnings about not using parameters, while allowing\\n         * parameters to keep names for documentation purposes. This does not\\n         * generate code.\\n         */\\n        targetContract;\\n        calldataPayload;\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            /**\\n             * Store `simulateAndRevert.selector`.\\n             * String representation is used to force right padding\\n             */\\n            mstore(ptr, \\\"\\\\xb4\\\\xfa\\\\xba\\\\x09\\\")\\n\\n            /**\\n             * Abuse the fact that both this and the internal methods have the\\n             * same signature, and differ only in symbol name (and therefore,\\n             * selector) and copy calldata directly. This saves us approximately\\n             * 250 bytes of code and 300 gas at runtime over the\\n             * `abi.encodeWithSelector` builtin.\\n             */\\n            calldatacopy(add(ptr, 0x04), 0x04, sub(calldatasize(), 0x04))\\n\\n            /**\\n             * `pop` is required here by the compiler, as top level expressions\\n             * can't have return values in inline assembly. `call` typically\\n             * returns a 0 or 1 value indicated whether or not it reverted, but\\n             * since we know it will always revert, we can safely ignore it.\\n             */\\n            pop(\\n                call(\\n                    gas(),\\n                    // address() has been changed to caller() to use the implementation of the Safe\\n                    caller(),\\n                    0,\\n                    ptr,\\n                    calldatasize(),\\n                    /**\\n                     * The `simulateAndRevert` call always reverts, and\\n                     * instead encodes whether or not it was successful in the return\\n                     * data. The first 32-byte word of the return data contains the\\n                     * `success` value, so write it to memory address 0x00 (which is\\n                     * reserved Solidity scratch space and OK to use).\\n                     */\\n                    0x00,\\n                    0x20\\n                )\\n            )\\n\\n            /**\\n             * Allocate and copy the response bytes, making sure to increment\\n             * the free memory pointer accordingly (in case this method is\\n             * called as an internal function). The remaining `returndata[0x20:]`\\n             * contains the ABI encoded response bytes, so we can just write it\\n             * as is to memory.\\n             */\\n            let responseSize := sub(returndatasize(), 0x20)\\n            response := mload(0x40)\\n            mstore(0x40, add(response, responseSize))\\n            returndatacopy(response, 0x20, responseSize)\\n\\n            if iszero(mload(0x00)) {\\n                revert(add(response, 0x20), mload(response))\\n            }\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     *      The function was moved to the fallback handler as a part of\\n     *      1.5.0 contract upgrade. It used to be a part of the Safe core contract, but\\n     *      was replaced by the same function that also accepts an executor address.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(\\n        bytes32 dataHash,\\n        bytes memory /* IGNORED */,\\n        bytes memory signatures,\\n        uint256 requiredSignatures\\n    ) public view {\\n        ISafe(payable(_manager())).checkNSignatures(_msgSender(), dataHash, signatures, requiredSignatures);\\n    }\\n}\\n\",\"keccak256\":\"0x21bfcc417bdd8cce476e502c4c34b0099441a1c050521306ee398d519b5b181c\",\"license\":\"LGPL-3.0-only\"},\"contracts/handler/HandlerContext.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\\n * @dev The fallback manager appends the following context to the calldata:\\n *      1. Fallback manager caller address (non-padded)\\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract HandlerContext {\\n    /**\\n     * @notice Allows fetching the original caller address.\\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\\n     *      check information against the calling manager.\\n     * @return sender Original caller address.\\n     */\\n    function _msgSender() internal pure returns (address sender) {\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Returns the FallbackManager address\\n     * @return Fallback manager address\\n     */\\n    function _manager() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x613d43e8a025b0a15c182c849002666f9a73e8c31ae732177d12a6b7aaaef169\",\"license\":\"LGPL-3.0-only\"},\"contracts/handler/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ERC1155TokenReceiver} from \\\"../interfaces/ERC1155TokenReceiver.sol\\\";\\nimport {ERC721TokenReceiver} from \\\"../interfaces/ERC721TokenReceiver.sol\\\";\\nimport {ERC777TokensRecipient} from \\\"../interfaces/ERC777TokensRecipient.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\\n    /**\\n     * @notice Handles ERC1155 Token callback.\\n     * return Standardized onERC1155Received return value.\\n     */\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    /**\\n     * @notice Handles ERC1155 Token batch callback.\\n     * return Standardized onERC1155BatchReceived return value.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    /**\\n     * @notice Handles ERC721 Token callback.\\n     *  return Standardized onERC721Received return value.\\n     */\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Handles ERC777 Token callback.\\n     * return nothing (not standardized)\\n     */\\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    /**\\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\\n     * @param interfaceId Id of the interface.\\n     * @return if the interface is supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x600f6c9fe45db30e7b22cc843c946f3cb1dc2595c9514134383f4bb76a643c68\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface ERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n     *      This function MUST revert if it rejects the transfer.\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _id        The ID of the token being transferred.\\n     * @param _value     The amount of tokens being transferred.\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n     *      This function MUST revert if it rejects the transfer(s).\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *  unless throwing\\n     */\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title ERC777TokensRecipient\\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\\n */\\ninterface ERC777TokensRecipient {\\n    /**\\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\\n     * @param operator The address of the operator performing the transfer or minting operation.\\n     * @param from The address of the sender.\\n     * @param to The address of the recipient.\\n     * @param amount The amount of tokens that were transferred or minted.\\n     * @param data Additional data that was passed during the transfer or minting operation.\\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32ca7f1610659f35e52f5a989e1d844b7847ad57fab06e0cae5bc027248536ac\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice EIP1271 method to validate a signature.\\n     * @param _hash Hash of the data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0xae1d485aedcb9dd2c4a4eaba3d4183ccefc5604d0160b9ae0eaf1fe5566df7e2\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkNSignatures(bytes32,bytes,bytes,uint256)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"isValidSignature(bytes32,bytes)":{"notice":"Implementation of updated EIP-1271 signature validation method."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles ERC1155 Token callback. return Standardized onERC1155Received return value."},"onERC721Received(address,address,uint256,bytes)":{"notice":"Handles ERC721 Token callback.  return Standardized onERC721Received return value."},"supportsInterface(bytes4)":{"notice":"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165."},"tokensReceived(address,address,address,uint256,bytes,bytes)":{"notice":"Handles ERC777 Token callback. return nothing (not standardized)"}},"version":1}}},"contracts/handler/HandlerContext.sol":{"HandlerContext":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","details":"The fallback manager appends the following context to the calldata:      1. Fallback manager caller address (non-padded) based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol","kind":"dev","methods":{},"title":"Handler Context - Allows the fallback handler to extract addition context from the calldata","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"details\":\"The fallback manager appends the following context to the calldata:      1. Fallback manager caller address (non-padded) based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Handler Context - Allows the fallback handler to extract addition context from the calldata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handler/HandlerContext.sol\":\"HandlerContext\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/handler/HandlerContext.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\\n * @dev The fallback manager appends the following context to the calldata:\\n *      1. Fallback manager caller address (non-padded)\\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract HandlerContext {\\n    /**\\n     * @notice Allows fetching the original caller address.\\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\\n     *      check information against the calling manager.\\n     * @return sender Original caller address.\\n     */\\n    function _msgSender() internal pure returns (address sender) {\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Returns the FallbackManager address\\n     * @return Fallback manager address\\n     */\\n    function _manager() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x613d43e8a025b0a15c182c849002666f9a73e8c31ae732177d12a6b7aaaef169\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/handler/TokenCallbackHandler.sol":{"TokenCallbackHandler":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"supportsInterface(bytes4)":{"params":{"interfaceId":"Id of the interface."},"returns":{"_0":"if the interface is supported."}}},"title":"Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061073f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c806223de291461005b57806301ffc9a714610193578063150b7a02146101f6578063bc197c81146102ec578063f23a6e6114610482575b600080fd5b610191600480360360c081101561007157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100f857600080fd5b82018360208201111561010a57600080fd5b8035906020019184600183028401116401000000008311171561012c57600080fd5b90919293919293908035906020019064010000000081111561014d57600080fd5b82018360208201111561015f57600080fd5b8035906020019184600183028401116401000000008311171561018157600080fd5b9091929391929390505050610582565b005b6101de600480360360208110156101a957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061058c565b60405180821515815260200191505060405180910390f35b6102b76004803603608081101561020c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561027357600080fd5b82018360208201111561028557600080fd5b803590602001918460018302840111640100000000831117156102a757600080fd5b90919293919293905050506106c6565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61044d600480360360a081101561030257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561035f57600080fd5b82018360208201111561037157600080fd5b8035906020019184602083028401116401000000008311171561039357600080fd5b9091929391929390803590602001906401000000008111156103b457600080fd5b8201836020820111156103c657600080fd5b803590602001918460208302840111640100000000831117156103e857600080fd5b90919293919293908035906020019064010000000081111561040957600080fd5b82018360208201111561041b57600080fd5b8035906020019184600183028401116401000000008311171561043d57600080fd5b90919293919293905050506106db565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61054d600480360360a081101561049857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561050957600080fd5b82018360208201111561051b57600080fd5b8035906020019184600183028401116401000000008311171561053d57600080fd5b90919293919293905050506106f3565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b5050505050505050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061065757507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106bf57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b600063bc197c8160e01b905098975050505050505050565b600063f23a6e6160e01b9050969550505050505056fea2646970667358221220474a1784c2cabaf321b5fd89ad4a83832466956a37782c15f0c5ad9fe444469a64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x73F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x23DE29 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x482 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x191 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x582 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x58C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x44D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x657 JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x6BF JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0x4A OR DUP5 0xC2 0xCA 0xBA RETURN 0x21 0xB5 REVERT DUP10 0xAD 0x4A DUP4 DUP4 0x24 PUSH7 0x956A37782C15F0 0xC5 0xAD SWAP16 0xE4 DIFFICULTY CHAINID SWAP11 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"520:1864:22:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100565760003560e01c806223de291461005b57806301ffc9a714610193578063150b7a02146101f6578063bc197c81146102ec578063f23a6e6114610482575b600080fd5b610191600480360360c081101561007157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100f857600080fd5b82018360208201111561010a57600080fd5b8035906020019184600183028401116401000000008311171561012c57600080fd5b90919293919293908035906020019064010000000081111561014d57600080fd5b82018360208201111561015f57600080fd5b8035906020019184600183028401116401000000008311171561018157600080fd5b9091929391929390505050610582565b005b6101de600480360360208110156101a957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061058c565b60405180821515815260200191505060405180910390f35b6102b76004803603608081101561020c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561027357600080fd5b82018360208201111561028557600080fd5b803590602001918460018302840111640100000000831117156102a757600080fd5b90919293919293905050506106c6565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61044d600480360360a081101561030257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561035f57600080fd5b82018360208201111561037157600080fd5b8035906020019184602083028401116401000000008311171561039357600080fd5b9091929391929390803590602001906401000000008111156103b457600080fd5b8201836020820111156103c657600080fd5b803590602001918460208302840111640100000000831117156103e857600080fd5b90919293919293908035906020019064010000000081111561040957600080fd5b82018360208201111561041b57600080fd5b8035906020019184600183028401116401000000008311171561043d57600080fd5b90919293919293905050506106db565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b61054d600480360360a081101561049857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561050957600080fd5b82018360208201111561051b57600080fd5b8035906020019184600183028401116401000000008311171561053d57600080fd5b90919293919293905050506106f3565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b5050505050505050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061065757507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106bf57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b600063bc197c8160e01b905098975050505050505050565b600063f23a6e6160e01b9050969550505050505056fea2646970667358221220474a1784c2cabaf321b5fd89ad4a83832466956a37782c15f0c5ad9fe444469a64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x23DE29 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x482 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x191 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x582 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x58C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x44D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x657 JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x6BF JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0x4A OR DUP5 0xC2 0xCA 0xBA RETURN 0x21 0xB5 REVERT DUP10 0xAD 0x4A DUP4 DUP4 0x24 PUSH7 0x956A37782C15F0 0xC5 0xAD SWAP16 0xE4 DIFFICULTY CHAINID SWAP11 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"520:1864:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1652:199;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2076:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1400:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1047:226;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;755:153;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1652:199;;;;;;;;;:::o;2076:306::-;2163:4;2213:38;2198:53;;;:11;:53;;;;:121;;;;2282:37;2267:52;;;:11;:52;;;;2198:121;:177;;;;2350:25;2335:40;;;:11;:40;;;;2198:177;2179:196;;2076:306;;;:::o;1400:143::-;1501:6;1526:10;1519:17;;;;1400:143;;;;;;;:::o;1047:226::-;1231:6;1256:10;1249:17;;;;1047:226;;;;;;;;;;:::o;755:153::-;866:6;891:10;884:17;;;;755:153;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"371000","executionCost":"405","totalCost":"371405"},"external":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"940","onERC1155Received(address,address,uint256,uint256,bytes)":"660","onERC721Received(address,address,uint256,bytes)":"587","supportsInterface(bytes4)":"431","tokensReceived(address,address,address,uint256,bytes,bytes)":"671"}},"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","supportsInterface(bytes4)":"01ffc9a7","tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface.\"},\"returns\":{\"_0\":\"if the interface is supported.\"}}},\"title\":\"Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles ERC1155 Token callback. return Standardized onERC1155Received return value.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles ERC721 Token callback.  return Standardized onERC721Received return value.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Handles ERC777 Token callback. return nothing (not standardized)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handler/TokenCallbackHandler.sol\":\"TokenCallbackHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/handler/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ERC1155TokenReceiver} from \\\"../interfaces/ERC1155TokenReceiver.sol\\\";\\nimport {ERC721TokenReceiver} from \\\"../interfaces/ERC721TokenReceiver.sol\\\";\\nimport {ERC777TokensRecipient} from \\\"../interfaces/ERC777TokensRecipient.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\\n    /**\\n     * @notice Handles ERC1155 Token callback.\\n     * return Standardized onERC1155Received return value.\\n     */\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    /**\\n     * @notice Handles ERC1155 Token batch callback.\\n     * return Standardized onERC1155BatchReceived return value.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    /**\\n     * @notice Handles ERC721 Token callback.\\n     *  return Standardized onERC721Received return value.\\n     */\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Handles ERC777 Token callback.\\n     * return nothing (not standardized)\\n     */\\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    /**\\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\\n     * @param interfaceId Id of the interface.\\n     * @return if the interface is supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x600f6c9fe45db30e7b22cc843c946f3cb1dc2595c9514134383f4bb76a643c68\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface ERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n     *      This function MUST revert if it rejects the transfer.\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _id        The ID of the token being transferred.\\n     * @param _value     The amount of tokens being transferred.\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n     *      This function MUST revert if it rejects the transfer(s).\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *  unless throwing\\n     */\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title ERC777TokensRecipient\\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\\n */\\ninterface ERC777TokensRecipient {\\n    /**\\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\\n     * @param operator The address of the operator performing the transfer or minting operation.\\n     * @param from The address of the sender.\\n     * @param to The address of the recipient.\\n     * @param amount The amount of tokens that were transferred or minted.\\n     * @param data Additional data that was passed during the transfer or minting operation.\\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32ca7f1610659f35e52f5a989e1d844b7847ad57fab06e0cae5bc027248536ac\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles ERC1155 Token callback. return Standardized onERC1155Received return value."},"onERC721Received(address,address,uint256,bytes)":{"notice":"Handles ERC721 Token callback.  return Standardized onERC721Received return value."},"supportsInterface(bytes4)":{"notice":"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165."},"tokensReceived(address,address,address,uint256,bytes,bytes)":{"notice":"Handles ERC777 Token callback. return nothing (not standardized)"}},"version":1}}},"contracts/interfaces/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.      This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).      This function MUST revert if it rejects the transfer(s).      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.","params":{"_data":"Additional data with no specified format.","_from":"The address which previously owned the token.","_ids":"An array containing ids of each token being transferred (order and length must match _values array).","_operator":"The address which initiated the batch transfer (i.e. msg.sender).","_values":"An array containing amounts of each token being transferred (order and length must match _ids array)."},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.      This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.      This function MUST revert if it rejects the transfer.      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.","params":{"_data":"Additional data with no specified format.","_from":"The address which previously owned the token.","_id":"The ID of the token being transferred.","_operator":"The address which initiated the transfer (i.e. msg.sender).","_value":"The amount of tokens being transferred."},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`."}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).      This function MUST revert if it rejects the transfer(s).      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format.\",\"_from\":\"The address which previously owned the token.\",\"_ids\":\"An array containing ids of each token being transferred (order and length must match _values array).\",\"_operator\":\"The address which initiated the batch transfer (i.e. msg.sender).\",\"_values\":\"An array containing amounts of each token being transferred (order and length must match _ids array).\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.      This function MUST revert if it rejects the transfer.      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format.\",\"_from\":\"The address which previously owned the token.\",\"_id\":\"The ID of the token being transferred.\",\"_operator\":\"The address which initiated the transfer (i.e. msg.sender).\",\"_value\":\"The amount of tokens being transferred.\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handle the receipt of multiple ERC1155 token types.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle the receipt of a single ERC1155 token type.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface ERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n     *      This function MUST revert if it rejects the transfer.\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _id        The ID of the token being transferred.\\n     * @param _value     The amount of tokens being transferred.\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n     *      This function MUST revert if it rejects the transfer(s).\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handle the receipt of multiple ERC1155 token types."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handle the receipt of a single ERC1155 token type."}},"version":1}}},"contracts/interfaces/ERC721TokenReceiver.sol":{"ERC721TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Note: the ERC-165 identifier for this interface is 0x150b7a02.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.","params":{"_data":"Additional data with no specified format.","_from":"The address which previously owned the token.","_operator":"The address which called `safeTransferFrom` function.","_tokenId":"The NFT identifier which is being transferred."},"returns":{"_0":"`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.  unless throwing"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Note: the ERC-165 identifier for this interface is 0x150b7a02.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.\",\"params\":{\"_data\":\"Additional data with no specified format.\",\"_from\":\"The address which previously owned the token.\",\"_operator\":\"The address which called `safeTransferFrom` function.\",\"_tokenId\":\"The NFT identifier which is being transferred.\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.  unless throwing\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handle the receipt of an NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ERC721TokenReceiver.sol\":\"ERC721TokenReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *  unless throwing\\n     */\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC721Received(address,address,uint256,bytes)":{"notice":"Handle the receipt of an NFT"}},"version":1}}},"contracts/interfaces/ERC777TokensRecipient.sol":{"ERC777TokensRecipient":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for contracts that will be called with the ERC777 token's `tokensReceived` method. The contract receiving the tokens must implement this interface in order to receive the tokens.","kind":"dev","methods":{"tokensReceived(address,address,address,uint256,bytes,bytes)":{"details":"Called by the ERC777 token contract after a successful transfer or a minting operation.","params":{"amount":"The amount of tokens that were transferred or minted.","data":"Additional data that was passed during the transfer or minting operation.","from":"The address of the sender.","operator":"The address of the operator performing the transfer or minting operation.","operatorData":"Additional data that was passed by the operator during the transfer or minting operation.","to":"The address of the recipient."}}},"title":"ERC777TokensRecipient","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for contracts that will be called with the ERC777 token's `tokensReceived` method. The contract receiving the tokens must implement this interface in order to receive the tokens.\",\"kind\":\"dev\",\"methods\":{\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"Called by the ERC777 token contract after a successful transfer or a minting operation.\",\"params\":{\"amount\":\"The amount of tokens that were transferred or minted.\",\"data\":\"Additional data that was passed during the transfer or minting operation.\",\"from\":\"The address of the sender.\",\"operator\":\"The address of the operator performing the transfer or minting operation.\",\"operatorData\":\"Additional data that was passed by the operator during the transfer or minting operation.\",\"to\":\"The address of the recipient.\"}}},\"title\":\"ERC777TokensRecipient\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ERC777TokensRecipient.sol\":\"ERC777TokensRecipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title ERC777TokensRecipient\\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\\n */\\ninterface ERC777TokensRecipient {\\n    /**\\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\\n     * @param operator The address of the operator performing the transfer or minting operation.\\n     * @param from The address of the sender.\\n     * @param to The address of the recipient.\\n     * @param amount The amount of tokens that were transferred or minted.\\n     * @param data Additional data that was passed during the transfer or minting operation.\\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32ca7f1610659f35e52f5a989e1d844b7847ad57fab06e0cae5bc027248536ac\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol","version":1}}},"contracts/interfaces/IFallbackManager.sol":{"IFallbackManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"@safe-global/safe-protocol","kind":"dev","methods":{"setFallbackHandler(address)":{"details":"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.","params":{"handler":"contract to handle fallback calls."}}},"title":"IFallbackManager - A contract interface managing fallback calls made to this contract.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setFallbackHandler(address)":"f08a0323"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@safe-global/safe-protocol\",\"kind\":\"dev\",\"methods\":{\"setFallbackHandler(address)\":{\"details\":\"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}}},\"title\":\"IFallbackManager - A contract interface managing fallback calls made to this contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setFallbackHandler(address)\":{\"notice\":\"Set Fallback Handler to `handler` for the Safe.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IFallbackManager.sol\":\"IFallbackManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setFallbackHandler(address)":{"notice":"Set Fallback Handler to `handler` for the Safe."}},"version":1}}},"contracts/interfaces/IGuardManager.sol":{"IGuardManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"@safe-global/safe-protocol","kind":"dev","methods":{"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}}},"title":"IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setGuard(address)":"e19a9dd9"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@safe-global/safe-protocol\",\"kind\":\"dev\",\"methods\":{\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}}},\"title\":\"IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGuardManager.sol\":\"IGuardManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."}},"version":1}}},"contracts/interfaces/IModuleManager.sol":{"IModuleManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"@safe-global/safe-protocol","kind":"dev","methods":{"disableModule(address,address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be removed.","prevModule":"Previous module in the modules linked list."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be whitelisted."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"success":"Boolean flag indicating if the call succeeded."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getModulesPaginated(address,uint256)":{"params":{"pageSize":"Maximum number of modules that should be returned. Has to be > 0","start":"Start of the page. Has to be a module or start pointer (0x1 address)"},"returns":{"array":"Array of modules.","next":"Start of the next page."}},"isModuleEnabled(address)":{"returns":{"_0":"True if the module is enabled"}},"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}}},"title":"IModuleManager - An interface of contract managing Safe modules","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"disableModule(address,address)":"e009cfde","enableModule(address)":"610b5925","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getModulesPaginated(address,uint256)":"cc2f8452","isModuleEnabled(address)":"2d9ad53d","setGuard(address)":"e19a9dd9"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@safe-global/safe-protocol\",\"kind\":\"dev\",\"methods\":{\"disableModule(address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Previous module in the modules linked list.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getModulesPaginated(address,uint256)\":{\"params\":{\"pageSize\":\"Maximum number of modules that should be returned. Has to be > 0\",\"start\":\"Start of the page. Has to be a module or start pointer (0x1 address)\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"isModuleEnabled(address)\":{\"returns\":{\"_0\":\"True if the module is enabled\"}},\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}}},\"title\":\"IModuleManager - An interface of contract managing Safe modules\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"},\"getModulesPaginated(address,uint256)\":{\"notice\":\"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array.\"},\"isModuleEnabled(address)\":{\"notice\":\"Returns if an module is enabled\"},\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"}},\"notice\":\"Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners. \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions,  so only trusted and audited modules should be added to a Safe. A malicious module can completely takeover a Safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IModuleManager.sol\":\"IModuleManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"disableModule(address,address)":{"notice":"Disables the module `module` for the Safe."},"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"execTransactionFromModule(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"},"getModulesPaginated(address,uint256)":{"notice":"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."},"isModuleEnabled(address)":{"notice":"Returns if an module is enabled"},"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."}},"notice":"Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners. ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions,  so only trusted and audited modules should be added to a Safe. A malicious module can completely takeover a Safe.","version":1}}},"contracts/interfaces/IOwnerManager.sol":{"IOwnerManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"@safe-global/safe-protocol","kind":"dev","methods":{"addOwnerWithThreshold(address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"New owner address."}},"changeThreshold(uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold."}},"getOwners()":{"returns":{"_0":"Array of Safe owners."}},"getThreshold()":{"returns":{"_0":"Threshold number."}},"isOwner(address)":{"returns":{"_0":"Boolean if owner is an owner of the Safe."}},"removeOwner(address,address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"Owner address to be removed.","prevOwner":"Owner that pointed to the owner to be removed in the linked list"}},"swapOwner(address,address,address)":{"details":"This can only be done via a Safe transaction.","params":{"newOwner":"New owner address.","oldOwner":"Owner address to be replaced.","prevOwner":"Owner that pointed to the owner to be replaced in the linked list"}}},"title":"IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addOwnerWithThreshold(address,uint256)":"0d582f13","changeThreshold(uint256)":"694e80c3","getOwners()":"a0e67e2b","getThreshold()":"e75235b8","isOwner(address)":"2f54bf6e","removeOwner(address,address,uint256)":"f8dc5dd9","swapOwner(address,address,address)":"e318b52b"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@safe-global/safe-protocol\",\"kind\":\"dev\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"changeThreshold(uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getThreshold()\":{\"returns\":{\"_0\":\"Threshold number.\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"Boolean if owner is an owner of the Safe.\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"swapOwner(address,address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"title\":\"IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"getOwners()\":{\"notice\":\"Returns a list of Safe owners.\"},\"getThreshold()\":{\"notice\":\"Returns the number of required confirmations for a Safe transaction aka the threshold.\"},\"isOwner(address)\":{\"notice\":\"Returns if `owner` is an owner of the Safe.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IOwnerManager.sol\":\"IOwnerManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"addOwnerWithThreshold(address,uint256)":{"notice":"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."},"changeThreshold(uint256)":{"notice":"Changes the threshold of the Safe to `_threshold`."},"getOwners()":{"notice":"Returns a list of Safe owners."},"getThreshold()":{"notice":"Returns the number of required confirmations for a Safe transaction aka the threshold."},"isOwner(address)":{"notice":"Returns if `owner` is an owner of the Safe."},"removeOwner(address,address,uint256)":{"notice":"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."},"swapOwner(address,address,address)":{"notice":"Replaces the owner `oldOwner` in the Safe with `newOwner`."}},"version":1}}},"contracts/interfaces/ISafe.sol":{"ISafe":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"approvedHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"ApproveHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"initiator","type":"address"},{"indexed":false,"internalType":"address[]","name":"owners","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"},{"indexed":false,"internalType":"address","name":"initializer","type":"address"},{"indexed":false,"internalType":"address","name":"fallbackHandler","type":"address"}],"name":"SafeSetup","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"SignMsg","type":"event"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"name":"approvedHashes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"uint256","name":"requiredSignatures","type":"uint256"}],"name":"checkNSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"getTransactionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_threshold","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"address","name":"fallbackHandler","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address payable","name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"name":"signedMessages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"@safe-global/safe-protocol","kind":"dev","methods":{"VERSION()":{"returns":{"_0":"Version string."}},"addOwnerWithThreshold(address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"New owner address."}},"approveHash(bytes32)":{"details":"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures","params":{"hashToApprove":"The hash to mark as approved for signatures that are verified by this contract."}},"approvedHashes(address,bytes32)":{"params":{"messageHash":"Hash of message that should be checked.","owner":"Owner address that should be checked."},"returns":{"_0":"Number denoting if an owner approved the hash."}},"changeThreshold(uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold."}},"checkNSignatures(address,bytes32,bytes,uint256)":{"details":"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.","params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","executor":"Address that executing the transaction.        ⚠️⚠️⚠️ Make sure that the executor address is a legitmate executor.        Incorrectly passed the executor might reduce the threshold by 1 signature. ⚠️⚠️⚠️","requiredSignatures":"Amount of required valid signatures.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"checkSignatures(bytes32,bytes)":{"params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"checkSignatures(bytes32,bytes,bytes)":{"details":"This function makes it compatible with previous versions.","params":{"dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"disableModule(address,address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be removed.","prevModule":"Previous module in the modules linked list."}},"domainSeparator()":{"details":"Returns the domain separator for this contract, as defined in the EIP-712 standard.","returns":{"_0":"bytes32 The domain separator hash."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be whitelisted."}},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"details":"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.","params":{"baseGas":"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)","data":"Data payload of Safe transaction.","gasPrice":"Gas price that should be used for the payment calculation.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type of Safe transaction.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the Safe transaction.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."},"returns":{"success":"Boolean indicating transaction's success."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"success":"Boolean flag indicating if the call succeeded."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getModulesPaginated(address,uint256)":{"params":{"pageSize":"Maximum number of modules that should be returned. Has to be > 0","start":"Start of the page. Has to be a module or start pointer (0x1 address)"},"returns":{"array":"Array of modules.","next":"Start of the next page."}},"getOwners()":{"returns":{"_0":"Array of Safe owners."}},"getThreshold()":{"returns":{"_0":"Threshold number."}},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"params":{"_nonce":"Transaction nonce.","baseGas":"Gas costs for data used to trigger the safe transaction.","data":"Data payload.","gasPrice":"Maximum gas price that should be used for this transaction.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the safe transaction.","to":"Destination address.","value":"Ether value."},"returns":{"_0":"Transaction hash."}},"isModuleEnabled(address)":{"returns":{"_0":"True if the module is enabled"}},"isOwner(address)":{"returns":{"_0":"Boolean if owner is an owner of the Safe."}},"nonce()":{"returns":{"_0":"Nonce."}},"removeOwner(address,address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"Owner address to be removed.","prevOwner":"Owner that pointed to the owner to be removed in the linked list"}},"setFallbackHandler(address)":{"details":"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.","params":{"handler":"contract to handle fallback calls."}},"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"details":"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.","params":{"_owners":"List of Safe owners.","_threshold":"Number of required confirmations for a Safe transaction.","data":"Data payload for optional delegate call.","fallbackHandler":"Handler for fallback calls to this contract","payment":"Value that should be paid","paymentReceiver":"Address that should receive the payment (or 0 if tx.origin)","paymentToken":"Token that should be used for the payment (0 is ETH)","to":"Contract address for optional delegate call."}},"signedMessages(bytes32)":{"params":{"messageHash":"Hash of message that should be checked."},"returns":{"_0":"Number denoting if an owner signed the hash."}},"swapOwner(address,address,address)":{"details":"This can only be done via a Safe transaction.","params":{"newOwner":"New owner address.","oldOwner":"Owner address to be replaced.","prevOwner":"Owner that pointed to the owner to be replaced in the linked list"}}},"title":"ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"VERSION()":"ffa1ad74","addOwnerWithThreshold(address,uint256)":"0d582f13","approveHash(bytes32)":"d4d9bdcd","approvedHashes(address,bytes32)":"7d832974","changeThreshold(uint256)":"694e80c3","checkNSignatures(address,bytes32,bytes,uint256)":"1fcac7f3","checkSignatures(bytes32,bytes)":"ed516d51","checkSignatures(bytes32,bytes,bytes)":"934f3a11","disableModule(address,address)":"e009cfde","domainSeparator()":"f698da25","enableModule(address)":"610b5925","execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":"6a761202","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getModulesPaginated(address,uint256)":"cc2f8452","getOwners()":"a0e67e2b","getThreshold()":"e75235b8","getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"d8d11f78","isModuleEnabled(address)":"2d9ad53d","isOwner(address)":"2f54bf6e","nonce()":"affed0e0","removeOwner(address,address,uint256)":"f8dc5dd9","setFallbackHandler(address)":"f08a0323","setGuard(address)":"e19a9dd9","setup(address[],uint256,address,bytes,address,address,uint256,address)":"b63e800d","signedMessages(bytes32)":"5ae6bd37","swapOwner(address,address,address)":"e318b52b"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"approvedHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ApproveHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"}],\"name\":\"SafeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"SignMsg\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashToApprove\",\"type\":\"bytes32\"}],\"name\":\"approveHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"approvedHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"execTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"signedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@safe-global/safe-protocol\",\"kind\":\"dev\",\"methods\":{\"VERSION()\":{\"returns\":{\"_0\":\"Version string.\"}},\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"approveHash(bytes32)\":{\"details\":\"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\",\"params\":{\"hashToApprove\":\"The hash to mark as approved for signatures that are verified by this contract.\"}},\"approvedHashes(address,bytes32)\":{\"params\":{\"messageHash\":\"Hash of message that should be checked.\",\"owner\":\"Owner address that should be checked.\"},\"returns\":{\"_0\":\"Number denoting if an owner approved the hash.\"}},\"changeThreshold(uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"checkNSignatures(address,bytes32,bytes,uint256)\":{\"details\":\"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\",\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"executor\":\"Address that executing the transaction.        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\",\"requiredSignatures\":\"Amount of required valid signatures.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes)\":{\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes,bytes)\":{\"details\":\"This function makes it compatible with previous versions.\",\"params\":{\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"disableModule(address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Previous module in the modules linked list.\"}},\"domainSeparator()\":{\"details\":\"Returns the domain separator for this contract, as defined in the EIP-712 standard.\",\"returns\":{\"_0\":\"bytes32 The domain separator hash.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.\",\"params\":{\"baseGas\":\"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload of Safe transaction.\",\"gasPrice\":\"Gas price that should be used for the payment calculation.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type of Safe transaction.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the Safe transaction.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"},\"returns\":{\"success\":\"Boolean indicating transaction's success.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getModulesPaginated(address,uint256)\":{\"params\":{\"pageSize\":\"Maximum number of modules that should be returned. Has to be > 0\",\"start\":\"Start of the page. Has to be a module or start pointer (0x1 address)\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getThreshold()\":{\"returns\":{\"_0\":\"Threshold number.\"}},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"params\":{\"_nonce\":\"Transaction nonce.\",\"baseGas\":\"Gas costs for data used to trigger the safe transaction.\",\"data\":\"Data payload.\",\"gasPrice\":\"Maximum gas price that should be used for this transaction.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the safe transaction.\",\"to\":\"Destination address.\",\"value\":\"Ether value.\"},\"returns\":{\"_0\":\"Transaction hash.\"}},\"isModuleEnabled(address)\":{\"returns\":{\"_0\":\"True if the module is enabled\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"Boolean if owner is an owner of the Safe.\"}},\"nonce()\":{\"returns\":{\"_0\":\"Nonce.\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"setFallbackHandler(address)\":{\"details\":\"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}},\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"details\":\"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.\",\"params\":{\"_owners\":\"List of Safe owners.\",\"_threshold\":\"Number of required confirmations for a Safe transaction.\",\"data\":\"Data payload for optional delegate call.\",\"fallbackHandler\":\"Handler for fallback calls to this contract\",\"payment\":\"Value that should be paid\",\"paymentReceiver\":\"Address that should receive the payment (or 0 if tx.origin)\",\"paymentToken\":\"Token that should be used for the payment (0 is ETH)\",\"to\":\"Contract address for optional delegate call.\"}},\"signedMessages(bytes32)\":{\"params\":{\"messageHash\":\"Hash of message that should be checked.\"},\"returns\":{\"_0\":\"Number denoting if an owner signed the hash.\"}},\"swapOwner(address,address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"title\":\"ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Returns the version of the Safe contract.\"},\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"approveHash(bytes32)\":{\"notice\":\"Marks hash `hashToApprove` as approved.\"},\"approvedHashes(address,bytes32)\":{\"notice\":\"Returns a uint if the messageHash is approved by the owner.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"checkNSignatures(address,bytes32,bytes,uint256)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"checkSignatures(bytes32,bytes)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"checkSignatures(bytes32,bytes,bytes)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\"},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"},\"getModulesPaginated(address,uint256)\":{\"notice\":\"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array.\"},\"getOwners()\":{\"notice\":\"Returns a list of Safe owners.\"},\"getThreshold()\":{\"notice\":\"Returns the number of required confirmations for a Safe transaction aka the threshold.\"},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"notice\":\"Returns transaction hash to be signed by owners.\"},\"isModuleEnabled(address)\":{\"notice\":\"Returns if an module is enabled\"},\"isOwner(address)\":{\"notice\":\"Returns if `owner` is an owner of the Safe.\"},\"nonce()\":{\"notice\":\"Returns the nonce of the Safe contract.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"setFallbackHandler(address)\":{\"notice\":\"Set Fallback Handler to `handler` for the Safe.\"},\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"notice\":\"Sets an initial storage of the Safe contract.\"},\"signedMessages(bytes32)\":{\"notice\":\"Returns a uint if the messageHash is signed by the owner.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISafe.sol\":\"ISafe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"VERSION()":{"notice":"Returns the version of the Safe contract."},"addOwnerWithThreshold(address,uint256)":{"notice":"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."},"approveHash(bytes32)":{"notice":"Marks hash `hashToApprove` as approved."},"approvedHashes(address,bytes32)":{"notice":"Returns a uint if the messageHash is approved by the owner."},"changeThreshold(uint256)":{"notice":"Changes the threshold of the Safe to `_threshold`."},"checkNSignatures(address,bytes32,bytes,uint256)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"checkSignatures(bytes32,bytes)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"checkSignatures(bytes32,bytes,bytes)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"disableModule(address,address)":{"notice":"Disables the module `module` for the Safe."},"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"notice":"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`."},"execTransactionFromModule(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"},"getModulesPaginated(address,uint256)":{"notice":"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."},"getOwners()":{"notice":"Returns a list of Safe owners."},"getThreshold()":{"notice":"Returns the number of required confirmations for a Safe transaction aka the threshold."},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"notice":"Returns transaction hash to be signed by owners."},"isModuleEnabled(address)":{"notice":"Returns if an module is enabled"},"isOwner(address)":{"notice":"Returns if `owner` is an owner of the Safe."},"nonce()":{"notice":"Returns the nonce of the Safe contract."},"removeOwner(address,address,uint256)":{"notice":"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."},"setFallbackHandler(address)":{"notice":"Set Fallback Handler to `handler` for the Safe."},"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"notice":"Sets an initial storage of the Safe contract."},"signedMessages(bytes32)":{"notice":"Returns a uint if the messageHash is signed by the owner."},"swapOwner(address,address,address)":{"notice":"Replaces the owner `oldOwner` in the Safe with `newOwner`."}},"version":1}}},"contracts/interfaces/ISignatureValidator.sol":{"ISignatureValidator":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isValidSignature(bytes32,bytes)":{"params":{"_hash":"Hash of the data signed on the behalf of address(this).","_signature":"Signature byte array associated with _data. MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isValidSignature(bytes32,bytes)":"1626ba7e"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_hash\":\"Hash of the data signed on the behalf of address(this).\",\"_signature\":\"Signature byte array associated with _data. MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"notice\":\"EIP1271 method to validate a signature.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISignatureValidator.sol\":\"ISignatureValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice EIP1271 method to validate a signature.\\n     * @param _hash Hash of the data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0xae1d485aedcb9dd2c4a4eaba3d4183ccefc5604d0160b9ae0eaf1fe5566df7e2\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isValidSignature(bytes32,bytes)":{"notice":"EIP1271 method to validate a signature."}},"version":1}},"ISignatureValidatorConstants":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220bad1115a484680c6b92eba806697a18753355a1b6c3143bc504130df45e7039264736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA 0xD1 GT GAS 0x48 CHAINID DUP1 0xC6 0xB9 0x2E 0xBA DUP1 PUSH7 0x97A18753355A1B PUSH13 0x3143BC504130DF45E703926473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"119:163:32:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220bad1115a484680c6b92eba806697a18753355a1b6c3143bc504130df45e7039264736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA 0xD1 GT GAS 0x48 CHAINID DUP1 0xC6 0xB9 0x2E 0xBA DUP1 PUSH7 0x97A18753355A1B PUSH13 0x3143BC504130DF45E703926473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"119:163:32:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISignatureValidator.sol\":\"ISignatureValidatorConstants\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice EIP1271 method to validate a signature.\\n     * @param _hash Hash of the data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0xae1d485aedcb9dd2c4a4eaba3d4183ccefc5604d0160b9ae0eaf1fe5566df7e2\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/libraries/Enum.sol":{"Enum":{"abi":[],"devdoc":{"author":"@safe-global/safe-protocol","kind":"dev","methods":{},"title":"Enum - Collection of enums used in Safe Smart Account contracts.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043a481e4677c9a5f66ba9fdf88a8ba1f4597a21597e09e96fb1c8ed7a904997364736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER LOG4 DUP2 0xE4 PUSH8 0x7C9A5F66BA9FDF88 0xA8 0xBA 0x1F GASLIMIT SWAP8 LOG2 ISZERO SWAP8 0xE0 SWAP15 SWAP7 0xFB SHR DUP15 0xD7 0xA9 DIV SWAP10 PUSH20 0x64736F6C63430007060033000000000000000000 ","sourceMap":"196:78:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043a481e4677c9a5f66ba9fdf88a8ba1f4597a21597e09e96fb1c8ed7a904997364736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER LOG4 DUP2 0xE4 PUSH8 0x7C9A5F66BA9FDF88 0xA8 0xBA 0x1F GASLIMIT SWAP8 LOG2 ISZERO SWAP8 0xE0 SWAP15 SWAP7 0xFB SHR DUP15 0xD7 0xA9 DIV SWAP10 PUSH20 0x64736F6C63430007060033000000000000000000 ","sourceMap":"196:78:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"@safe-global/safe-protocol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Enum - Collection of enums used in Safe Smart Account contracts.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Enum.sol\":\"Enum\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/libraries/ErrorMessage.sol":{"ErrorMessage":{"abi":[],"devdoc":{"author":"Shebin John - @remedcu","kind":"dev","methods":{},"title":"Error Message - Contract which uses assembly to revert with a custom error message.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Shebin John - @remedcu\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Error Message - Contract which uses assembly to revert with a custom error message.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The aim is to save gas using assembly to revert with custom error message.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ErrorMessage.sol\":\"ErrorMessage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"The aim is to save gas using assembly to revert with custom error message.","version":1}}},"contracts/libraries/Safe130To141Migration.sol":{"Safe130To141Migration":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"singleton","type":"address"}],"name":"ChangedMasterCopy","type":"event"},{"inputs":[],"name":"SAFE_141_FALLBACK_HANDLER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SAFE_141_SINGLETON","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SAFE_141_SINGLETON_L2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"migrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrateL2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrateL2WithFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrateWithFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls      if the address stored at the storage slot 0 is not a contract. The check is implemented in the `checkCurrentSingleton` function.","events":{"ChangedMasterCopy(address)":{"params":{"singleton":"New master copy address"}}},"kind":"dev","methods":{"constructor":{"details":"Initializes the migrationSingleton with the contract's own address."},"migrate()":{"details":"This function should only be called via a delegatecall to perform the upgrade."},"migrateL2()":{"details":"This function should only be called via a delegatecall to perform the upgrade."},"migrateL2WithFallbackHandler()":{"details":"This function should only be called via a delegatecall to perform the upgrade."},"migrateWithFallbackHandler()":{"details":"This function should only be called via a delegatecall to perform the upgrade."}},"title":"Migration Contract for Safe Upgrade","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506100347341675c099f32341bf84bfc5382af534df5c7461a61017e60201b60201c565b610089576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806106e86024913960400191505060405180910390fd5b6100ac7329fcb43b46531bca003ddc8fcb67ffe91900c76261017e60201b60201c565b610101576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061070c6029913960400191505060405180910390fd5b61012473fd0732dc9e303f09fcef3a7388ad10a83459ec9961017e60201b60201c565b610179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610735602b913960400191505060405180910390fd5b610191565b600080823b905060008111915050919050565b610548806101a06000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638fd3ab801161005b5780638fd3ab80146100f457806392b501b7146100fe578063ed007fc614610132578063fdd097561461013c5761007d565b80636253390f1461008257806368cb3d94146100b65780636ca63244146100c0575b600080fd5b61008a610146565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100be61015e565b005b6100c86101fd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100fc610215565b005b6101066102e0565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61013a6102f8565b005b610144610397565b005b7341675c099f32341bf84bfc5382af534df5c7461a81565b610166610397565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a032373fd0732dc9e303f09fcef3a7388ad10a83459ec996040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156101e357600080fd5b505af11580156101f7573d6000803e3d6000fd5b50505050565b7329fcb43b46531bca003ddc8fcb67ffe91900c76281565b61021d610462565b7341675c099f32341bf84bfc5382af534df5c7461a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b73fd0732dc9e303f09fcef3a7388ad10a83459ec9981565b610300610215565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a032373fd0732dc9e303f09fcef3a7388ad10a83459ec996040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b50505050565b61039f610462565b7329fcb43b46531bca003ddc8fcb67ffe91900c7626000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b61048b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104ff565b6104fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f556e737570706f727465642070726f787920636f6e747261637400000000000081525060200191505060405180910390fd5b565b600080823b90506000811191505091905056fea2646970667358221220d48e3d0966b9caff984832eacaa093e3eac56372810947c97f70b91114582bf064736f6c634300070600335361666520312e342e312053696e676c65746f6e206973206e6f74206465706c6f7965645361666520312e342e312053696e676c65746f6e20284c3229206973206e6f74206465706c6f7965645361666520312e342e312046616c6c6261636b2048616e646c6572206973206e6f74206465706c6f796564","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34 PUSH20 0x41675C099F32341BF84BFC5382AF534DF5C7461A PUSH2 0x17E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6E8 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC PUSH20 0x29FCB43B46531BCA003DDC8FCB67FFE91900C762 PUSH2 0x17E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x101 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x70C PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x124 PUSH20 0xFD0732DC9E303F09FCEF3A7388AD10A83459EC99 PUSH2 0x17E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x179 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x735 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x191 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x548 DUP1 PUSH2 0x1A0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD3AB80 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x92B501B7 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xED007FC6 EQ PUSH2 0x132 JUMPI DUP1 PUSH4 0xFDD09756 EQ PUSH2 0x13C JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x6253390F EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x68CB3D94 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x6CA63244 EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x146 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0x15E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC8 PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC PUSH2 0x215 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x106 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13A PUSH2 0x2F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x144 PUSH2 0x397 JUMP JUMPDEST STOP JUMPDEST PUSH20 0x41675C099F32341BF84BFC5382AF534DF5C7461A DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x397 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0xFD0732DC9E303F09FCEF3A7388AD10A83459EC99 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0x29FCB43B46531BCA003DDC8FCB67FFE91900C762 DUP2 JUMP JUMPDEST PUSH2 0x21D PUSH2 0x462 JUMP JUMPDEST PUSH20 0x41675C099F32341BF84BFC5382AF534DF5C7461A PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH20 0xFD0732DC9E303F09FCEF3A7388AD10A83459EC99 DUP2 JUMP JUMPDEST PUSH2 0x300 PUSH2 0x215 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0xFD0732DC9E303F09FCEF3A7388AD10A83459EC99 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x39F PUSH2 0x462 JUMP JUMPDEST PUSH20 0x29FCB43B46531BCA003DDC8FCB67FFE91900C762 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x48B PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556E737570706F727465642070726F787920636F6E7472616374000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 DUP15 RETURNDATASIZE MULMOD PUSH7 0xB9CAFF984832EA 0xCA LOG0 SWAP4 0xE3 0xEA 0xC5 PUSH4 0x72810947 0xC9 PUSH32 0x70B91114582BF064736F6C634300070600335361666520312E342E312053696E PUSH8 0x6C65746F6E206973 KECCAK256 PUSH15 0x6F74206465706C6F79656453616665 KECCAK256 BALANCE 0x2E CALLVALUE 0x2E BALANCE KECCAK256 MSTORE8 PUSH10 0x6E676C65746F6E20284C ORIGIN 0x29 KECCAK256 PUSH10 0x73206E6F74206465706C PUSH16 0x7965645361666520312E342E31204661 PUSH13 0x6C6261636B2048616E646C6572 KECCAK256 PUSH10 0x73206E6F74206465706C PUSH16 0x79656400000000000000000000000000 ","sourceMap":"815:5449:35:-:0;;;1503:310;;;;;;;;;;1535:30;976:42;1535:10;;;:30;;:::i;:::-;1527:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:33;1143:42;1624:10;;;:33;;:::i;:::-;1616:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1721:37;1330:42;1721:10;;;:37;;:::i;:::-;1713:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;815:5449;;5841:421;5901:4;5917:12;6074:7;6062:20;6054:28;;6254:1;6247:4;:8;6240:15;;;5841:421;;;:::o;815:5449::-;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061007d5760003560e01c80638fd3ab801161005b5780638fd3ab80146100f457806392b501b7146100fe578063ed007fc614610132578063fdd097561461013c5761007d565b80636253390f1461008257806368cb3d94146100b65780636ca63244146100c0575b600080fd5b61008a610146565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100be61015e565b005b6100c86101fd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100fc610215565b005b6101066102e0565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61013a6102f8565b005b610144610397565b005b7341675c099f32341bf84bfc5382af534df5c7461a81565b610166610397565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a032373fd0732dc9e303f09fcef3a7388ad10a83459ec996040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156101e357600080fd5b505af11580156101f7573d6000803e3d6000fd5b50505050565b7329fcb43b46531bca003ddc8fcb67ffe91900c76281565b61021d610462565b7341675c099f32341bf84bfc5382af534df5c7461a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b73fd0732dc9e303f09fcef3a7388ad10a83459ec9981565b610300610215565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a032373fd0732dc9e303f09fcef3a7388ad10a83459ec996040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b50505050565b61039f610462565b7329fcb43b46531bca003ddc8fcb67ffe91900c7626000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b61048b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104ff565b6104fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f556e737570706f727465642070726f787920636f6e747261637400000000000081525060200191505060405180910390fd5b565b600080823b90506000811191505091905056fea2646970667358221220d48e3d0966b9caff984832eacaa093e3eac56372810947c97f70b91114582bf064736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD3AB80 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x92B501B7 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xED007FC6 EQ PUSH2 0x132 JUMPI DUP1 PUSH4 0xFDD09756 EQ PUSH2 0x13C JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x6253390F EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x68CB3D94 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x6CA63244 EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x146 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0x15E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC8 PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC PUSH2 0x215 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x106 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13A PUSH2 0x2F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x144 PUSH2 0x397 JUMP JUMPDEST STOP JUMPDEST PUSH20 0x41675C099F32341BF84BFC5382AF534DF5C7461A DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x397 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0xFD0732DC9E303F09FCEF3A7388AD10A83459EC99 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0x29FCB43B46531BCA003DDC8FCB67FFE91900C762 DUP2 JUMP JUMPDEST PUSH2 0x21D PUSH2 0x462 JUMP JUMPDEST PUSH20 0x41675C099F32341BF84BFC5382AF534DF5C7461A PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH20 0xFD0732DC9E303F09FCEF3A7388AD10A83459EC99 DUP2 JUMP JUMPDEST PUSH2 0x300 PUSH2 0x215 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0xFD0732DC9E303F09FCEF3A7388AD10A83459EC99 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x39F PUSH2 0x462 JUMP JUMPDEST PUSH20 0x29FCB43B46531BCA003DDC8FCB67FFE91900C762 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x48B PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556E737570706F727465642070726F787920636F6E7472616374000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 DUP15 RETURNDATASIZE MULMOD PUSH7 0xB9CAFF984832EA 0xCA LOG0 SWAP4 0xE3 0xEA 0xC5 PUSH4 0x72810947 0xC9 PUSH32 0x70B91114582BF064736F6C634300070600330000000000000000000000000000 ","sourceMap":"815:5449:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;923:96;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4046:229;;;:::i;:::-;;1087:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2865:136;;;:::i;:::-;;1270:103;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3244:223;;;:::i;:::-;;3659:141;;;:::i;:::-;;923:96;976:42;923:96;:::o;4046:229::-;4180:11;:9;:11::i;:::-;4216:4;4202:39;;;1330:42;4202:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4046:229::o;1087:99::-;1143:42;1087:99;:::o;2865:136::-;2457:23;:21;:23::i;:::-;976:42:::1;2920:9;::::0;:30:::1;;;;;;;;;;;;;;;;;;2966:28;2984:9;::::0;::::1;;;;;;;;2966:28;;;;;;;;;;;;;;;;;;;;2865:136::o:0;1270:103::-;1330:42;1270:103;:::o;3244:223::-;3374:9;:7;:9::i;:::-;3408:4;3394:39;;;1330:42;3394:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3244:223::o;3659:141::-;2457:23;:21;:23::i;:::-;1143:42:::1;3716:9;::::0;:33:::1;;;;;;;;;;;;;;;;;;3765:28;3783:9;::::0;::::1;;;;;;;;3765:28;;;;;;;;;;;;;;;;;;;;3659:141::o:0;2200:124::-;2265:21;2276:9;;;;;;;;;;2265:10;:21::i;:::-;2257:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2200:124::o;5841:421::-;5901:4;5917:12;6074:7;6062:20;6054:28;;6254:1;6247:4;:8;6240:15;;;5841:421;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"270400","executionCost":"infinite","totalCost":"infinite"},"external":{"SAFE_141_FALLBACK_HANDLER()":"233","SAFE_141_SINGLETON()":"212","SAFE_141_SINGLETON_L2()":"256","migrate()":"24553","migrateL2()":"24619","migrateL2WithFallbackHandler()":"infinite","migrateWithFallbackHandler()":"infinite"},"internal":{"checkCurrentSingleton()":"infinite","isContract(address)":"747"}},"methodIdentifiers":{"SAFE_141_FALLBACK_HANDLER()":"92b501b7","SAFE_141_SINGLETON()":"6253390f","SAFE_141_SINGLETON_L2()":"6ca63244","migrate()":"8fd3ab80","migrateL2()":"fdd09756","migrateL2WithFallbackHandler()":"68cb3d94","migrateWithFallbackHandler()":"ed007fc6"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"name\":\"ChangedMasterCopy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SAFE_141_FALLBACK_HANDLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_141_SINGLETON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_141_SINGLETON_L2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateL2WithFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateWithFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls      if the address stored at the storage slot 0 is not a contract. The check is implemented in the `checkCurrentSingleton` function.\",\"events\":{\"ChangedMasterCopy(address)\":{\"params\":{\"singleton\":\"New master copy address\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the migrationSingleton with the contract's own address.\"},\"migrate()\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade.\"},\"migrateL2()\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade.\"},\"migrateL2WithFallbackHandler()\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade.\"},\"migrateWithFallbackHandler()\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade.\"}},\"title\":\"Migration Contract for Safe Upgrade\",\"version\":1},\"userdoc\":{\"events\":{\"ChangedMasterCopy(address)\":{\"notice\":\"Event indicating a change of master copy address.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"migrate()\":{\"notice\":\"Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON`\"},\"migrateL2()\":{\"notice\":\"Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2`\"},\"migrateL2WithFallbackHandler()\":{\"notice\":\"Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\"},\"migrateWithFallbackHandler()\":{\"notice\":\"Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\"}},\"notice\":\"This contract facilitates the migration of a Safe contract from version 1.3.0 to 1.4.1.         The older versions should use built-in upgrade methods.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Safe130To141Migration.sol\":\"Safe130To141Migration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Safe130To141Migration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {SafeStorage} from \\\"../libraries/SafeStorage.sol\\\";\\nimport {ISafe} from \\\"../interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title Migration Contract for Safe Upgrade\\n * @notice This contract facilitates the migration of a Safe contract from version 1.3.0 to 1.4.1.\\n *         The older versions should use built-in upgrade methods.\\n * @dev IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address\\n *      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls\\n *      if the address stored at the storage slot 0 is not a contract. The check is implemented in the `checkCurrentSingleton` function.\\n */\\ncontract Safe130To141Migration is SafeStorage {\\n    // Address of Safe contract version 1.4.1 Singleton\\n    address public constant SAFE_141_SINGLETON = address(0x41675C099F32341bf84BFc5382aF534df5C7461a);\\n\\n    // Address of Safe contract version 1.4.1 Singleton (L2)\\n    address public constant SAFE_141_SINGLETON_L2 = address(0x29fcB43b46531BcA003ddC8FCB67FFE91900C762);\\n\\n    // Address of Safe contract version 1.4.1 Compatibility Fallback Handler\\n    address public constant SAFE_141_FALLBACK_HANDLER = address(0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99);\\n\\n    /**\\n     * @notice Constructor\\n     * @dev Initializes the migrationSingleton with the contract's own address.\\n     */\\n    constructor() {\\n        require(isContract(SAFE_141_SINGLETON), \\\"Safe 1.4.1 Singleton is not deployed\\\");\\n        require(isContract(SAFE_141_SINGLETON_L2), \\\"Safe 1.4.1 Singleton (L2) is not deployed\\\");\\n        require(isContract(SAFE_141_FALLBACK_HANDLER), \\\"Safe 1.4.1 Fallback Handler is not deployed\\\");\\n    }\\n\\n    /**\\n     * @dev Checks whether the current singleton address is a contract.\\n     *      The canonical Safe proxy stores the singleton address at the storage slot 0.\\n     *      This migration contract doesn't define it's own storage, so the fact that the storage slot 0 is defined\\n     *      and is a contract ensures that the contract was called with a DELEGATECALL.\\n     */\\n    function checkCurrentSingleton() internal view {\\n        require(isContract(singleton), \\\"Unsupported proxy contract\\\");\\n    }\\n\\n    /// @dev Modifier that checks whether the current singleton address is a contract.\\n    modifier validSingletonOnly() {\\n        checkCurrentSingleton();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Event indicating a change of master copy address.\\n     * @param singleton New master copy address\\n     */\\n    event ChangedMasterCopy(address singleton);\\n\\n    /**\\n     * @notice Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON`\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     */\\n    function migrate() public validSingletonOnly {\\n        singleton = SAFE_141_SINGLETON;\\n\\n        emit ChangedMasterCopy(singleton);\\n    }\\n\\n    /** @notice Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     */\\n    function migrateWithFallbackHandler() public {\\n        // The `migrate` function will take care of the delegatecall check\\n        migrate();\\n\\n        ISafe(address(this)).setFallbackHandler(SAFE_141_FALLBACK_HANDLER);\\n    }\\n\\n    /**\\n     * @notice Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2`\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     */\\n    function migrateL2() public validSingletonOnly {\\n        singleton = SAFE_141_SINGLETON_L2;\\n\\n        emit ChangedMasterCopy(singleton);\\n    }\\n\\n    /** @notice Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     */\\n    function migrateL2WithFallbackHandler() public {\\n        // The `migrateL2` function will take care of the delegatecall check\\n        migrateL2();\\n\\n        ISafe(address(this)).setFallbackHandler(SAFE_141_FALLBACK_HANDLER);\\n    }\\n\\n    /**\\n     * @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\\n     *\\n     * @param account The Ethereum address to be checked.\\n     *\\n     * @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\\n     *\\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\\n     * It may return incorrect results in some edge cases:\\n     *\\n     * - During the contract deployment process, including the constructor, this function may incorrectly identify the\\n     *   contract's own address as an EOA, as the code is not yet deployed.\\n     *\\n     * - If a contract performs a self-destruct operation (using `selfdestruct`) after deployment, this function may\\n     *   incorrectly identify the address as an EOA once the contract is destroyed, as its code will be removed.\\n     *\\n     * - When interacting with external contracts that use delegatecall or other mechanisms to execute code from\\n     *   different contracts, this function may not accurately distinguish between a contract and an EOA, as it only\\n     *   checks the code size at the specified address.\\n     *\\n     * - Contracts that are created using the CREATE2 opcode may not be accurately identified as contracts by this\\n     *   function, especially if the code is not deployed until after the creation.\\n     *\\n     * Developers should use caution when relying on the results of this function for critical decision-making.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        // If the code size is greater than 0, it is a contract; otherwise, it is an EOA.\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd1f9d833d9681017733ed639be929d92fa2af88fce80955d19f6cd9110c8cfc1\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xd2e19f98127e3edf29613dd9c91f74853574a5116a96541a5fadb3133abfc752\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4784,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":4788,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":4792,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":4794,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":4796,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":4798,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":4800,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":4804,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":4810,"contract":"contracts/libraries/Safe130To141Migration.sol:Safe130To141Migration","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"ChangedMasterCopy(address)":{"notice":"Event indicating a change of master copy address."}},"kind":"user","methods":{"constructor":{"notice":"Constructor"},"migrate()":{"notice":"Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON`"},"migrateL2()":{"notice":"Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2`"},"migrateL2WithFallbackHandler()":{"notice":"Migrate to Safe 1.4.1 Singleton (L2) at `SAFE_141_SINGLETON_L2` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`"},"migrateWithFallbackHandler()":{"notice":"Migrate to Safe 1.4.1 Singleton (L1) at `SAFE_141_SINGLETON` and sets the fallback handler to `SAFE_141_FALLBACK_HANDLER`"}},"notice":"This contract facilitates the migration of a Safe contract from version 1.3.0 to 1.4.1.         The older versions should use built-in upgrade methods.","version":1}}},"contracts/libraries/Safe150Migration.sol":{"Safe150Migration":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"singleton","type":"address"}],"name":"ChangedMasterCopy","type":"event"},{"inputs":[],"name":"SAFE_150_FALLBACK_HANDLER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SAFE_150_SINGLETON","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SAFE_150_SINGLETON_L2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"migrateL2Singleton","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrateL2WithFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"migrateL2WithSetGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"migrateL2WithSetGuardAndFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrateSingleton","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrateWithFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"migrateWithSetGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"migrateWithSetGuardAndFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls      if the address stored at the storage slot 0 is not a contract.","events":{"ChangedMasterCopy(address)":{"params":{"singleton":"New master copy address"}}},"kind":"dev","methods":{"constructor":{"details":"Initializes the migrationSingleton with the contract's own address."},"migrateL2Singleton()":{"details":"This function should only be called via a delegatecall to perform the upgrade."},"migrateL2WithSetGuard(address)":{"params":{"guard":"The address of the new guard contract."}},"migrateL2WithSetGuardAndFallbackHandler(address)":{"params":{"guard":"The address of the new guard contract."}},"migrateSingleton()":{"details":"This function should only be called via a delegatecall to perform the upgrade."},"migrateWithSetGuard(address)":{"params":{"guard":"The address of the new guard contract."}},"migrateWithSetGuardAndFallbackHandler(address)":{"params":{"guard":"The address of the new guard contract."}}},"title":"Migration Contract for Safe Upgrade","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506100347388627c8904ecd9df96a572ef32a7ff13b199ed8d61017e60201b60201c565b610089576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610de66024913960400191505060405180910390fd5b6100ac730ee37514644683f7eb9745a5726c722deba77e5261017e60201b60201c565b610101576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180610e0a6029913960400191505060405180910390fd5b610124738aa755cb169991fedc3e306751dcb71964a041c761017e60201b60201c565b610179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610e33602b913960400191505060405180910390fd5b610191565b600080823b905060008111915050919050565b610c46806101a06000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a5e2eedc11610071578063a5e2eedc1461016e578063b7a446f3146101a2578063dc162932146101e6578063ec7b48c91461022a578063ed007fc61461026e578063f6682ab014610278576100a9565b806307f464a4146100ae5780630db9ceab146100b85780631e98bdc9146100ec57806368cb3d9414610120578063807b56d71461012a575b600080fd5b6100b6610282565b005b6100c0610355565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100f461036d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610128610385565b005b61016c6004803603602081101561014057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061042c565b005b6101766104d5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101e4600480360360208110156101b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104ed565b005b610228600480360360208110156101fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061063a565b005b61026c6004803603602081101561024057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610787565b005b610276610830565b005b6102806108d7565b005b61028a6109aa565b610292610a2a565b730ee37514644683f7eb9745a5726c722deba77e526000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b730ee37514644683f7eb9745a5726c722deba77e5281565b738aa755cb169991fedc3e306751dcb71964a041c781565b61038d6109aa565b610395610282565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561041257600080fd5b505af1158015610426573d6000803e3d6000fd5b50505050565b6104346109aa565b61043d816104ed565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b5050505050565b7388627c8904ecd9df96a572ef32a7ff13b199ed8d81565b6104f56109aa565b7388627c8904ecd9df96a572ef32a7ff13b199ed8d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a13073ffffffffffffffffffffffffffffffffffffffff1663e19a9dd9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b5050505050565b6106426109aa565b730ee37514644683f7eb9745a5726c722deba77e526000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a13073ffffffffffffffffffffffffffffffffffffffff1663e19a9dd9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b5050505050565b61078f6109aa565b6107988161063a565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b5050505050565b6108386109aa565b6108406108d7565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b50505050565b6108df6109aa565b6108e7610a2a565b7388627c8904ecd9df96a572ef32a7ff13b199ed8d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6109d360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610bab565b610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610bf06021913960400191505060405180910390fd5b565b6000610a34610bbe565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ba8578073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f945b8148000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b158015610afa57600080fd5b505afa158015610b0e573d6000803e3d6000fd5b505050506040513d6020811015610b2457600080fd5b8101908080519060200190929190505050610ba7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f475333303000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b50565b600080823b905060008111915050919050565b6000807f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c860001b905080549150509056fe547279696e6720746f206d69677261746520616e20696e76616c69642053616665a2646970667358221220b00dc4b0bb6275b40db66d53fa8129d4581db28eea56c7b12780aa585ee7525064736f6c634300070600335361666520312e342e312053696e676c65746f6e206973206e6f74206465706c6f7965645361666520312e342e312053696e676c65746f6e20284c3229206973206e6f74206465706c6f7965645361666520312e342e312046616c6c6261636b2048616e646c6572206973206e6f74206465706c6f796564","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34 PUSH20 0x88627C8904ECD9DF96A572EF32A7FF13B199ED8D PUSH2 0x17E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xDE6 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC PUSH20 0xEE37514644683F7EB9745A5726C722DEBA77E52 PUSH2 0x17E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x101 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE0A PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x124 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH2 0x17E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x179 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE33 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x191 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC46 DUP1 PUSH2 0x1A0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA5E2EEDC GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA5E2EEDC EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xB7A446F3 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xDC162932 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xEC7B48C9 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xED007FC6 EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xF6682AB0 EQ PUSH2 0x278 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x7F464A4 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0xDB9CEAB EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x1E98BDC9 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x68CB3D94 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0x807B56D7 EQ PUSH2 0x12A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x282 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC0 PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF4 PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x128 PUSH2 0x385 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x42C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x176 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x63A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x26C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x787 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH2 0x830 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x280 PUSH2 0x8D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28A PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x292 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xEE37514644683F7EB9745A5726C722DEBA77E52 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH20 0xEE37514644683F7EB9745A5726C722DEBA77E52 DUP2 JUMP JUMPDEST PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 DUP2 JUMP JUMPDEST PUSH2 0x38D PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x395 PUSH2 0x282 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x426 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x434 PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x43D DUP2 PUSH2 0x4ED JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH20 0x88627C8904ECD9DF96A572EF32A7FF13B199ED8D DUP2 JUMP JUMPDEST PUSH2 0x4F5 PUSH2 0x9AA JUMP JUMPDEST PUSH20 0x88627C8904ECD9DF96A572EF32A7FF13B199ED8D PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE19A9DD9 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x633 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x642 PUSH2 0x9AA JUMP JUMPDEST PUSH20 0xEE37514644683F7EB9745A5726C722DEBA77E52 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE19A9DD9 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x780 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x78F PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x798 DUP2 PUSH2 0x63A JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x829 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x838 PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x840 PUSH2 0x8D7 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x8DF PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x8E7 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0x88627C8904ECD9DF96A572EF32A7FF13B199ED8D PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x9D3 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBAB JUMP JUMPDEST PUSH2 0xA28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xBF0 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA34 PUSH2 0xBBE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA8 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB0E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4753333030000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 PUSH1 0x0 SHL SWAP1 POP DUP1 SLOAD SWAP2 POP POP SWAP1 JUMP INVALID SLOAD PUSH19 0x79696E6720746F206D69677261746520616E20 PUSH10 0x6E76616C696420536166 PUSH6 0xA26469706673 PC 0x22 SLT KECCAK256 0xB0 0xD 0xC4 0xB0 0xBB PUSH3 0x75B40D 0xB6 PUSH14 0x53FA8129D4581DB28EEA56C7B127 DUP1 0xAA PC 0x5E 0xE7 MSTORE POP PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER MSTORE8 PUSH2 0x6665 KECCAK256 BALANCE 0x2E CALLVALUE 0x2E BALANCE KECCAK256 MSTORE8 PUSH10 0x6E676C65746F6E206973 KECCAK256 PUSH15 0x6F74206465706C6F79656453616665 KECCAK256 BALANCE 0x2E CALLVALUE 0x2E BALANCE KECCAK256 MSTORE8 PUSH10 0x6E676C65746F6E20284C ORIGIN 0x29 KECCAK256 PUSH10 0x73206E6F74206465706C PUSH16 0x7965645361666520312E342E31204661 PUSH13 0x6C6261636B2048616E646C6572 KECCAK256 PUSH10 0x73206E6F74206465706C PUSH16 0x79656400000000000000000000000000 ","sourceMap":"736:6805:36:-:0;;;2051:310;;;;;;;;;;2083:30;972:42;2083:10;;;:30;;:::i;:::-;2075:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2172:33;1219:42;2172:10;;;:33;;:::i;:::-;2164:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2269:37;1502:42;2269:10;;;:37;;:::i;:::-;2261:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;736:6805;;7118:421;7178:4;7194:12;7351:7;7339:20;7331:28;;7531:1;7524:4;:8;7517:15;;;7118:421;;;:::o;736:6805::-;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a5e2eedc11610071578063a5e2eedc1461016e578063b7a446f3146101a2578063dc162932146101e6578063ec7b48c91461022a578063ed007fc61461026e578063f6682ab014610278576100a9565b806307f464a4146100ae5780630db9ceab146100b85780631e98bdc9146100ec57806368cb3d9414610120578063807b56d71461012a575b600080fd5b6100b6610282565b005b6100c0610355565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100f461036d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610128610385565b005b61016c6004803603602081101561014057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061042c565b005b6101766104d5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101e4600480360360208110156101b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104ed565b005b610228600480360360208110156101fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061063a565b005b61026c6004803603602081101561024057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610787565b005b610276610830565b005b6102806108d7565b005b61028a6109aa565b610292610a2a565b730ee37514644683f7eb9745a5726c722deba77e526000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b730ee37514644683f7eb9745a5726c722deba77e5281565b738aa755cb169991fedc3e306751dcb71964a041c781565b61038d6109aa565b610395610282565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561041257600080fd5b505af1158015610426573d6000803e3d6000fd5b50505050565b6104346109aa565b61043d816104ed565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b5050505050565b7388627c8904ecd9df96a572ef32a7ff13b199ed8d81565b6104f56109aa565b7388627c8904ecd9df96a572ef32a7ff13b199ed8d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a13073ffffffffffffffffffffffffffffffffffffffff1663e19a9dd9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b5050505050565b6106426109aa565b730ee37514644683f7eb9745a5726c722deba77e526000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a13073ffffffffffffffffffffffffffffffffffffffff1663e19a9dd9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b5050505050565b61078f6109aa565b6107988161063a565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b5050505050565b6108386109aa565b6108406108d7565b3073ffffffffffffffffffffffffffffffffffffffff1663f08a0323738aa755cb169991fedc3e306751dcb71964a041c76040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b50505050565b6108df6109aa565b6108e7610a2a565b7388627c8904ecd9df96a572ef32a7ff13b199ed8d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6109d360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610bab565b610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610bf06021913960400191505060405180910390fd5b565b6000610a34610bbe565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ba8578073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f945b8148000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b158015610afa57600080fd5b505afa158015610b0e573d6000803e3d6000fd5b505050506040513d6020811015610b2457600080fd5b8101908080519060200190929190505050610ba7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f475333303000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b50565b600080823b905060008111915050919050565b6000807f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c860001b905080549150509056fe547279696e6720746f206d69677261746520616e20696e76616c69642053616665a2646970667358221220b00dc4b0bb6275b40db66d53fa8129d4581db28eea56c7b12780aa585ee7525064736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA5E2EEDC GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA5E2EEDC EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xB7A446F3 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xDC162932 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xEC7B48C9 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xED007FC6 EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xF6682AB0 EQ PUSH2 0x278 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x7F464A4 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0xDB9CEAB EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x1E98BDC9 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x68CB3D94 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0x807B56D7 EQ PUSH2 0x12A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x282 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC0 PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF4 PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x128 PUSH2 0x385 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x42C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x176 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x228 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x63A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x26C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x787 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH2 0x830 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x280 PUSH2 0x8D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28A PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x292 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xEE37514644683F7EB9745A5726C722DEBA77E52 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH20 0xEE37514644683F7EB9745A5726C722DEBA77E52 DUP2 JUMP JUMPDEST PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 DUP2 JUMP JUMPDEST PUSH2 0x38D PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x395 PUSH2 0x282 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x426 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x434 PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x43D DUP2 PUSH2 0x4ED JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH20 0x88627C8904ECD9DF96A572EF32A7FF13B199ED8D DUP2 JUMP JUMPDEST PUSH2 0x4F5 PUSH2 0x9AA JUMP JUMPDEST PUSH20 0x88627C8904ECD9DF96A572EF32A7FF13B199ED8D PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE19A9DD9 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x633 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x642 PUSH2 0x9AA JUMP JUMPDEST PUSH20 0xEE37514644683F7EB9745A5726C722DEBA77E52 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE19A9DD9 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x780 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x78F PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x798 DUP2 PUSH2 0x63A JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x829 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x838 PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x840 PUSH2 0x8D7 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 PUSH20 0x8AA755CB169991FEDC3E306751DCB71964A041C7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x8DF PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x8E7 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0x88627C8904ECD9DF96A572EF32A7FF13B199ED8D PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x9D3 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBAB JUMP JUMPDEST PUSH2 0xA28 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xBF0 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA34 PUSH2 0xBBE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA8 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FFC9A7 PUSH32 0x945B814800000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB0E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xBA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4753333030000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 PUSH1 0x0 SHL SWAP1 POP DUP1 SLOAD SWAP2 POP POP SWAP1 JUMP INVALID SLOAD PUSH19 0x79696E6720746F206D69677261746520616E20 PUSH10 0x6E76616C696420536166 PUSH6 0xA26469706673 PC 0x22 SLT KECCAK256 0xB0 0xD 0xC4 0xB0 0xBB PUSH3 0x75B40D 0xB6 PUSH14 0x53FA8129D4581DB28EEA56C7B127 DUP1 0xAA PC 0x5E 0xE7 MSTORE POP PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"736:6805:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4686:172;;;:::i;:::-;;1163:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1442:103;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5007:180;;;:::i;:::-;;4286:208;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;919:96;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3859:207;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5364:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5825;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3535:176;;;:::i;:::-;;3248:167;;;:::i;:::-;;4686:172;3018:23;:21;:23::i;:::-;4752:12:::1;:10;:12::i;:::-;1219:42;4775:9;::::0;:33:::1;;;;;;;;;;;;;;;;;;4823:28;4841:9;::::0;::::1;;;;;;;;4823:28;;;;;;;;;;;;;;;;;;;;4686:172::o:0;1163:99::-;1219:42;1163:99;:::o;1442:103::-;1502:42;1442:103;:::o;5007:180::-;3018:23;:21;:23::i;:::-;5083:20:::1;:18;:20::i;:::-;5128:4;5114:39;;;1502:42;5114:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;5007:180::o:0;4286:208::-;3018:23;:21;:23::i;:::-;4384:26:::1;4404:5;4384:19;:26::i;:::-;4435:4;4421:39;;;1502:42;4421:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4286:208:::0;:::o;919:96::-;972:42;919:96;:::o;3859:207::-;3018:23;:21;:23::i;:::-;972:42:::1;3939:9;::::0;:30:::1;;;;;;;;;;;;;;;;;;3984:28;4002:9;::::0;::::1;;;;;;;;3984:28;;;;;;;;;;;;;;;;;;;;4037:4;4023:29;;;4053:5;4023:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3859:207:::0;:::o;5364:212::-;3018:23;:21;:23::i;:::-;1219:42:::1;5446:9;::::0;:33:::1;;;;;;;;;;;;;;;;;;5494:28;5512:9;::::0;::::1;;;;;;;;5494:28;;;;;;;;;;;;;;;;;;;;5547:4;5533:29;;;5563:5;5533:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;5364:212:::0;:::o;5825:::-;3018:23;:21;:23::i;:::-;5925:28:::1;5947:5;5925:21;:28::i;:::-;5978:4;5964:39;;;1502:42;5964:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;5825:212:::0;:::o;3535:176::-;3018:23;:21;:23::i;:::-;3609:18:::1;:16;:18::i;:::-;3652:4;3638:39;;;1502:42;3638:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3535:176::o:0;3248:167::-;3018:23;:21;:23::i;:::-;3312:12:::1;:10;:12::i;:::-;972:42;3335:9;::::0;:30:::1;;;;;;;;;;;;;;;;;;3380:28;3398:9;::::0;::::1;;;;;;;;3380:28;;;;;;;;;;;;;;;;;;;;3248:167::o:0;2841:131::-;2906:21;2917:9;;;;;;;;;;2906:10;:21::i;:::-;2898:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2841:131::o;2624:211::-;2669:13;2685:10;:8;:10::i;:::-;2669:26;;2727:1;2710:19;;:5;:19;;;2706:123;;2759:5;2753:30;;;2784:23;2753:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2745:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2706:123;2624:211;:::o;7118:421::-;7178:4;7194:12;7351:7;7339:20;7331:28;;7531:1;7524:4;:8;7517:15;;;7118:421;;;:::o;6176:310::-;6219:13;6244:12;1855:66;6259:18;;6244:33;;6417:4;6411:11;6402:20;;6388:44;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"628400","executionCost":"infinite","totalCost":"infinite"},"external":{"SAFE_150_FALLBACK_HANDLER()":"256","SAFE_150_SINGLETON()":"211","SAFE_150_SINGLETON_L2()":"234","migrateL2Singleton()":"infinite","migrateL2WithFallbackHandler()":"infinite","migrateL2WithSetGuard(address)":"infinite","migrateL2WithSetGuardAndFallbackHandler(address)":"infinite","migrateSingleton()":"infinite","migrateWithFallbackHandler()":"infinite","migrateWithSetGuard(address)":"infinite","migrateWithSetGuardAndFallbackHandler(address)":"infinite"},"internal":{"checkCurrentSingleton()":"infinite","checkGuard()":"infinite","getGuard()":"842","isContract(address)":"747"}},"methodIdentifiers":{"SAFE_150_FALLBACK_HANDLER()":"1e98bdc9","SAFE_150_SINGLETON()":"a5e2eedc","SAFE_150_SINGLETON_L2()":"0db9ceab","migrateL2Singleton()":"07f464a4","migrateL2WithFallbackHandler()":"68cb3d94","migrateL2WithSetGuard(address)":"dc162932","migrateL2WithSetGuardAndFallbackHandler(address)":"ec7b48c9","migrateSingleton()":"f6682ab0","migrateWithFallbackHandler()":"ed007fc6","migrateWithSetGuard(address)":"b7a446f3","migrateWithSetGuardAndFallbackHandler(address)":"807b56d7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"name\":\"ChangedMasterCopy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SAFE_150_FALLBACK_HANDLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_150_SINGLETON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_150_SINGLETON_L2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateL2Singleton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateL2WithFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"migrateL2WithSetGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"migrateL2WithSetGuardAndFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateSingleton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateWithFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"migrateWithSetGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"migrateWithSetGuardAndFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls      if the address stored at the storage slot 0 is not a contract.\",\"events\":{\"ChangedMasterCopy(address)\":{\"params\":{\"singleton\":\"New master copy address\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the migrationSingleton with the contract's own address.\"},\"migrateL2Singleton()\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade.\"},\"migrateL2WithSetGuard(address)\":{\"params\":{\"guard\":\"The address of the new guard contract.\"}},\"migrateL2WithSetGuardAndFallbackHandler(address)\":{\"params\":{\"guard\":\"The address of the new guard contract.\"}},\"migrateSingleton()\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade.\"},\"migrateWithSetGuard(address)\":{\"params\":{\"guard\":\"The address of the new guard contract.\"}},\"migrateWithSetGuardAndFallbackHandler(address)\":{\"params\":{\"guard\":\"The address of the new guard contract.\"}}},\"title\":\"Migration Contract for Safe Upgrade\",\"version\":1},\"userdoc\":{\"events\":{\"ChangedMasterCopy(address)\":{\"notice\":\"Event indicating a change of master copy address.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"migrateL2Singleton()\":{\"notice\":\"Migrate to Safe 1.5.0 Singleton (L2) at `SAFE_150_SINGLETON_L2`\"},\"migrateL2WithFallbackHandler()\":{\"notice\":\"Migrate to Safe 1.5.0 Singleton (L2) and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\"},\"migrateL2WithSetGuard(address)\":{\"notice\":\"Migrate to Safe 1.5.0 Singleton (L2) and set the guard to the specified address.\"},\"migrateL2WithSetGuardAndFallbackHandler(address)\":{\"notice\":\"Migrate to Safe 1.5.0 Singleton (L2), set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\"},\"migrateSingleton()\":{\"notice\":\"Migrate to Safe 1.5.0 Singleton (L1) at `SAFE_150_SINGLETON`\"},\"migrateWithFallbackHandler()\":{\"notice\":\"Migrate and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\"},\"migrateWithSetGuard(address)\":{\"notice\":\"Migrate and set the guard to the specified address.\"},\"migrateWithSetGuardAndFallbackHandler(address)\":{\"notice\":\"Migrate, set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\"}},\"notice\":\"This contract facilitates the migration of a Safe contract from version 1.3.0/1.4.1 to 1.5.0.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Safe150Migration.sol\":\"Safe150Migration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IGuardManager} from \\\"../interfaces/IGuardManager.sol\\\";\\n\\n/// @title Guard Interface\\ninterface Guard is IERC165 {\\n    /// @notice Checks the transaction details.\\n    /// @dev The function needs to implement transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param safeTxGas Gas used for the transaction.\\n    /// @param baseGas The base gas for the transaction.\\n    /// @param gasPrice The price of gas in Wei for the transaction.\\n    /// @param gasToken The token used to pay for gas.\\n    /// @param refundReceiver The address which should receive the refund.\\n    /// @param signatures The signatures of the transaction.\\n    /// @param msgSender The address of the message sender.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    /// @notice Checks the module transaction details.\\n    /// @dev The function needs to implement module transaction validation logic.\\n    /// @param to The address to which the transaction is intended.\\n    /// @param value The value of the transaction in Wei.\\n    /// @param data The transaction data.\\n    /// @param operation The type of operation of the transaction.\\n    /// @param module The module involved in the transaction.\\n    /// @return moduleTxHash The hash of the module transaction.\\n    function checkModuleTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        address module\\n    ) external returns (bytes32 moduleTxHash);\\n\\n    /// @notice Checks after execution of transaction.\\n    /// @dev The function needs to implement a check after the execution of the transaction.\\n    /// @param hash The hash of the transaction.\\n    /// @param success The status of the transaction execution.\\n    function checkAfterExecution(bytes32 hash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0x945b8148\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    // @inheritdoc IGuardManager\\n    function setGuard(address guard) external override authorized {\\n        if (guard != address(0) && !Guard(guard).supportsInterface(type(Guard).interfaceId)) revertWithError(\\\"GS300\\\");\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, guard)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(GUARD_STORAGE_SLOT)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x17a350d4bedb8ef93ff36007ae6f9e0db6730e263486cc76266752f6f1621d18\",\"license\":\"LGPL-3.0-only\"},\"contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {ErrorMessage} from \\\"../libraries/ErrorMessage.sol\\\";\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized is ErrorMessage {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revertWithError(\\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/ErrorMessage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\\n * @author Shebin John - @remedcu\\n * @notice The aim is to save gas using assembly to revert with custom error message.\\n */\\nabstract contract ErrorMessage {\\n    /**\\n     * @notice Function which uses assembly to revert with the passed error message.\\n     * @param error The error string to revert with.\\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \\\"GSXXX\\\"\\n     */\\n    function revertWithError(bytes5 error) internal pure {\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \\\"Error(string)\\\"\\n            mstore(add(ptr, 0x04), 0x20) // String offset\\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\\n            mstore(add(ptr, 0x44), error) // Revert reason\\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Safe150Migration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {SafeStorage} from \\\"../libraries/SafeStorage.sol\\\";\\nimport {Guard} from \\\"../base/GuardManager.sol\\\";\\nimport {ISafe} from \\\"../interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title Migration Contract for Safe Upgrade\\n * @notice This contract facilitates the migration of a Safe contract from version 1.3.0/1.4.1 to 1.5.0.\\n * @dev IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address\\n *      at the storage slot 0. Use at your own risk with custom proxy implementations. The library will block calls\\n *      if the address stored at the storage slot 0 is not a contract.\\n */\\ncontract Safe150Migration is SafeStorage {\\n    // Address of Safe contract version 1.5.0 Singleton (L1)\\n    // TODO: Update this address when the Safe 1.5.0 Singleton is deployed\\n    address public constant SAFE_150_SINGLETON = address(0x88627c8904eCd9DF96A572Ef32A7ff13b199Ed8D);\\n\\n    // Address of Safe contract version 1.5.0 Singleton (L2)\\n    // TODO: Update this address when the Safe 1.5.0 Singleton (L2) is deployed\\n    address public constant SAFE_150_SINGLETON_L2 = address(0x0Ee37514644683f7EB9745a5726C722DeBa77e52);\\n\\n    // Address of Safe contract version 1.5.0 Compatibility Fallback Handler\\n    // TODO: Update this address when the Safe 1.5.0 Compatibility Fallback Handler is deployed\\n    address public constant SAFE_150_FALLBACK_HANDLER = address(0x8aa755cB169991fEDC3E306751dCb71964A041c7);\\n\\n    // the slot is defined as \\\"keccak256(\\\"guard_manager.guard.address\\\")\\\" in the GuardManager contract\\n    // reference: https://github.com/safe-global/safe-smart-account/blob/8ffae95faa815acf86ec8b50021ebe9f96abde10/contracts/base/GuardManager.sol#L76-L77\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @notice Constructor\\n     * @dev Initializes the migrationSingleton with the contract's own address.\\n     */\\n    constructor() {\\n        require(isContract(SAFE_150_SINGLETON), \\\"Safe 1.4.1 Singleton is not deployed\\\");\\n        require(isContract(SAFE_150_SINGLETON_L2), \\\"Safe 1.4.1 Singleton (L2) is not deployed\\\");\\n        require(isContract(SAFE_150_FALLBACK_HANDLER), \\\"Safe 1.4.1 Fallback Handler is not deployed\\\");\\n    }\\n\\n    /**\\n     * @notice Event indicating a change of master copy address.\\n     * @param singleton New master copy address\\n     */\\n    event ChangedMasterCopy(address singleton);\\n\\n    /**\\n     * @dev Private function to check if a guard is supported.\\n     */\\n    function checkGuard() private view {\\n        address guard = getGuard();\\n\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n    }\\n\\n    function checkCurrentSingleton() internal view {\\n        require(isContract(singleton), \\\"Trying to migrate an invalid Safe\\\");\\n    }\\n\\n    modifier validSingletonOnly() {\\n        checkCurrentSingleton();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Migrate to Safe 1.5.0 Singleton (L1) at `SAFE_150_SINGLETON`\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     */\\n    function migrateSingleton() public validSingletonOnly {\\n        checkGuard();\\n\\n        singleton = SAFE_150_SINGLETON;\\n        emit ChangedMasterCopy(singleton);\\n    }\\n\\n    /**\\n     * @notice Migrate and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\\n     */\\n    function migrateWithFallbackHandler() public validSingletonOnly {\\n        migrateSingleton();\\n\\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\\n    }\\n\\n    /**\\n     * @notice Migrate and set the guard to the specified address.\\n     * @param guard The address of the new guard contract.\\n     */\\n    function migrateWithSetGuard(address guard) public validSingletonOnly {\\n        singleton = SAFE_150_SINGLETON;\\n        emit ChangedMasterCopy(singleton);\\n\\n        ISafe(address(this)).setGuard(guard);\\n    }\\n\\n    /**\\n     * @notice Migrate, set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\\n     * @param guard The address of the new guard contract.\\n     */\\n    function migrateWithSetGuardAndFallbackHandler(address guard) public validSingletonOnly {\\n        migrateWithSetGuard(guard);\\n\\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\\n    }\\n\\n    /**\\n     * @notice Migrate to Safe 1.5.0 Singleton (L2) at `SAFE_150_SINGLETON_L2`\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     */\\n    function migrateL2Singleton() public validSingletonOnly {\\n        checkGuard();\\n\\n        singleton = SAFE_150_SINGLETON_L2;\\n        emit ChangedMasterCopy(singleton);\\n    }\\n\\n    /**\\n     * @notice Migrate to Safe 1.5.0 Singleton (L2) and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\\n     */\\n    function migrateL2WithFallbackHandler() public validSingletonOnly {\\n        migrateL2Singleton();\\n\\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\\n    }\\n\\n    /**\\n     * @notice Migrate to Safe 1.5.0 Singleton (L2) and set the guard to the specified address.\\n     * @param guard The address of the new guard contract.\\n     */\\n    function migrateL2WithSetGuard(address guard) public validSingletonOnly {\\n        singleton = SAFE_150_SINGLETON_L2;\\n        emit ChangedMasterCopy(singleton);\\n\\n        ISafe(address(this)).setGuard(guard);\\n    }\\n\\n    /**\\n     * @notice Migrate to Safe 1.5.0 Singleton (L2), set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler.\\n     * @param guard The address of the new guard contract.\\n     */\\n    function migrateL2WithSetGuardAndFallbackHandler(address guard) public validSingletonOnly {\\n        migrateL2WithSetGuard(guard);\\n\\n        ISafe(address(this)).setFallbackHandler(SAFE_150_FALLBACK_HANDLER);\\n    }\\n\\n    /**\\n     * @notice Get the address of the current guard.\\n     * @return guard The address of the current guard contract.\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n\\n    /**\\n     * @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\\n     * @param account The Ethereum address to be checked.\\n     * @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\\n     * It may return incorrect results in some edge cases (see documentation for details).\\n     * Developers should use caution when relying on the results of this function for critical decision-making.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        // If the code size is greater than 0, it is a contract; otherwise, it is an EOA.\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdf0a4b00d5eaf70914e4c5e22ee57d4b40fc649a03dda5970c6b9d1a4b58d78f\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xd2e19f98127e3edf29613dd9c91f74853574a5116a96541a5fadb3133abfc752\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4784,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":4788,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":4792,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":4794,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":4796,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":4798,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":4800,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":4804,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":4810,"contract":"contracts/libraries/Safe150Migration.sol:Safe150Migration","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"ChangedMasterCopy(address)":{"notice":"Event indicating a change of master copy address."}},"kind":"user","methods":{"constructor":{"notice":"Constructor"},"migrateL2Singleton()":{"notice":"Migrate to Safe 1.5.0 Singleton (L2) at `SAFE_150_SINGLETON_L2`"},"migrateL2WithFallbackHandler()":{"notice":"Migrate to Safe 1.5.0 Singleton (L2) and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler."},"migrateL2WithSetGuard(address)":{"notice":"Migrate to Safe 1.5.0 Singleton (L2) and set the guard to the specified address."},"migrateL2WithSetGuardAndFallbackHandler(address)":{"notice":"Migrate to Safe 1.5.0 Singleton (L2), set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler."},"migrateSingleton()":{"notice":"Migrate to Safe 1.5.0 Singleton (L1) at `SAFE_150_SINGLETON`"},"migrateWithFallbackHandler()":{"notice":"Migrate and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler."},"migrateWithSetGuard(address)":{"notice":"Migrate and set the guard to the specified address."},"migrateWithSetGuardAndFallbackHandler(address)":{"notice":"Migrate, set the guard to the specified address, and set the fallback handler to Safe 1.5.0 Compatibility Fallback Handler."}},"notice":"This contract facilitates the migration of a Safe contract from version 1.3.0/1.4.1 to 1.5.0.","version":1}}},"contracts/libraries/SafeStorage.sol":{"SafeStorage":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","details":"Should be always the first base contract of a library that is used with a Safe.","kind":"dev","methods":{},"title":"SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122025ea65dc66f75d6ebdc1dc89e27d0c5d546fadeb00fe38bb421760dd27580d2c64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0xEA PUSH6 0xDC66F75D6EBD 0xC1 0xDC DUP10 0xE2 PUSH30 0xC5D546FADEB00FE38BB421760DD27580D2C64736F6C6343000706003300 ","sourceMap":"312:563:37:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea264697066735822122025ea65dc66f75d6ebdc1dc89e27d0c5d546fadeb00fe38bb421760dd27580d2c64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0xEA PUSH6 0xDC66F75D6EBD 0xC1 0xDC DUP10 0xE2 PUSH30 0xC5D546FADEB00FE38BB421760DD27580D2C64736F6C6343000706003300 ","sourceMap":"312:563:37:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"details\":\"Should be always the first base contract of a library that is used with a Safe.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SafeStorage.sol\":\"SafeStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xd2e19f98127e3edf29613dd9c91f74853574a5116a96541a5fadb3133abfc752\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4784,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":4788,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":4792,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":4794,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":4796,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":4798,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":4800,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":4804,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":4810,"contract":"contracts/libraries/SafeStorage.sol:SafeStorage","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/libraries/SafeToL2Migration.sol":{"SafeToL2Migration":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"singleton","type":"address"}],"name":"ChangedMasterCopy","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"baseGas","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"gasPrice","type":"uint256"},{"indexed":false,"internalType":"address","name":"gasToken","type":"address"},{"indexed":false,"internalType":"address payable","name":"refundReceiver","type":"address"},{"indexed":false,"internalType":"bytes","name":"signatures","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"additionalInfo","type":"bytes"}],"name":"SafeMultiSigTransaction","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"initiator","type":"address"},{"indexed":false,"internalType":"address[]","name":"owners","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"},{"indexed":false,"internalType":"address","name":"initializer","type":"address"},{"indexed":false,"internalType":"address","name":"fallbackHandler","type":"address"}],"name":"SafeSetup","type":"event"},{"inputs":[],"name":"MIGRATION_SINGLETON","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"l2Singleton","type":"address"},{"internalType":"address","name":"fallbackHandler","type":"address"}],"name":"migrateFromV111","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"l2Singleton","type":"address"}],"name":"migrateToL2","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"IMPORTANT: The migration will only work with proxies that store the implementation address in the storage slot 0.","events":{"ChangedMasterCopy(address)":{"params":{"singleton":"New master copy address"}}},"kind":"dev","methods":{"constructor":{"details":"Initializes the migrationSingleton with the contract's own address."},"migrateFromV111(address,address)":{"details":"This function should only be called via a delegatecall to perform the upgrade. Singletons version will be checked, so it implies that contracts exist. A valid and compatible fallbackHandler needs to be provided, only existance will be checked."},"migrateToL2(address)":{"details":"This function should only be called via a delegatecall to perform the upgrade. Singletons versions will be compared, so it implies that contracts exist"}},"title":"Migration Contract for updating a Safe from 1.1.1/1.3.0/1.4.1 versions to a L2 version. Useful when replaying a Safe from a non L2 network in a L2 network.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60a060405234801561001057600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c61166861007960003980610124528061014852806108415280610b70528061132552506116686000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806372f7a95614610046578063d9a208121461007a578063ef2624ae146100de575b600080fd5b61004e610122565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100dc6004803603604081101561009057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610146565b005b610120600480360360208110156100f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b6e565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806115646030913960400191505060405180910390fd5b600160055414610246576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806116116022913960400191505060405180910390fd5b61024f81611263565b6102a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806115946021913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b15801561030d57600080fd5b505afa158015610321573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561034b57600080fd5b810190808051604051939291908464010000000082111561036b57600080fd5b8382019150602082018581111561038157600080fd5b825186600182028301116401000000008211171561039e57600080fd5b8083526020830192505050908051906020019080838360005b838110156103d25780820151818401526020810190506103b7565b50505050905090810190601f1680156103ff5780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b6020831061043c5780518252602082019150602081019050602083039250610419565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060405160200180807f312e312e310000000000000000000000000000000000000000000000000000008152506005019050604051602081830303815290604052805190602001208114610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806115b5602b913960400191505060405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561059d57600080fd5b81019080805160405193929190846401000000008211156105bd57600080fd5b838201915060208201858111156105d357600080fd5b82518660018202830111640100000000821117156105f057600080fd5b8083526020830192505050908051906020019080838360005b83811015610624578082015181840152602081019050610609565b50505050905090810190601f1680156106515780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b6020831061068e578051825260208201915060208101905060208303925061066b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060405160200180807f312e332e30000000000000000000000000000000000000000000000000000000815250600501905060405160208183030381529060405280519060200120811480610764575060405160200180807f312e342e3100000000000000000000000000000000000000000000000000000081525060050190506040516020818303038152906040528051906020012081145b6107b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806115b5602b913960400191505060405180910390fd5b60003090508073ffffffffffffffffffffffffffffffffffffffff1663f08a0323856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561082757600080fd5b505af115801561083b573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88273ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156108dd57600080fd5b505afa1580156108f1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561091b57600080fd5b810190808051604051939291908464010000000082111561093b57600080fd5b8382019150602082018581111561095157600080fd5b825186602082028301116401000000008211171561096e57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156109a557808201518184015260208101905061098a565b505050509050016040525050508373ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b810190808051906020019092919050505060008860405180806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825286818151815260200191508051906020019060200280838360005b83811015610ab7578082015181840152602081019050610a9c565b505050509050019550505050505060405180910390a2600063d9a208128686604051602401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610b668682611276565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610c13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806115646030913960400191505060405180910390fd5b600160055414610c6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806116116022913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806115416023913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610dba57600080fd5b8101908080516040519392919084640100000000821115610dda57600080fd5b83820191506020820185811115610df057600080fd5b8251866001820283011164010000000082111715610e0d57600080fd5b8083526020830192505050908051906020019080838360005b83811015610e41578082015181840152602081019050610e26565b50505050905090810190601f168015610e6e5780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b60208310610eab5780518252602082019150602081019050602083039250610e88565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008273ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b158015610f3057600080fd5b505afa158015610f44573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610f6e57600080fd5b8101908080516040519392919084640100000000821115610f8e57600080fd5b83820191506020820185811115610fa457600080fd5b8251866001820283011164010000000082111715610fc157600080fd5b8083526020830192505050908051906020019080838360005b83811015610ff5578082015181840152602081019050610fda565b50505050905090810190601f1680156110225780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b6020831061105f578051825260208201915060208101905060208303925061103c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090508082146110f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806115e06031913960400191505060405180910390fd5b60405160200180807f312e332e3000000000000000000000000000000000000000000000000000000081525060050190506040516020818303038152906040528051906020012081148061118d575060405160200180807f312e342e3100000000000000000000000000000000000000000000000000000081525060050190506040516020818303038152906040528051906020012081145b6111e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806115b5602b913960400191505060405180910390fd5b600063ef2624ae84604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061125d8482611276565b50505050565b600080823b905060008111915050919050565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008033600454604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405160208183030381529060405290507f66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed7f0000000000000000000000000000000000000000000000000000000000000000600084600160008060008060008a604051808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018060200189600181111561138857fe5b81526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200184810384528c818151815260200191508051906020019080838360005b838110156114175780820151818401526020810190506113fc565b50505050905090810190601f1680156114445780820380516001836020036101000a031916815260200191505b50848103835260008152602001848103825285818151815260200191508051906020019080838360005b8381101561148957808201518184015260208101905061146e565b50505050905090810190601f1680156114b65780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a17f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150505056fe5361666520697320616c7265616479207573696e67207468652073696e676c65746f6e4d6967726174696f6e2073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6c66616c6c6261636b48616e646c6572206973206e6f74206120636f6e747261637450726f76696465642073696e676c65746f6e2076657273696f6e206973206e6f7420737570706f727465644c322073696e676c65746f6e206d757374206d617463682063757272656e742076657273696f6e2073696e676c65746f6e53616665206d7573742068617665206e6f7420657865637574656420616e79207478a26469706673582212209e7602ff6f93f41fd0d07e9f6af190a443dff4fcfcfe805b1b11436c54f8e5d264736f6c63430007060033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x1668 PUSH2 0x79 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x124 MSTORE DUP1 PUSH2 0x148 MSTORE DUP1 PUSH2 0x841 MSTORE DUP1 PUSH2 0xB70 MSTORE DUP1 PUSH2 0x1325 MSTORE POP PUSH2 0x1668 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x72F7A956 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xD9A20812 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0xEF2624AE EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x122 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x146 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x120 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB6E JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1564 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 SLOAD EQ PUSH2 0x246 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1611 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x24F DUP2 PUSH2 0x1263 JUMP JUMPDEST PUSH2 0x2A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1594 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x321 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x381 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3D2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3B7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3FF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x43C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x419 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E312E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ PUSH2 0x517 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B5 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x573 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x624 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x609 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x651 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x68E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x66B JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E332E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ DUP1 PUSH2 0x764 JUMPI POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ JUMPDEST PUSH2 0x7B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B5 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ADDRESS SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x827 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x83B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA0E67E2B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x91B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x93B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9A5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x98A JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE75235B8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 DUP9 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9C JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH4 0xD9A20812 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH2 0xB66 DUP7 DUP3 PUSH2 0x1276 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1564 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 SLOAD EQ PUSH2 0xC6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1611 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1541 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD90 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xDDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xDF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xE0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE41 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE26 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE6E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xEAB JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0xE88 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xF8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xFA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xFC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFF5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFDA JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1022 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x105F JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x103C JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP1 DUP3 EQ PUSH2 0x10F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15E0 PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E332E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ DUP1 PUSH2 0x118D JUMPI POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ JUMPDEST PUSH2 0x11E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B5 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xEF2624AE DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH2 0x125D DUP5 DUP3 PUSH2 0x1276 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 CALLER PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH32 0x66753CD2356569EE081232E3BE8909B950E0A76C1F8460C3A5E3C2BE32B11BED PUSH32 0x0 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 PUSH1 0x40 MLOAD DUP1 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1388 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 SUB DUP5 MSTORE DUP13 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1417 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13FC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1444 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP5 DUP2 SUB DUP4 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1489 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x146E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14B6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP INVALID MSTORE8 PUSH2 0x6665 KECCAK256 PUSH10 0x7320616C726561647920 PUSH22 0x73696E67207468652073696E676C65746F6E4D696772 PUSH2 0x7469 PUSH16 0x6E2073686F756C64206F6E6C79206265 KECCAK256 PUSH4 0x616C6C65 PUSH5 0x2076696120 PUSH5 0x656C656761 PUSH21 0x6563616C6C66616C6C6261636B48616E646C657220 PUSH10 0x73206E6F74206120636F PUSH15 0x747261637450726F76696465642073 PUSH10 0x6E676C65746F6E207665 PUSH19 0x73696F6E206973206E6F7420737570706F7274 PUSH6 0x644C32207369 PUSH15 0x676C65746F6E206D757374206D6174 PUSH4 0x68206375 PUSH19 0x72656E742076657273696F6E2073696E676C65 PUSH21 0x6F6E53616665206D7573742068617665206E6F7420 PUSH6 0x786563757465 PUSH5 0x20616E7920 PUSH21 0x78A26469706673582212209E7602FF6F93F41FD0D0 PUSH31 0x9F6AF190A443DFF4FCFCFE805B1B11436C54F8E5D264736F6C634300070600 CALLER ","sourceMap":"759:6816:38:-:0;;;1013:66;;;;;;;;;;1067:4;1037:35;;;;;;;;;;;;759:6816;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{"4824":[{"length":32,"start":292},{"length":32,"start":328},{"length":32,"start":2113},{"length":32,"start":2928},{"length":32,"start":4901}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806372f7a95614610046578063d9a208121461007a578063ef2624ae146100de575b600080fd5b61004e610122565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100dc6004803603604081101561009057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610146565b005b610120600480360360208110156100f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b6e565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806115646030913960400191505060405180910390fd5b600160055414610246576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806116116022913960400191505060405180910390fd5b61024f81611263565b6102a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806115946021913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b15801561030d57600080fd5b505afa158015610321573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561034b57600080fd5b810190808051604051939291908464010000000082111561036b57600080fd5b8382019150602082018581111561038157600080fd5b825186600182028301116401000000008211171561039e57600080fd5b8083526020830192505050908051906020019080838360005b838110156103d25780820151818401526020810190506103b7565b50505050905090810190601f1680156103ff5780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b6020831061043c5780518252602082019150602081019050602083039250610419565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060405160200180807f312e312e310000000000000000000000000000000000000000000000000000008152506005019050604051602081830303815290604052805190602001208114610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806115b5602b913960400191505060405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561059d57600080fd5b81019080805160405193929190846401000000008211156105bd57600080fd5b838201915060208201858111156105d357600080fd5b82518660018202830111640100000000821117156105f057600080fd5b8083526020830192505050908051906020019080838360005b83811015610624578082015181840152602081019050610609565b50505050905090810190601f1680156106515780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b6020831061068e578051825260208201915060208101905060208303925061066b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060405160200180807f312e332e30000000000000000000000000000000000000000000000000000000815250600501905060405160208183030381529060405280519060200120811480610764575060405160200180807f312e342e3100000000000000000000000000000000000000000000000000000081525060050190506040516020818303038152906040528051906020012081145b6107b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806115b5602b913960400191505060405180910390fd5b60003090508073ffffffffffffffffffffffffffffffffffffffff1663f08a0323856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561082757600080fd5b505af115801561083b573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88273ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156108dd57600080fd5b505afa1580156108f1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561091b57600080fd5b810190808051604051939291908464010000000082111561093b57600080fd5b8382019150602082018581111561095157600080fd5b825186602082028301116401000000008211171561096e57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156109a557808201518184015260208101905061098a565b505050509050016040525050508373ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b810190808051906020019092919050505060008860405180806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825286818151815260200191508051906020019060200280838360005b83811015610ab7578082015181840152602081019050610a9c565b505050509050019550505050505060405180910390a2600063d9a208128686604051602401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610b668682611276565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610c13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806115646030913960400191505060405180910390fd5b600160055414610c6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806116116022913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806115416023913960400191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610dba57600080fd5b8101908080516040519392919084640100000000821115610dda57600080fd5b83820191506020820185811115610df057600080fd5b8251866001820283011164010000000082111715610e0d57600080fd5b8083526020830192505050908051906020019080838360005b83811015610e41578082015181840152602081019050610e26565b50505050905090810190601f168015610e6e5780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b60208310610eab5780518252602082019150602081019050602083039250610e88565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008273ffffffffffffffffffffffffffffffffffffffff1663ffa1ad746040518163ffffffff1660e01b815260040160006040518083038186803b158015610f3057600080fd5b505afa158015610f44573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610f6e57600080fd5b8101908080516040519392919084640100000000821115610f8e57600080fd5b83820191506020820185811115610fa457600080fd5b8251866001820283011164010000000082111715610fc157600080fd5b8083526020830192505050908051906020019080838360005b83811015610ff5578082015181840152602081019050610fda565b50505050905090810190601f1680156110225780820380516001836020036101000a031916815260200191505b506040525050506040516020018082805190602001908083835b6020831061105f578051825260208201915060208101905060208303925061103c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090508082146110f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806115e06031913960400191505060405180910390fd5b60405160200180807f312e332e3000000000000000000000000000000000000000000000000000000081525060050190506040516020818303038152906040528051906020012081148061118d575060405160200180807f312e342e3100000000000000000000000000000000000000000000000000000081525060050190506040516020818303038152906040528051906020012081145b6111e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806115b5602b913960400191505060405180910390fd5b600063ef2624ae84604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061125d8482611276565b50505050565b600080823b905060008111915050919050565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008033600454604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405160208183030381529060405290507f66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed7f0000000000000000000000000000000000000000000000000000000000000000600084600160008060008060008a604051808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018060200189600181111561138857fe5b81526020018881526020018781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200184810384528c818151815260200191508051906020019080838360005b838110156114175780820151818401526020810190506113fc565b50505050905090810190601f1680156114445780820380516001836020036101000a031916815260200191505b50848103835260008152602001848103825285818151815260200191508051906020019080838360005b8381101561148957808201518184015260208101905061146e565b50505050905090810190601f1680156114b65780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a17f75e41bc35ff1bf14d81d1d2f649c0084a0f974f9289c803ec9898eeec4c8d0b860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150505056fe5361666520697320616c7265616479207573696e67207468652073696e676c65746f6e4d6967726174696f6e2073686f756c64206f6e6c792062652063616c6c6564207669612064656c656761746563616c6c66616c6c6261636b48616e646c6572206973206e6f74206120636f6e747261637450726f76696465642073696e676c65746f6e2076657273696f6e206973206e6f7420737570706f727465644c322073696e676c65746f6e206d757374206d617463682063757272656e742076657273696f6e2073696e676c65746f6e53616665206d7573742068617665206e6f7420657865637574656420616e79207478a26469706673582212209e7602ff6f93f41fd0d07e9f6af190a443dff4fcfcfe805b1b11436c54f8e5d264736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x72F7A956 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xD9A20812 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0xEF2624AE EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x122 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x146 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x120 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB6E JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1564 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 SLOAD EQ PUSH2 0x246 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1611 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x24F DUP2 PUSH2 0x1263 JUMP JUMPDEST PUSH2 0x2A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1594 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x321 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x381 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3D2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3B7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x3FF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x43C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x419 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E312E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ PUSH2 0x517 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B5 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x573 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x624 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x609 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x651 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x68E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x66B JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E332E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ DUP1 PUSH2 0x764 JUMPI POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ JUMPDEST PUSH2 0x7B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B5 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ADDRESS SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF08A0323 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x827 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x83B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA0E67E2B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x91B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x93B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9A5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x98A JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE75235B8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 DUP9 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAB7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9C JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH4 0xD9A20812 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH2 0xB66 DUP7 DUP3 PUSH2 0x1276 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1564 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 SLOAD EQ PUSH2 0xC6E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1611 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1541 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD90 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xDDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xDF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xE0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE41 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE26 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE6E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xEAB JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0xE88 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFFA1AD74 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF44 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xF8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xFA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0xFC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFF5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xFDA JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1022 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x105F JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x103C JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP1 DUP3 EQ PUSH2 0x10F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15E0 PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E332E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ DUP1 PUSH2 0x118D JUMPI POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x312E342E31000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 EQ JUMPDEST PUSH2 0x11E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x15B5 PUSH1 0x2B SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xEF2624AE DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH2 0x125D DUP5 DUP3 PUSH2 0x1276 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 CALLER PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH32 0x66753CD2356569EE081232E3BE8909B950E0A76C1F8460C3A5E3C2BE32B11BED PUSH32 0x0 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 PUSH1 0x40 MLOAD DUP1 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1388 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 SUB DUP5 MSTORE DUP13 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1417 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13FC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1444 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP5 DUP2 SUB DUP4 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1489 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x146E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14B6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH32 0x75E41BC35FF1BF14D81D1D2F649C0084A0F974F9289C803EC9898EEEC4C8D0B8 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP INVALID MSTORE8 PUSH2 0x6665 KECCAK256 PUSH10 0x7320616C726561647920 PUSH22 0x73696E67207468652073696E676C65746F6E4D696772 PUSH2 0x7469 PUSH16 0x6E2073686F756C64206F6E6C79206265 KECCAK256 PUSH4 0x616C6C65 PUSH5 0x2076696120 PUSH5 0x656C656761 PUSH21 0x6563616C6C66616C6C6261636B48616E646C657220 PUSH10 0x73206E6F74206120636F PUSH15 0x747261637450726F76696465642073 PUSH10 0x6E676C65746F6E207665 PUSH19 0x73696F6E206973206E6F7420737570706F7274 PUSH6 0x644C32207369 PUSH15 0x676C65746F6E206D757374206D6174 PUSH4 0x68206375 PUSH19 0x72656E742076657273696F6E2073696E676C65 PUSH21 0x6F6E53616665206D7573742068617665206E6F7420 PUSH6 0x786563757465 PUSH5 0x20616E7920 PUSH21 0x78A26469706673582212209E7602FF6F93F41FD0D0 PUSH31 0x9F6AF190A443DFF4FCFCFE805B1B11436C54F8E5D264736F6C634300070600 CALLER ","sourceMap":"759:6816:38:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;839:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5248:1272;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3787:1013;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;839:44;;;:::o;5248:1272::-;2133:19;2116:36;;2124:4;2116:36;;;;2108:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2506:1:::1;2497:5;;:10;2489:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5375:27:::2;5386:15;5375:10;:27::i;:::-;5367:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5451:27;5514:9:::0;::::2;;;;;;;;;;5508:24;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;5491:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5481:55;;;;;;5451:85;;5587:25;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;5577:36;;;;;;5554:19;:59;5546:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5672:27;5735:11;5729:26;;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;5712:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5702:57;;;;;;5672:87;;5823:25;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;5813:36;;;;;;5790:19;:59;:122;;;;5886:25;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;5876:36;;;;;;5853:19;:59;5790:122;5769:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5992:10;6019:4;5992:33;;6035:4;:23;;;6059:15;6035:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;6211:19;6201:98;;;6232:4;:14;;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;6250:4;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;6279:1;6283:15;6201:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6377:25;6428:10;6440:11;6453:15;6405:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6377:92;;6479:34;6487:11;6500:12;6479:7;:34::i;:::-;2556:1;;;;5248:1272:::0;;:::o;3787:1013::-;2133:19;2116:36;;2124:4;2116:36;;;;2108:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2506:1:::1;2497:5;;:10;2489:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3907:11:::2;3885:33;;3893:9;::::0;::::2;;;;;;;;3885:33;;;;3877:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3968:27;4031:9:::0;::::2;;;;;;;;;;4025:24;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;4008:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3998:55;;;;;;3968:85;;4063:27;4126:11;4120:26;;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;4103:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4093:57;;;;;;4063:87;;4192:19;4169;:42;4161:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4450:25;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;4440:36;;;;;;4417:19;:59;:122;;;;4513:25;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;4503:36;;;;;;4480:19;:59;4417:122;4396:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4674:25;4725:10;4737:11;4702:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4674:75;;4759:34;4767:11;4780:12;4759:7;:34::i;:::-;2556:1;;;3787:1013:::0;:::o;7152:421::-;7212:4;7228:12;7385:7;7373:20;7365:28;;7565:1;7558:4;:8;7551:15;;;7152:421;;;:::o;2707:699::-;2802:11;2790:9;;:23;;;;;;;;;;;;;;;;;;2867:27;2908:1;2911:10;2923:9;;2897:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2867:66;;3031:325;3068:19;3101:1;3116:12;3142:27;3183:1;3198;3213;3236;3268;3332:14;3031:325;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3371:28;3389:9;;;;;;;;;;3371:28;;;;;;;;;;;;;;;;;;;;2707:699;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1147200","executionCost":"infinite","totalCost":"infinite"},"external":{"MIGRATION_SINGLETON()":"infinite","migrateFromV111(address,address)":"infinite","migrateToL2(address)":"infinite"},"internal":{"isContract(address)":"747","migrate(address,bytes memory)":"infinite"}},"methodIdentifiers":{"MIGRATION_SINGLETON()":"72f7a956","migrateFromV111(address,address)":"d9a20812","migrateToL2(address)":"ef2624ae"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"name\":\"ChangedMasterCopy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"additionalInfo\",\"type\":\"bytes\"}],\"name\":\"SafeMultiSigTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"}],\"name\":\"SafeSetup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIGRATION_SINGLETON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Singleton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"}],\"name\":\"migrateFromV111\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Singleton\",\"type\":\"address\"}],\"name\":\"migrateToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"IMPORTANT: The migration will only work with proxies that store the implementation address in the storage slot 0.\",\"events\":{\"ChangedMasterCopy(address)\":{\"params\":{\"singleton\":\"New master copy address\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the migrationSingleton with the contract's own address.\"},\"migrateFromV111(address,address)\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade. Singletons version will be checked, so it implies that contracts exist. A valid and compatible fallbackHandler needs to be provided, only existance will be checked.\"},\"migrateToL2(address)\":{\"details\":\"This function should only be called via a delegatecall to perform the upgrade. Singletons versions will be compared, so it implies that contracts exist\"}},\"title\":\"Migration Contract for updating a Safe from 1.1.1/1.3.0/1.4.1 versions to a L2 version. Useful when replaying a Safe from a non L2 network in a L2 network.\",\"version\":1},\"userdoc\":{\"events\":{\"ChangedMasterCopy(address)\":{\"notice\":\"Event indicating a change of master copy address.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"migrateFromV111(address,address)\":{\"notice\":\"Migrate from Safe 1.1.1 Singleton to 1.3.0 or 1.4.1 L2 Safe is required to have nonce 0 so backend can support it after the migration\"},\"migrateToL2(address)\":{\"notice\":\"Migrate from Safe 1.3.0/1.4.1 Singleton (L1) to the same version provided L2 singleton Safe is required to have nonce 0 so backend can support it after the migration\"}},\"notice\":\"This contract facilitates the migration of a Safe contract from version 1.1.1 to 1.3.0/1.4.1 L2, 1.3.0 to 1.3.0L2 or from 1.4.1 to 1.4.1L2         Other versions are not supported\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SafeToL2Migration.sol\":\"SafeToL2Migration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xd2e19f98127e3edf29613dd9c91f74853574a5116a96541a5fadb3133abfc752\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/SafeToL2Migration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {SafeStorage} from \\\"../libraries/SafeStorage.sol\\\";\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {ISafe} from \\\"../interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title Migration Contract for updating a Safe from 1.1.1/1.3.0/1.4.1 versions to a L2 version. Useful when replaying a Safe from a non L2 network in a L2 network.\\n * @notice This contract facilitates the migration of a Safe contract from version 1.1.1 to 1.3.0/1.4.1 L2, 1.3.0 to 1.3.0L2 or from 1.4.1 to 1.4.1L2\\n *         Other versions are not supported\\n * @dev IMPORTANT: The migration will only work with proxies that store the implementation address in the storage slot 0.\\n */\\ncontract SafeToL2Migration is SafeStorage {\\n    // Address of this contract\\n    address public immutable MIGRATION_SINGLETON;\\n\\n    /**\\n     * @notice Constructor\\n     * @dev Initializes the migrationSingleton with the contract's own address.\\n     */\\n    constructor() {\\n        MIGRATION_SINGLETON = address(this);\\n    }\\n\\n    /**\\n     * @notice Event indicating a change of master copy address.\\n     * @param singleton New master copy address\\n     */\\n    event ChangedMasterCopy(address singleton);\\n\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n\\n    event SafeMultiSigTransaction(\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes signatures,\\n        // We combine nonce, sender and threshold into one to avoid stack too deep\\n        // Dev note: additionalInfo should not contain `bytes`, as this complicates decoding\\n        bytes additionalInfo\\n    );\\n\\n    /**\\n     * @notice Modifier to make a function callable via delegatecall only.\\n     * If the function is called via a regular call, it will revert.\\n     */\\n    modifier onlyDelegateCall() {\\n        require(address(this) != MIGRATION_SINGLETON, \\\"Migration should only be called via delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to prevent using initialized Safes.\\n     * If Safe has a nonce higher than 0, it will revert\\n     */\\n    modifier onlyNonceZero() {\\n        // Nonce is increased before executing a tx, so first executed tx will have nonce=1\\n        require(nonce == 1, \\\"Safe must have not executed any tx\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Internal function with common migration steps, changes the singleton and emits SafeMultiSigTransaction event\\n     */\\n    function migrate(address l2Singleton, bytes memory functionData) private {\\n        singleton = l2Singleton;\\n\\n        // Encode nonce, sender, threshold\\n        bytes memory additionalInfo = abi.encode(0, msg.sender, threshold);\\n\\n        // Simulate a L2 transaction so Safe Tx Service indexer picks up the Safe\\n        emit SafeMultiSigTransaction(\\n            MIGRATION_SINGLETON,\\n            0,\\n            functionData,\\n            Enum.Operation.DelegateCall,\\n            0,\\n            0,\\n            0,\\n            address(0),\\n            payable(address(0)),\\n            \\\"\\\", // We cannot detect signatures\\n            additionalInfo\\n        );\\n        emit ChangedMasterCopy(singleton);\\n    }\\n\\n    /**\\n     * @notice Migrate from Safe 1.3.0/1.4.1 Singleton (L1) to the same version provided L2 singleton\\n     * Safe is required to have nonce 0 so backend can support it after the migration\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     * Singletons versions will be compared, so it implies that contracts exist\\n     */\\n    function migrateToL2(address l2Singleton) public onlyDelegateCall onlyNonceZero {\\n        require(address(singleton) != l2Singleton, \\\"Safe is already using the singleton\\\");\\n        bytes32 oldSingletonVersion = keccak256(abi.encodePacked(ISafe(singleton).VERSION()));\\n        bytes32 newSingletonVersion = keccak256(abi.encodePacked(ISafe(l2Singleton).VERSION()));\\n\\n        require(oldSingletonVersion == newSingletonVersion, \\\"L2 singleton must match current version singleton\\\");\\n        // There's no way to make sure if address is a valid singleton, unless we configure the contract for every chain\\n        require(\\n            newSingletonVersion == keccak256(abi.encodePacked(\\\"1.3.0\\\")) || newSingletonVersion == keccak256(abi.encodePacked(\\\"1.4.1\\\")),\\n            \\\"Provided singleton version is not supported\\\"\\n        );\\n\\n        // 0xef2624ae - keccak(\\\"migrateToL2(address)\\\")\\n        bytes memory functionData = abi.encodeWithSelector(0xef2624ae, l2Singleton);\\n        migrate(l2Singleton, functionData);\\n    }\\n\\n    /**\\n     * @notice Migrate from Safe 1.1.1 Singleton to 1.3.0 or 1.4.1 L2\\n     * Safe is required to have nonce 0 so backend can support it after the migration\\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\\n     * Singletons version will be checked, so it implies that contracts exist.\\n     * A valid and compatible fallbackHandler needs to be provided, only existance will be checked.\\n     */\\n    function migrateFromV111(address l2Singleton, address fallbackHandler) public onlyDelegateCall onlyNonceZero {\\n        require(isContract(fallbackHandler), \\\"fallbackHandler is not a contract\\\");\\n\\n        bytes32 oldSingletonVersion = keccak256(abi.encodePacked(ISafe(singleton).VERSION()));\\n        require(oldSingletonVersion == keccak256(abi.encodePacked(\\\"1.1.1\\\")), \\\"Provided singleton version is not supported\\\");\\n\\n        bytes32 newSingletonVersion = keccak256(abi.encodePacked(ISafe(l2Singleton).VERSION()));\\n        require(\\n            newSingletonVersion == keccak256(abi.encodePacked(\\\"1.3.0\\\")) || newSingletonVersion == keccak256(abi.encodePacked(\\\"1.4.1\\\")),\\n            \\\"Provided singleton version is not supported\\\"\\n        );\\n\\n        ISafe safe = ISafe(address(this));\\n        safe.setFallbackHandler(fallbackHandler);\\n\\n        // Safes < 1.3.0 did not emit SafeSetup, so Safe Tx Service backend needs the event to index the Safe\\n        emit SafeSetup(MIGRATION_SINGLETON, safe.getOwners(), safe.getThreshold(), address(0), fallbackHandler);\\n\\n        // 0xd9a20812 - keccak(\\\"migrateFromV111(address,address)\\\")\\n        bytes memory functionData = abi.encodeWithSelector(0xd9a20812, l2Singleton, fallbackHandler);\\n        migrate(l2Singleton, functionData);\\n    }\\n\\n    /**\\n     * @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\\n     * @param account The Ethereum address to be checked.\\n     * @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\\n     * It may return incorrect results in some edge cases (see documentation for details).\\n     * Developers should use caution when relying on the results of this function for critical decision-making.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        // If the code size is greater than 0, it is a contract; otherwise, it is an EOA.\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf68fab10f355443d71914df4a51ad8624708b350a65a393a58284323287b7b94\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4784,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":4788,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":4792,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":4794,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":4796,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":4798,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":4800,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":4804,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":4810,"contract":"contracts/libraries/SafeToL2Migration.sol:SafeToL2Migration","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"ChangedMasterCopy(address)":{"notice":"Event indicating a change of master copy address."}},"kind":"user","methods":{"constructor":{"notice":"Constructor"},"migrateFromV111(address,address)":{"notice":"Migrate from Safe 1.1.1 Singleton to 1.3.0 or 1.4.1 L2 Safe is required to have nonce 0 so backend can support it after the migration"},"migrateToL2(address)":{"notice":"Migrate from Safe 1.3.0/1.4.1 Singleton (L1) to the same version provided L2 singleton Safe is required to have nonce 0 so backend can support it after the migration"}},"notice":"This contract facilitates the migration of a Safe contract from version 1.1.1 to 1.3.0/1.4.1 L2, 1.3.0 to 1.3.0L2 or from 1.4.1 to 1.4.1L2         Other versions are not supported","version":1}}},"contracts/libraries/SignMessageLib.sol":{"SignMessageLib":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"SignMsg","type":"event"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"signMessage","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"getMessageHash(bytes)":{"details":"Returns hash of a message that can be signed by owners.","params":{"message":"Message that should be hashed."},"returns":{"_0":"Message hash."}},"signMessage(bytes)":{"details":"Can be verified using EIP-1271 validation method by passing the pre-image of the message hash and empty bytes as the signature.","params":{"_data":"Arbitrary length data that should be marked as signed on the behalf of address(this)."}}},"title":"SignMessageLib - Allows to sign messages on-chain by writing the signed message hashes on-chain.","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506103c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630a1028c41461003b57806385a5affe1461010a575b600080fd5b6100f46004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610183565b6040518082815260200191505060405180910390f35b6101816004803603602081101561012057600080fd5b810190808035906020019064010000000081111561013d57600080fd5b82018360208201111561014f57600080fd5b8035906020019184600183028401116401000000008311171561017157600080fd5b90919293919293905050506102f4565b005b6000807f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050601960f81b600160f81b3073ffffffffffffffffffffffffffffffffffffffff1663f698da256040518163ffffffff1660e01b815260040160206040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d602081101561025b57600080fd5b81019080805190602001909291905050508360405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010183815260200182815260200194505050505060405160208183030381529060405280519060200120915050919050565b600061034383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610183565b905060016007600083815260200190815260200160002081905550807fe7f4675038f4f6034dfcbbb24c4dc08e4ebf10eb9d257d3d02c0f38d122ac6e460405160405180910390a250505056fea26469706673582212200fea6091ee5ea62fc3abc8c4fd2739ab612607cea3a2badd60525ecaa656310864736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C6 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA1028C4 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x85A5AFFE EQ PUSH2 0x10A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x183 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x14F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x2F4 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x245 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x343 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x183 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0xE7F4675038F4F6034DFCBBB24C4DC08E4EBF10EB9D257D3D02C0F38D122AC6E4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xEA PUSH1 0x91 0xEE 0x5E 0xA6 0x2F 0xC3 0xAB 0xC8 0xC4 REVERT 0x27 CODECOPY 0xAB PUSH2 0x2607 0xCE LOG3 LOG2 0xBA 0xDD PUSH1 0x52 0x5E 0xCA 0xA6 JUMP BALANCE ADDMOD PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"326:1237:39:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c80630a1028c41461003b57806385a5affe1461010a575b600080fd5b6100f46004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610183565b6040518082815260200191505060405180910390f35b6101816004803603602081101561012057600080fd5b810190808035906020019064010000000081111561013d57600080fd5b82018360208201111561014f57600080fd5b8035906020019184600183028401116401000000008311171561017157600080fd5b90919293919293905050506102f4565b005b6000807f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050601960f81b600160f81b3073ffffffffffffffffffffffffffffffffffffffff1663f698da256040518163ffffffff1660e01b815260040160206040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d602081101561025b57600080fd5b81019080805190602001909291905050508360405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010183815260200182815260200194505050505060405160208183030381529060405280519060200120915050919050565b600061034383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610183565b905060016007600083815260200190815260200160002081905550807fe7f4675038f4f6034dfcbbb24c4dc08e4ebf10eb9d257d3d02c0f38d122ac6e460405160405180910390a250505056fea26469706673582212200fea6091ee5ea62fc3abc8c4fd2739ab612607cea3a2badd60525ecaa656310864736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA1028C4 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x85A5AFFE EQ PUSH2 0x10A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x183 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x14F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x2F4 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x245 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x343 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x183 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0xE7F4675038F4F6034DFCBBB24C4DC08E4EBF10EB9D257D3D02C0F38D122AC6E4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xEA PUSH1 0x91 0xEE 0x5E 0xA6 0x2F 0xC3 0xAB 0xC8 0xC4 REVERT 0x27 CODECOPY 0xAB PUSH2 0x2607 0xCE LOG3 LOG2 0xBA 0xDD PUSH1 0x52 0x5E 0xCA 0xA6 JUMP BALANCE ADDMOD PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"326:1237:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1244:317;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;896:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1244:317;1311:7;1330:23;464:66;1377:17;;1406:7;1396:18;;;;;;1366:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1356:60;;;;;;1330:86;;1467:4;1460:12;;1481:4;1474:12;;1510:4;1488:45;;;:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1537:15;1443:110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1433:121;;;;;;1426:128;;;1244:317;;;:::o;896:176::-;958:15;976:21;991:5;;976:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:14;:21::i;:::-;958:39;;1033:1;1007:14;:23;1022:7;1007:23;;;;;;;;;;;:27;;;;1057:7;1049:16;;;;;;;;;;896:176;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"193200","executionCost":"238","totalCost":"193438"},"external":{"getMessageHash(bytes)":"infinite","signMessage(bytes)":"infinite"}},"methodIdentifiers":{"getMessageHash(bytes)":"0a1028c4","signMessage(bytes)":"85a5affe"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"SignMsg\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"signMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"getMessageHash(bytes)\":{\"details\":\"Returns hash of a message that can be signed by owners.\",\"params\":{\"message\":\"Message that should be hashed.\"},\"returns\":{\"_0\":\"Message hash.\"}},\"signMessage(bytes)\":{\"details\":\"Can be verified using EIP-1271 validation method by passing the pre-image of the message hash and empty bytes as the signature.\",\"params\":{\"_data\":\"Arbitrary length data that should be marked as signed on the behalf of address(this).\"}}},\"title\":\"SignMessageLib - Allows to sign messages on-chain by writing the signed message hashes on-chain.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"signMessage(bytes)\":{\"notice\":\"Marks a message (`_data`) as signed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SignMessageLib.sol\":\"SignMessageLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager is IGuardManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0x78248b3ee484fa97ef6d59a8ad5be72c634f15f1f4aa87d70fb45c54f141c18e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @dev This function makes it compatible with previous versions.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory /* IGNORED */, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7708b76ddf047626a042dfe38319d6254f51c7e8f5d16a5cd490eff412b99e54\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xd2e19f98127e3edf29613dd9c91f74853574a5116a96541a5fadb3133abfc752\",\"license\":\"LGPL-3.0-only\"},\"contracts/libraries/SignMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {SafeStorage} from \\\"./SafeStorage.sol\\\";\\nimport {ISafe} from \\\"../interfaces/ISafe.sol\\\";\\n\\n/**\\n * @title SignMessageLib - Allows to sign messages on-chain by writing the signed message hashes on-chain.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SignMessageLib is SafeStorage {\\n    // keccak256(\\\"SafeMessage(bytes message)\\\");\\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\\n\\n    event SignMsg(bytes32 indexed msgHash);\\n\\n    /**\\n     * @notice Marks a message (`_data`) as signed.\\n     * @dev Can be verified using EIP-1271 validation method by passing the pre-image of the message hash and empty bytes as the signature.\\n     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this).\\n     */\\n    function signMessage(bytes calldata _data) external {\\n        bytes32 msgHash = getMessageHash(_data);\\n        signedMessages[msgHash] = 1;\\n        emit SignMsg(msgHash);\\n    }\\n\\n    /**\\n     * @dev Returns hash of a message that can be signed by owners.\\n     * @param message Message that should be hashed.\\n     * @return Message hash.\\n     */\\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\\n        return keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), ISafe(payable(address(this))).domainSeparator(), safeMessageHash));\\n    }\\n}\\n\",\"keccak256\":\"0xb1b0472e1c6d6cbf508f42fb55e118f92c63c2c6b9dd3172f5c0332a003e93da\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4784,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":4788,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":4792,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":4794,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":4796,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":4798,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":4800,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":4804,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":4810,"contract":"contracts/libraries/SignMessageLib.sol:SignMessageLib","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"signMessage(bytes)":{"notice":"Marks a message (`_data`) as signed."}},"version":1}}}}}}